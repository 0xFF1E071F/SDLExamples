UASM v2.50, Sep  8 2020, Masm-compatible assembler.

main.asm
                            *   .model FLAT
00000000                    *   _TEXT segment PARA FLAT PUBLIC 'CODE'
                            *   _TEXT ends
00000000                    *   _DATA segment PARA FLAT PUBLIC 'DATA'
                            *   _DATA ends
                            *   assume cs:flat,ds:flat,ss:flat,es:flat,fs:ERROR,gs:NOTHING
                                ; ML64 template file
                                ; Compile: uasm64.exe -nologo -win64 -Zd -Zi -c testUasm.asm
                                ; Link: link /nologo /debug /subsystem:console /entry:main testUasm.obj user32.lib kernel32.lib 
                                OPTION WIN64:8


                                ; Include libraries
                                includelib SDL2.lib
                                includelib SDL2main.lib
                                includelib SDL2_image.lib
                                includelib SDL2_ttf.lib
                                includelib SDL2_mixer.lib

                                ; Include files
                                include main.inc
 = 0                          C EXIT_SUCCESS = 0
 = FFFFFFFF                   C EXIT_FAILURE = -1
                              C 
 = 80000000                   C GENERIC_READ	= 080000000h
 = 40000000                   C GENERIC_WRITE	= 040000000h
                              C 
 = FFFFFFF6                   C STD_INPUT_HANDLE = -10
 = FFFFFFF5                   C STD_OUTPUT_HANDLE = -11
 = FFFFFFF4                   C STD_ERROR_HANDLE = -12
                              C 
 = WriteConsoleA              C WriteConsole TEXTEQU <WriteConsoleA>
                              C 
                              C GetStdHandle PROTO nStdHandle:DWORD
                              C 
                              C ExitProcess PROTO exitValue:DWORD
                              C 
                              C WriteConsoleA PROTO hConsoleOutput:DWORD, lpBuffer:DWORD, nNumberOfCharsToWrite:DWORD, lpNumberOfCharsWritten:DWORD, lpReserver:DWORD
                              C 
                              C TestFunction PROTO dwArg1:DWORD,dwArg2:DWORD,dwArg3:DWORD,dwArg4:DWORD
                              C 
                              C TestFunction2 PROTO
                                include SDL.inc
                              C ; SDL.h
                              C 
                              C ifndef SDL_h_
 =                            C SDL_h_	EQU	<>
                              C Uint16	typedef WORD
                              C Sint16	typedef SWORD
                              C Sint32	typedef SDWORD
                              C Uint32 	typedef DWORD
                              C Uint8	typedef BYTE
                              C Sint8	typedef SBYTE
                              C SDL_Bool typedef BYTE
                              C Sint64 	typedef QWORD
                              C Uint64 	typedef QWORD
                              C size_t 	typedef QWORD
                              C ;include SDL_main.inc
                              C ;include SDL_stdinc.inc
                              C ;include SDL_assert.inc
                              C ;include SDL_atomic.inc
                              C ;include SDL_audio.inc
                              C ;include SDL_clipboard.inc
                              C ;include SDL_cpuinfo.inc
                              C ;include SDL_endian.inc
                              C include SDL_error.inc
                              C 
                              C ifndef SDL_error_h_
 =                            C SDL_error_h_	EQU	<>
                              C 
                              C SDL_SetError proto  :ptr SBYTE, :VARARG
                              C ;SDL_PRINTF_VARARG_FUNC proto  :1
                              C SDL_GetError proto  
                              C SDL_ClearError proto  
                              C 
                              C mSDL_OutOfMemory macro 
 >                            C 	exitm <SDL_Error ( SDL_ENOMEM ) >
 >                            C 	endm
                              C 	
                              C mSDL_Unsupported macro 
 >                            C 	exitm <SDL_Error ( SDL_UNSUPPORTED ) >
 >                            C 	endm
                              C 	
                              C mSDL_InvalidParamError macro param
 >                            C 	exitm <SDL_SetError ( "Parameter '%s' is invalid" , ( param ) ) >
 >                            C 	endm
                              C 	
                              C SDL_errorcode typedef DWORD
 = 0                          C SDL_ENOMEM = 0
 = 1                          C SDL_EFREAD = 1
 = 2                          C SDL_EFWRITE = 2
 = 3                          C SDL_EFSEEK = 3
 = 4                          C SDL_UNSUPPORTED = 4
 = 5                          C SDL_LASTERROR = 5
                              C 
                              C SDL_Error proto  :SDL_errorcode
                              C endif 
                              C include SDL_events.inc
                              C ifndef SDL_events_h_
 =                            C SDL_events_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C 
                              C ifndef SDL_error_h_
                              C SDL_error_h_	EQU	<>
                              C 
                              C SDL_SetError proto  :ptr SBYTE, :VARARG
                              C ;SDL_PRINTF_VARARG_FUNC proto  :1
                              C SDL_GetError proto  
                              C SDL_ClearError proto  
                              C 
                              C mSDL_OutOfMemory macro 
                              C 	exitm <SDL_Error ( SDL_ENOMEM ) >
                              C 	endm
                              C 	
                              C mSDL_Unsupported macro 
                              C 	exitm <SDL_Error ( SDL_UNSUPPORTED ) >
                              C 	endm
                              C 	
                              C mSDL_InvalidParamError macro param
                              C 	exitm <SDL_SetError ( "Parameter '%s' is invalid" , ( param ) ) >
                              C 	endm
                              C 	
                              C SDL_errorcode typedef DWORD
                              C SDL_ENOMEM = 0
                              C SDL_EFREAD = 1
                              C SDL_EFWRITE = 2
                              C SDL_EFSEEK = 3
                              C SDL_UNSUPPORTED = 4
                              C SDL_LASTERROR = 5
                              C 
                              C SDL_Error proto  :SDL_errorcode
                              C endif 
                              C 	include SDL_video.inc
                              C 
                              C ifndef SDL_video_h_
 =                            C SDL_video_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_pixels.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_pixels.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_pixels.h
                              C 
                              C ifndef SDL_pixels_h_
 =                            C SDL_pixels_h_	EQU	<>
                              C 	;include SDL_endian.inc
                              C 
 = FF                         C SDL_ALPHA_OPAQUE	EQU	255
 = 0                          C SDL_ALPHA_TRANSPARENT	EQU	0
                              C SDL_PixelType typedef DWORD
 = 0                          C SDL_PIXELTYPE_UNKNOWN = 0
 = 1                          C SDL_PIXELTYPE_INDEX1 = 1
 = 2                          C SDL_PIXELTYPE_INDEX4 = 2
 = 3                          C SDL_PIXELTYPE_INDEX8 = 3
 = 4                          C SDL_PIXELTYPE_PACKED8 = 4
 = 5                          C SDL_PIXELTYPE_PACKED16 = 5
 = 6                          C SDL_PIXELTYPE_PACKED32 = 6
 = 7                          C SDL_PIXELTYPE_ARRAYU8 = 7
 = 8                          C SDL_PIXELTYPE_ARRAYU16 = 8
 = 9                          C SDL_PIXELTYPE_ARRAYU32 = 9
 = A                          C SDL_PIXELTYPE_ARRAYF16 = 10
 = B                          C SDL_PIXELTYPE_ARRAYF32 = 11
                              C 
                              C SDL_BitmapOrder typedef DWORD
 = 0                          C SDL_BITMAPORDER_NONE = 0
 = 1                          C SDL_BITMAPORDER_4321 = 1
 = 2                          C SDL_BITMAPORDER_1234 = 2
                              C 
                              C SDL_PackedOrder typedef DWORD
 = 0                          C SDL_PACKEDORDER_NONE = 0
 = 1                          C SDL_PACKEDORDER_XRGB = 1
 = 2                          C SDL_PACKEDORDER_RGBX = 2
 = 3                          C SDL_PACKEDORDER_ARGB = 3
 = 4                          C SDL_PACKEDORDER_RGBA = 4
 = 5                          C SDL_PACKEDORDER_XBGR = 5
 = 6                          C SDL_PACKEDORDER_BGRX = 6
 = 7                          C SDL_PACKEDORDER_ABGR = 7
 = 8                          C SDL_PACKEDORDER_BGRA = 8
                              C 
                              C SDL_ArrayOrder typedef DWORD
 = 0                          C SDL_ARRAYORDER_NONE = 0
 = 1                          C SDL_ARRAYORDER_RGB = 1
 = 2                          C SDL_ARRAYORDER_RGBA = 2
 = 3                          C SDL_ARRAYORDER_ARGB = 3
 = 4                          C SDL_ARRAYORDER_BGR = 4
 = 5                          C SDL_ARRAYORDER_BGRA = 5
 = 6                          C SDL_ARRAYORDER_ABGR = 6
                              C 
                              C SDL_PackedLayout typedef DWORD
 = 0                          C SDL_PACKEDLAYOUT_NONE = 0
 = 1                          C SDL_PACKEDLAYOUT_332 = 1
 = 2                          C SDL_PACKEDLAYOUT_4444 = 2
 = 3                          C SDL_PACKEDLAYOUT_1555 = 3
 = 4                          C SDL_PACKEDLAYOUT_5551 = 4
 = 5                          C SDL_PACKEDLAYOUT_565 = 5
 = 6                          C SDL_PACKEDLAYOUT_8888 = 6
 = 7                          C SDL_PACKEDLAYOUT_2101010 = 7
 = 8                          C SDL_PACKEDLAYOUT_1010102 = 8
                              C 
                              C SDL_DEFINE_PIXELFOURCC macro A,B,C,D
 >                            C 	exitm <SDL_FOURCC ( A , B , C , D ) >
 >                            C 	endm
                              C SDL_DEFINE_PIXELFORMAT macro type,order,layout,bits,bytes
 >                            C 	exitm <( ( 1  shl  28 )  or  ( ( type )  shl  24 )  or  ( ( order )  shl  20 )  or  ( ( layout )  shl  16 )  or  ( ( bits )  shl  8 )  or  ( ( bytes )  shl  0 ) ) >
 >                            C 	endm
                              C SDL_PIXELFLAG macro X
 >                            C 	exitm <( ( ( X )  shr  28 )  and  0Fh ) >
 >                            C 	endm
                              C mSDL_PIXELTYPE macro X
 >                            C 	exitm <( ( ( X )  shr  24 )  and  0Fh ) >
 >                            C 	endm
                              C SDL_PIXELORDER macro X
 >                            C 	exitm <( ( ( X )  shr  20 )  and  0Fh ) >
 >                            C 	endm
                              C SDL_PIXELLAYOUT macro X
 >                            C 	exitm <( ( ( X )  shr  16 )  and  0Fh ) >
 >                            C 	endm
                              C SDL_BITSPERPIXEL macro X
 >                            C 	exitm <( ( ( X )  shr  8 )  and  0FFh ) >
 >                            C 	endm
                              C SDL_BYTESPERPIXEL macro X
 >                            C 	exitm <( SDL_ISPIXELFORMAT_FOURCC ( X ) ? ( ( ( ( X ) == SDL_PIXELFORMAT_YUY2 ) || ( ( X ) == SDL_PIXELFORMAT_UYVY ) || ( ( X ) == SDL_PIXELFORMAT_YVYU ) ) ? 2 : 1 ) : ( ( ( X )  shr  0 )  and  0FFh ) ) >
 >                            C 	endm
                              C SDL_ISPIXELFORMAT_INDEXED macro format
 >                            C 	exitm <( ! SDL_ISPIXELFORMAT_FOURCC ( format ) && ( ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_INDEX1 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_INDEX4 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_INDEX8 ) ) ) >
 >                            C 	endm
                              C SDL_ISPIXELFORMAT_PACKED macro format
 >                            C 	exitm <( ! SDL_ISPIXELFORMAT_FOURCC ( format ) && ( ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_PACKED8 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_PACKED16 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_PACKED32 ) ) ) >
 >                            C 	endm
                              C SDL_ISPIXELFORMAT_ARRAY macro format
 >                            C 	exitm <( ! SDL_ISPIXELFORMAT_FOURCC ( format ) && ( ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYU8 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYU16 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYU32 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYF16 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYF32 ) ) ) >
 >                            C 	endm
                              C SDL_ISPIXELFORMAT_ALPHA macro format
 >                            C 	exitm <( ( SDL_ISPIXELFORMAT_PACKED ( format ) && ( ( SDL_PIXELORDER ( format ) == SDL_PACKEDORDER_ARGB ) || ( SDL_PIXELORDER ( format ) == SDL_PACKEDORDER_RGBA ) || ( SDL_PIXELORDER ( format ) == SDL_PACKEDORDER_ABGR ) || ( SDL_PIXELORDER ( format ) == SDL_PACKEDORDER_BGRA ) ) ) || ( SDL_ISPIXELFORMAT_ARRAY ( format ) && ( ( SDL_PIXELORDER ( format ) == SDL_ARRAYORDER_ARGB ) || ( SDL_PIXELORDER ( format ) == SDL_ARRAYORDER_RGBA ) || ( SDL_PIXELORDER ( format ) == SDL_ARRAYORDER_ABGR ) || ( SDL_PIXELORDER ( format ) == SDL_ARRAYORDER_BGRA ) ) ) ) >
 >                            C 	endm
                              C SDL_ISPIXELFORMAT_FOURCC macro format
 >                            C 	exitm <( ( format ) && ( SDL_PIXELFLAG ( format ) != 1 ) ) >
 >                            C 	endm
                              C SDL_PixelFormatEnum typedef DWORD
 = 0                          C SDL_PIXELFORMAT_UNKNOWN = 0
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX1 )  shl  24 )  or  ( ( SDL_BITMAPORDER_4321 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 1 )  shl  8 )  or  ( ( 0 )  shl  0 ) ) >
 = 11100100                   C SDL_PIXELFORMAT_INDEX1LSB = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX1 )  shl  24 )  or  ( ( SDL_BITMAPORDER_4321 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 1 )  shl  8 )  or  ( ( 0 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX1 )  shl  24 )  or  ( ( SDL_BITMAPORDER_1234 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 1 )  shl  8 )  or  ( ( 0 )  shl  0 ) ) >
 = 11200100                   C SDL_PIXELFORMAT_INDEX1MSB = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX1 )  shl  24 )  or  ( ( SDL_BITMAPORDER_1234 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 1 )  shl  8 )  or  ( ( 0 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX4 )  shl  24 )  or  ( ( SDL_BITMAPORDER_4321 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 4 )  shl  8 )  or  ( ( 0 )  shl  0 ) ) >
 = 12100400                   C SDL_PIXELFORMAT_INDEX4LSB = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX4 )  shl  24 )  or  ( ( SDL_BITMAPORDER_4321 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 4 )  shl  8 )  or  ( ( 0 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX4 )  shl  24 )  or  ( ( SDL_BITMAPORDER_1234 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 4 )  shl  8 )  or  ( ( 0 )  shl  0 ) ) >
 = 12200400                   C SDL_PIXELFORMAT_INDEX4MSB = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX4 )  shl  24 )  or  ( ( SDL_BITMAPORDER_1234 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 4 )  shl  8 )  or  ( ( 0 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX8 )  shl  24 )  or  ( ( 0 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 8 )  shl  8 )  or  ( ( 1 )  shl  0 ) ) >
 = 13000801                   C SDL_PIXELFORMAT_INDEX8 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_INDEX8 )  shl  24 )  or  ( ( 0 )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 8 )  shl  8 )  or  ( ( 1 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED8 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_332 )  shl  16 )  or  ( ( 8 )  shl  8 )  or  ( ( 1 )  shl  0 ) ) >
 = 14110801                   C SDL_PIXELFORMAT_RGB332 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED8 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_332 )  shl  16 )  or  ( ( 8 )  shl  8 )  or  ( ( 1 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 12 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15120C02                   C SDL_PIXELFORMAT_RGB444 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 12 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XBGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 12 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15520C02                   C SDL_PIXELFORMAT_BGR444 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XBGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 12 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_1555 )  shl  16 )  or  ( ( 15 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15130F02                   C SDL_PIXELFORMAT_RGB555 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_1555 )  shl  16 )  or  ( ( 15 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XBGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_1555 )  shl  16 )  or  ( ( 15 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15530F02                   C SDL_PIXELFORMAT_BGR555 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XBGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_1555 )  shl  16 )  or  ( ( 15 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ARGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15321002                   C SDL_PIXELFORMAT_ARGB4444 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ARGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_RGBA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15421002                   C SDL_PIXELFORMAT_RGBA4444 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_RGBA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ABGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15721002                   C SDL_PIXELFORMAT_ABGR4444 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ABGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_BGRA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15821002                   C SDL_PIXELFORMAT_BGRA4444 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_BGRA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_4444 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ARGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_1555 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15331002                   C SDL_PIXELFORMAT_ARGB1555 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ARGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_1555 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_RGBA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_5551 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15441002                   C SDL_PIXELFORMAT_RGBA5551 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_RGBA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_5551 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ABGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_1555 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15731002                   C SDL_PIXELFORMAT_ABGR1555 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ABGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_1555 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_BGRA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_5551 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15841002                   C SDL_PIXELFORMAT_BGRA5551 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_BGRA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_5551 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_565 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15151002                   C SDL_PIXELFORMAT_RGB565 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_565 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XBGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_565 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) >
 = 15551002                   C SDL_PIXELFORMAT_BGR565 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED16 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XBGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_565 )  shl  16 )  or  ( ( 16 )  shl  8 )  or  ( ( 2 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_ARRAYU8 )  shl  24 )  or  ( ( SDL_ARRAYORDER_RGB )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 3 )  shl  0 ) ) >
 = 17101803                   C SDL_PIXELFORMAT_RGB24 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_ARRAYU8 )  shl  24 )  or  ( ( SDL_ARRAYORDER_RGB )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 3 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_ARRAYU8 )  shl  24 )  or  ( ( SDL_ARRAYORDER_BGR )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 3 )  shl  0 ) ) >
 = 17401803                   C SDL_PIXELFORMAT_BGR24 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_ARRAYU8 )  shl  24 )  or  ( ( SDL_ARRAYORDER_BGR )  shl  20 )  or  ( ( 0 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 3 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16161804                   C SDL_PIXELFORMAT_RGB888 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XRGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_RGBX )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16261804                   C SDL_PIXELFORMAT_RGBX8888 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_RGBX )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XBGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16561804                   C SDL_PIXELFORMAT_BGR888 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_XBGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_BGRX )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16661804                   C SDL_PIXELFORMAT_BGRX8888 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_BGRX )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 24 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ARGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16362004                   C SDL_PIXELFORMAT_ARGB8888 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ARGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_RGBA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16462004                   C SDL_PIXELFORMAT_RGBA8888 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_RGBA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ABGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16762004                   C SDL_PIXELFORMAT_ABGR8888 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ABGR )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_BGRA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16862004                   C SDL_PIXELFORMAT_BGRA8888 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_BGRA )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_8888 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                             1C 	exitm <( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ARGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_2101010 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) >
 = 16372004                   C SDL_PIXELFORMAT_ARGB2101010 = ( ( 1  shl  28 )  or  ( ( SDL_PIXELTYPE_PACKED32 )  shl  24 )  or  ( ( SDL_PACKEDORDER_ARGB )  shl  20 )  or  ( ( SDL_PACKEDLAYOUT_2101010 )  shl  16 )  or  ( ( 32 )  shl  8 )  or  ( ( 4 )  shl  0 ) ) 
                              C ;if SDL_BYTEORDER eq SDL_BIG_ENDIAN
                              C ;SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA8888 
                              C ;SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB8888 
                              C ;SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA8888 
                              C ;SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR8888 
                              C ;else 
 = 16762004                   C SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888 
 = 16862004                   C SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888 
 = 16362004                   C SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888 
 = 16462004                   C SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888 
                              C ;endif 
                              C ;SDL_PIXELFORMAT_YV12 = SDL_DEFINE_PIXELFOURCC( 'Y' , 'V' , '1' , '2')
                              C ;SDL_PIXELFORMAT_IYUV = SDL_DEFINE_PIXELFOURCC( 'I' , 'Y' , 'U' , 'V')
                              C ;SDL_PIXELFORMAT_YUY2 = SDL_DEFINE_PIXELFOURCC( 'Y' , 'U' , 'Y' , '2')
                              C ;SDL_PIXELFORMAT_UYVY = SDL_DEFINE_PIXELFOURCC( 'U' , 'Y' , 'V' , 'Y')
                              C ;SDL_PIXELFORMAT_YVYU = SDL_DEFINE_PIXELFOURCC( 'Y' , 'V' , 'Y' , 'U')
                              C ;SDL_PIXELFORMAT_NV12 = SDL_DEFINE_PIXELFOURCC( 'N' , 'V' , '1' , '2')
                              C ;SDL_PIXELFORMAT_NV21 = SDL_DEFINE_PIXELFOURCC( 'N' , 'V' , '2' , '1')
                              C ;SDL_PIXELFORMAT_EXTERNAL_OES = SDL_DEFINE_PIXELFOURCC( 'O' , 'E' , 'S' , ' ')
                              C 
00000000                      C SDL_Color	struct 
00000000                      C r	Uint8	?
00000001                      C g	Uint8	?
00000002                      C b	Uint8	?
00000003                      C a	Uint8	?
00000004                      C SDL_Color	ends
                              C 
 = SDL_Color                  C SDL_Colour	EQU	<SDL_Color>
00000000                      C SDL_Palette	struct 
00000000                      C ncolors	DWORD	?
00000004                      C colors	DWORD	?
00000008                      C version	DWORD	?
0000000C                      C refcount	DWORD	?
00000010                      C SDL_Palette	ends
                              C 
00000000                      C SDL_PixelFormat	struct 
00000000                      C format	DWORD	?
00000004                      C palette	DWORD	?
00000008                      C BitsPerPixel	Uint8	?
00000009                      C BytesPerPixel	Uint8	?
0000000A                      C padding	Uint8 2 dup (?)
0000000C                      C Rmask	DWORD	?
00000010                      C Gmask	DWORD	?
00000014                      C Bmask	DWORD	?
00000018                      C Amask	DWORD	?
0000001C                      C Rloss	Uint8	?
0000001D                      C Gloss	Uint8	?
0000001E                      C Bloss	Uint8	?
0000001F                      C Aloss	Uint8	?
00000020                      C Rshift	Uint8	?
00000021                      C Gshift	Uint8	?
00000022                      C Bshift	Uint8	?
00000023                      C Ashift	Uint8	?
00000024                      C refcount	DWORD	?
00000028                      C next DWORD ?
0000002C                      C SDL_PixelFormat	ends
                              C 
                              C SDL_GetPixelFormatName proto  :Uint32
                              C SDL_PixelFormatEnumToMasks proto  :Uint32, :ptr DWORD, :ptr Uint32, :ptr Uint32, :ptr Uint32, :ptr Uint32
                              C SDL_MasksToPixelFormatEnum proto  :DWORD, :Uint32, :Uint32, :Uint32, :Uint32
                              C SDL_AllocFormat proto  :Uint32
                              C SDL_FreeFormat proto  :ptr SDL_PixelFormat
                              C SDL_AllocPalette proto  :DWORD
                              C SDL_SetPixelFormatPalette proto  :ptr SDL_PixelFormat, :ptr SDL_Palette
                              C SDL_SetPaletteColors proto  :ptr SDL_Palette, :ptr SDL_Color, :DWORD, :DWORD
                              C SDL_FreePalette proto  :ptr SDL_Palette
                              C SDL_MapRGB proto  :ptr SDL_PixelFormat, :Uint8, :Uint8, :Uint8
                              C SDL_MapRGBA proto  :ptr SDL_PixelFormat, :Uint8, :Uint8, :Uint8, :Uint8
                              C SDL_GetRGB proto  :Uint32, :ptr SDL_PixelFormat, :ptr Uint8, :ptr Uint8, :ptr Uint8
                              C SDL_GetRGBA proto  :Uint32, :ptr SDL_PixelFormat, :ptr Uint8, :ptr Uint8, :ptr Uint8, :ptr Uint8
                              C SDL_CalculateGammaRamp proto  :REAL4, :ptr Uint16
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C 	include SDL_rect.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_rect.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_rect.h
                              C 
                              C ifndef SDL_rect_h_
 =                            C SDL_rect_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C 
                              C ifndef SDL_error_h_
                              C SDL_error_h_	EQU	<>
                              C 
                              C SDL_SetError proto  :ptr SBYTE, :VARARG
                              C ;SDL_PRINTF_VARARG_FUNC proto  :1
                              C SDL_GetError proto  
                              C SDL_ClearError proto  
                              C 
                              C mSDL_OutOfMemory macro 
                              C 	exitm <SDL_Error ( SDL_ENOMEM ) >
                              C 	endm
                              C 	
                              C mSDL_Unsupported macro 
                              C 	exitm <SDL_Error ( SDL_UNSUPPORTED ) >
                              C 	endm
                              C 	
                              C mSDL_InvalidParamError macro param
                              C 	exitm <SDL_SetError ( "Parameter '%s' is invalid" , ( param ) ) >
                              C 	endm
                              C 	
                              C SDL_errorcode typedef DWORD
                              C SDL_ENOMEM = 0
                              C SDL_EFREAD = 1
                              C SDL_EFWRITE = 2
                              C SDL_EFSEEK = 3
                              C SDL_UNSUPPORTED = 4
                              C SDL_LASTERROR = 5
                              C 
                              C SDL_Error proto  :SDL_errorcode
                              C endif 
                              C ;	include SDL_pixels.inc
                              C 	include SDL_rwops.inc
                              C 
                              C ifndef SDL_rwops_h_
 =                            C SDL_rwops_h_	EQU	<>
                              C 	;include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C 
                              C ifndef SDL_error_h_
                              C SDL_error_h_	EQU	<>
                              C 
                              C SDL_SetError proto  :ptr SBYTE, :VARARG
                              C ;SDL_PRINTF_VARARG_FUNC proto  :1
                              C SDL_GetError proto  
                              C SDL_ClearError proto  
                              C 
                              C mSDL_OutOfMemory macro 
                              C 	exitm <SDL_Error ( SDL_ENOMEM ) >
                              C 	endm
                              C 	
                              C mSDL_Unsupported macro 
                              C 	exitm <SDL_Error ( SDL_UNSUPPORTED ) >
                              C 	endm
                              C 	
                              C mSDL_InvalidParamError macro param
                              C 	exitm <SDL_SetError ( "Parameter '%s' is invalid" , ( param ) ) >
                              C 	endm
                              C 	
                              C SDL_errorcode typedef DWORD
                              C SDL_ENOMEM = 0
                              C SDL_EFREAD = 1
                              C SDL_EFWRITE = 2
                              C SDL_EFSEEK = 3
                              C SDL_UNSUPPORTED = 4
                              C SDL_LASTERROR = 5
                              C 
                              C SDL_Error proto  :SDL_errorcode
                              C endif 
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
 = 0                          C SDL_RWOPS_UNKNOWN	EQU	0
 = 1                          C SDL_RWOPS_WINFILE	EQU	1
 = 2                          C SDL_RWOPS_STDFILE	EQU	2
 = 3                          C SDL_RWOPS_JNIFILE	EQU	3
 = 4                          C SDL_RWOPS_MEMORY	EQU	4
 = 5                          C SDL_RWOPS_MEMORY_RO	EQU	5
00000000                      C SDL_RWops	struct 
                              C protoSDL_RWops_size typedef proto  :ptr SDL_RWops
                              C pSDL_RWops_size typedef ptr protoSDL_RWops_size
00000000                      C size_	pSDL_RWops_size	?
                              C protoSDL_RWops_seek typedef proto  :ptr SDL_RWops,:Sint64,:DWORD
                              C pSDL_RWops_seek typedef ptr protoSDL_RWops_seek
00000008                      C seek	pSDL_RWops_seek	?
                              C protoSDL_RWops_read typedef proto  :ptr SDL_RWops,:ptr ,:size_t,:size_t
                              C pSDL_RWops_read typedef ptr protoSDL_RWops_read
00000010                      C read	pSDL_RWops_read	?
                              C protoSDL_RWops_write typedef proto  :ptr SDL_RWops,:ptr ,:size_t,:size_t
                              C pSDL_RWops_write typedef ptr protoSDL_RWops_write
00000018                      C write	pSDL_RWops_write	?
                              C protoSDL_RWops_close typedef proto  :ptr SDL_RWops
                              C pSDL_RWops_close typedef ptr protoSDL_RWops_close
00000020                      C close	pSDL_RWops_close	?
00000028                      C type_	Uint32	?
0000002C                      C union hidden
                              C ifndef defined
                              C defined macro x
 >                            C ifdef x
 >                            C   exitm <1>
 >                            C else
 >                            C   exitm <0>
 >                            C endif
 >                            C endm
                              C endif
                             1C ifdef __ANDROID__
                             1C   exitm <1>
                             1C else
                             1C   exitm <0>
                              C if 0
                              C struct androidio
                              C fileNameRef	DWORD	?
                              C inputStreamRef	DWORD	?
                              C readableByteChannelRef	DWORD	?
                              C readMethod	DWORD	?
                              C assetFileDescriptorRef	DWORD	?
                              C position	SDWORD	?
                              C size_	SDWORD	?
                              C offset_	SDWORD	?
                              C fd	DWORD	?
                              C ends
                             1C ifdef __WIN32__
                             1C   exitm <1>
                             1C else
                             1C   exitm <0>
                              C elseif 0
                              C struct windowsio
                              C append	SDL_bool	?
                              C h	DWORD	?
                              C struct buffer
                              C data	DWORD	?
                              C size_	size_t	?
                              C left	size_t	?
                              C ends
                              C ends
                              C endif 
                              C ifdef HAVE_STDIO_H
                              C struct stdio
                              C autoclose	SDL_bool	?
                              C fp	DWORD	?
                              C ends
                              C endif 
00000000                      C struct mem
00000000                      C base	DWORD	?
00000004                      C here	DWORD	?
00000008                      C stop	DWORD	?
0000000C                      C ends
0000000C                      C struct unknown
00000000                      C data1	DWORD	?
00000004                      C data2	DWORD	?
00000008                      C ends
0000000C                      C ends
00000038                      C SDL_RWops	ends
                              C 
                              C SDL_RWFromFile proto  :ptr SBYTE, :ptr SBYTE
                              C ifdef HAVE_STDIO_H
                              C SDL_RWFromFP proto  :ptr FILE, :SDL_bool
                              C else 
                              C SDL_RWFromFP proto  :ptr , :SDL_bool
                              C endif 
                              C SDL_RWFromMem proto  :ptr , :DWORD
                              C SDL_RWFromConstMem proto  :ptr , :DWORD
                              C SDL_AllocRW proto  
                              C SDL_FreeRW proto  :ptr SDL_RWops
 = 0                          C RW_SEEK_SET	EQU	0
 = 1                          C RW_SEEK_CUR	EQU	1
 = 2                          C RW_SEEK_END	EQU	2
                              C SDL_RWsize proto  :ptr SDL_RWops
                              C SDL_RWseek proto  :ptr SDL_RWops, :Sint64, :DWORD
                              C SDL_RWtell proto  :ptr SDL_RWops
                              C SDL_RWread proto  :ptr SDL_RWops, :ptr , :size_t, :size_t
                              C SDL_RWwrite proto  :ptr SDL_RWops, :ptr , :size_t, :size_t
                              C SDL_RWclose proto  :ptr SDL_RWops
                              C SDL_LoadFile_RW proto  :ptr SDL_RWops, :ptr size_t, :DWORD
                              C SDL_LoadFile proto  :ptr SBYTE, :ptr size_t
                              C SDL_ReadU8 proto  :ptr SDL_RWops
                              C SDL_ReadLE16 proto  :ptr SDL_RWops
                              C SDL_ReadBE16 proto  :ptr SDL_RWops
                              C SDL_ReadLE32 proto  :ptr SDL_RWops
                              C SDL_ReadBE32 proto  :ptr SDL_RWops
                              C SDL_ReadLE64 proto  :ptr SDL_RWops
                              C SDL_ReadBE64 proto  :ptr SDL_RWops
                              C SDL_WriteU8 proto  :ptr SDL_RWops, :Uint8
                              C SDL_WriteLE16 proto  :ptr SDL_RWops, :Uint16
                              C SDL_WriteBE16 proto  :ptr SDL_RWops, :Uint16
                              C SDL_WriteLE32 proto  :ptr SDL_RWops, :Uint32
                              C SDL_WriteBE32 proto  :ptr SDL_RWops, :Uint32
                              C SDL_WriteLE64 proto  :ptr SDL_RWops, :Uint64
                              C SDL_WriteBE64 proto  :ptr SDL_RWops, :Uint64
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C 	
00000000                      C SDL_Point	struct 
00000000                      C x	DWORD	?
00000004                      C y	DWORD	?
00000008                      C SDL_Point	ends
                              C 
00000000                      C SDL_FPoint	struct 
00000000                      C x	REAL4	?
00000004                      C y	REAL4	?
00000008                      C SDL_FPoint	ends
                              C 
00000000                      C SDL_Rect	struct 
00000000                      C x	DWORD	?
00000004                      C y	DWORD	?
00000008                      C w	DWORD	?
0000000C                      C h	DWORD	?
00000010                      C SDL_Rect	ends
                              C 
00000000                      C SDL_FRect	struct 
00000000                      C x	REAL4	?
00000004                      C y	REAL4	?
00000008                      C w	REAL4	?
0000000C                      C h	REAL4	?
00000010                      C SDL_FRect	ends
                              C 
                              C ;SDL_PointInRect proto
                              C ;;{
                              C ;return proto  :-> :ptr -> :ptr -> :ptr ->
                              C ;;}
                              C ;SDL_RectEmpty proto  :ptr SDL_Rect
                              C ;;{
                              C ;return proto  :! :<= :<=
                              C ;;}
                              C ;SDL_RectEquals proto  :ptr SDL_Rect, :ptr SDL_Rect
                              C ;;{
                              C ;return proto  :ptr ptr -> :ptr -> :ptr -> :ptr ->
                              C ;;}
                              C externdef SDL_HasIntersection:proto
                              C externdef SDL_IntersectRect:proto
                              C externdef SDL_UnionRect:proto
                              C externdef SDL_EnclosePoints:proto
                              C externdef SDL_IntersectRectAndLine:proto
                              C 
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C 	include SDL_surface.inc
                              C 
                              C ifndef SDL_surface_h_
 =                            C SDL_surface_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C ;	include SDL_pixels.inc
                              C 	include SDL_rect.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_rect.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_rect.h
                              C 
                              C ifndef SDL_rect_h_
                              C SDL_rect_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C ;	include SDL_pixels.inc
                              C 	include SDL_rwops.inc
                              C 	
                              C SDL_Point	struct 
                              C x	DWORD	?
                              C y	DWORD	?
                              C SDL_Point	ends
                              C 
                              C SDL_FPoint	struct 
                              C x	REAL4	?
                              C y	REAL4	?
                              C SDL_FPoint	ends
                              C 
                              C SDL_Rect	struct 
                              C x	DWORD	?
                              C y	DWORD	?
                              C w	DWORD	?
                              C h	DWORD	?
                              C SDL_Rect	ends
                              C 
                              C SDL_FRect	struct 
                              C x	REAL4	?
                              C y	REAL4	?
                              C w	REAL4	?
                              C h	REAL4	?
                              C SDL_FRect	ends
                              C 
                              C ;SDL_PointInRect proto
                              C ;;{
                              C ;return proto  :-> :ptr -> :ptr -> :ptr ->
                              C ;;}
                              C ;SDL_RectEmpty proto  :ptr SDL_Rect
                              C ;;{
                              C ;return proto  :! :<= :<=
                              C ;;}
                              C ;SDL_RectEquals proto  :ptr SDL_Rect, :ptr SDL_Rect
                              C ;;{
                              C ;return proto  :ptr ptr -> :ptr -> :ptr -> :ptr ->
                              C ;;}
                              C externdef SDL_HasIntersection:proto
                              C externdef SDL_IntersectRect:proto
                              C externdef SDL_UnionRect:proto
                              C externdef SDL_EnclosePoints:proto
                              C externdef SDL_IntersectRectAndLine:proto
                              C 
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C 	include SDL_blendmode.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_blendmode.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_blendmode.h
                              C 
                              C ifndef SDL_blendmode_h_
 =                            C SDL_blendmode_h_	EQU	<>
                              C 
                              C SDL_BlendMode typedef DWORD
 = 0                          C SDL_BLENDMODE_NONE = 00000000h 
 = 1                          C SDL_BLENDMODE_BLEND = 00000001h 
 = 2                          C SDL_BLENDMODE_ADD = 00000002h 
 = 4                          C SDL_BLENDMODE_MOD = 00000004h 
 = 8                          C SDL_BLENDMODE_MUL = 00000008h 
 = 7FFFFFFF                   C SDL_BLENDMODE_INVALID = 7FFFFFFFh 
                              C 
                              C SDL_BlendOperation typedef DWORD
 = 1                          C SDL_BLENDOPERATION_ADD = 1h 
 = 2                          C SDL_BLENDOPERATION_SUBTRACT = 2h 
 = 3                          C SDL_BLENDOPERATION_REV_SUBTRACT = 3h 
 = 4                          C SDL_BLENDOPERATION_MINIMUM = 4h 
 = 5                          C SDL_BLENDOPERATION_MAXIMUM = 5h 
                              C 
                              C SDL_BlendFactor typedef DWORD
 = 1                          C SDL_BLENDFACTOR_ZERO = 1h 
 = 2                          C SDL_BLENDFACTOR_ONE = 2h 
 = 3                          C SDL_BLENDFACTOR_SRC_COLOR = 3h 
 = 4                          C SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4h 
 = 5                          C SDL_BLENDFACTOR_SRC_ALPHA = 5h 
 = 6                          C SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6h 
 = 7                          C SDL_BLENDFACTOR_DST_COLOR = 7h 
 = 8                          C SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8h 
 = 9                          C SDL_BLENDFACTOR_DST_ALPHA = 9h 
 = A                          C SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0Ah 
                              C 
                              C externdef SDL_ComposeCustomBlendMode:proto
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C 	include SDL_rwops.inc
                              C 
                              C ifndef SDL_rwops_h_
                              C SDL_rwops_h_	EQU	<>
                              C 	;include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_RWOPS_UNKNOWN	EQU	0
                              C SDL_RWOPS_WINFILE	EQU	1
                              C SDL_RWOPS_STDFILE	EQU	2
                              C SDL_RWOPS_JNIFILE	EQU	3
                              C SDL_RWOPS_MEMORY	EQU	4
                              C SDL_RWOPS_MEMORY_RO	EQU	5
                              C SDL_RWops	struct 
                              C protoSDL_RWops_size typedef proto  :ptr SDL_RWops
                              C pSDL_RWops_size typedef ptr protoSDL_RWops_size
                              C size_	pSDL_RWops_size	?
                              C protoSDL_RWops_seek typedef proto  :ptr SDL_RWops,:Sint64,:DWORD
                              C pSDL_RWops_seek typedef ptr protoSDL_RWops_seek
                              C seek	pSDL_RWops_seek	?
                              C protoSDL_RWops_read typedef proto  :ptr SDL_RWops,:ptr ,:size_t,:size_t
                              C pSDL_RWops_read typedef ptr protoSDL_RWops_read
                              C read	pSDL_RWops_read	?
                              C protoSDL_RWops_write typedef proto  :ptr SDL_RWops,:ptr ,:size_t,:size_t
                              C pSDL_RWops_write typedef ptr protoSDL_RWops_write
                              C write	pSDL_RWops_write	?
                              C protoSDL_RWops_close typedef proto  :ptr SDL_RWops
                              C pSDL_RWops_close typedef ptr protoSDL_RWops_close
                              C close	pSDL_RWops_close	?
                              C type_	Uint32	?
                              C union hidden
                              C ifndef defined
                              C defined macro x
                              C ifdef x
                              C   exitm <1>
                              C else
                              C   exitm <0>
                              C endif
                              C endm
                              C endif
                              C if defined(__ANDROID__)
                              C struct androidio
                              C fileNameRef	DWORD	?
                              C inputStreamRef	DWORD	?
                              C readableByteChannelRef	DWORD	?
                              C readMethod	DWORD	?
                              C assetFileDescriptorRef	DWORD	?
                              C position	SDWORD	?
                              C size_	SDWORD	?
                              C offset_	SDWORD	?
                              C fd	DWORD	?
                              C ends
                              C elseif defined(__WIN32__)
                              C struct windowsio
                              C append	SDL_bool	?
                              C h	DWORD	?
                              C struct buffer
                              C data	DWORD	?
                              C size_	size_t	?
                              C left	size_t	?
                              C ends
                              C ends
                              C endif 
                              C ifdef HAVE_STDIO_H
                              C struct stdio
                              C autoclose	SDL_bool	?
                              C fp	DWORD	?
                              C ends
                              C endif 
                              C struct mem
                              C base	DWORD	?
                              C here	DWORD	?
                              C stop	DWORD	?
                              C ends
                              C struct unknown
                              C data1	DWORD	?
                              C data2	DWORD	?
                              C ends
                              C ends
                              C SDL_RWops	ends
                              C 
                              C SDL_RWFromFile proto  :ptr SBYTE, :ptr SBYTE
                              C ifdef HAVE_STDIO_H
                              C SDL_RWFromFP proto  :ptr FILE, :SDL_bool
                              C else 
                              C SDL_RWFromFP proto  :ptr , :SDL_bool
                              C endif 
                              C SDL_RWFromMem proto  :ptr , :DWORD
                              C SDL_RWFromConstMem proto  :ptr , :DWORD
                              C SDL_AllocRW proto  
                              C SDL_FreeRW proto  :ptr SDL_RWops
                              C RW_SEEK_SET	EQU	0
                              C RW_SEEK_CUR	EQU	1
                              C RW_SEEK_END	EQU	2
                              C SDL_RWsize proto  :ptr SDL_RWops
                              C SDL_RWseek proto  :ptr SDL_RWops, :Sint64, :DWORD
                              C SDL_RWtell proto  :ptr SDL_RWops
                              C SDL_RWread proto  :ptr SDL_RWops, :ptr , :size_t, :size_t
                              C SDL_RWwrite proto  :ptr SDL_RWops, :ptr , :size_t, :size_t
                              C SDL_RWclose proto  :ptr SDL_RWops
                              C SDL_LoadFile_RW proto  :ptr SDL_RWops, :ptr size_t, :DWORD
                              C SDL_LoadFile proto  :ptr SBYTE, :ptr size_t
                              C SDL_ReadU8 proto  :ptr SDL_RWops
                              C SDL_ReadLE16 proto  :ptr SDL_RWops
                              C SDL_ReadBE16 proto  :ptr SDL_RWops
                              C SDL_ReadLE32 proto  :ptr SDL_RWops
                              C SDL_ReadBE32 proto  :ptr SDL_RWops
                              C SDL_ReadLE64 proto  :ptr SDL_RWops
                              C SDL_ReadBE64 proto  :ptr SDL_RWops
                              C SDL_WriteU8 proto  :ptr SDL_RWops, :Uint8
                              C SDL_WriteLE16 proto  :ptr SDL_RWops, :Uint16
                              C SDL_WriteBE16 proto  :ptr SDL_RWops, :Uint16
                              C SDL_WriteLE32 proto  :ptr SDL_RWops, :Uint32
                              C SDL_WriteBE32 proto  :ptr SDL_RWops, :Uint32
                              C SDL_WriteLE64 proto  :ptr SDL_RWops, :Uint64
                              C SDL_WriteBE64 proto  :ptr SDL_RWops, :Uint64
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C ;	include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
 = 0                          C SDL_SWSURFACE	EQU	0
 = 1                          C SDL_PREALLOC	EQU	00000001h
 = 2                          C SDL_RLEACCEL	EQU	00000002h
 = 4                          C SDL_DONTFREE	EQU	00000004h
 = 8                          C SDL_SIMD_ALIGNED	EQU	00000008h
                              C ;SDL_MUSTLOCK macro S
                              C ;	exitm <( ( ( S ) -> flags  and  SDL_RLEACCEL ) != 0 ) >
                              C ;	endm
                              C 	
00000000                      C SDL_Surface	struct
00000000                      C 	flags		Uint32	?
00000008                      C 	format		QWORD	?
00000010                      C 	w			DWORD	?
00000014                      C 	h			DWORD	?
00000018                      C 	pitch		DWORD	?
00000020                      C 	pixels		QWORD	?
00000028                      C 	userdata	QWORD	?
00000030                      C 	locked		DWORD	?
00000038                      C 	lock_data	QWORD	?
00000040                      C 	clip_rect	SDL_Rect	<>
00000050                      C 	map 		QWORD 	?
00000058                      C 	refcount	DWORD	?
00000060                      C SDL_Surface	ends
                              C 
                              C proto_SDL_blit typedef proto  :ptr SDL_Surface,:ptr SDL_Rect,:ptr SDL_Surface,:ptr SDL_Rect
                              C SDL_blit typedef ptr proto_SDL_blit
                              C SDL_YUV_CONVERSION_MODE typedef DWORD
 = 0                          C SDL_YUV_CONVERSION_JPEG = 0
 = 1                          C SDL_YUV_CONVERSION_BT601 = 1
 = 2                          C SDL_YUV_CONVERSION_BT709 = 2
 = 3                          C SDL_YUV_CONVERSION_AUTOMATIC = 3
                              C 
                              C SDL_CreateRGBSurface proto  :Uint32, :DWORD, :DWORD, :DWORD, :Uint32, :Uint32, :Uint32, :Uint32
                              C SDL_CreateRGBSurfaceWithFormat proto  :Uint32, :DWORD, :DWORD, :DWORD, :Uint32
                              C SDL_CreateRGBSurfaceFrom proto  :ptr , :DWORD, :DWORD, :DWORD, :DWORD, :Uint32, :Uint32, :Uint32, :Uint32
                              C SDL_CreateRGBSurfaceWithFormatFrom proto  :ptr , :DWORD, :DWORD, :DWORD, :DWORD, :Uint32
                              C SDL_FreeSurface proto  :ptr SDL_Surface
                              C SDL_SetSurfacePalette proto  :ptr SDL_Surface, :ptr SDL_Palette
                              C SDL_LockSurface proto  :ptr SDL_Surface
                              C SDL_UnlockSurface proto  :ptr SDL_Surface
                              C SDL_LoadBMP_RW proto  :ptr SDL_RWops, :DWORD
                              C SDL_LoadBMP macro file
 >                            C 	exitm <SDL_LoadBMP_RW ( SDL_RWFromFile ( file , "rb" ) , 1 ) >
 >                            C 	endm
                              C SDL_SaveBMP_RW proto  :ptr SDL_Surface, :ptr SDL_RWops, :DWORD
                              C SDL_SaveBMP macro surface,file
 >                            C 	exitm <SDL_SaveBMP_RW ( surface , SDL_RWFromFile ( file , "wb" ) , 1 ) >
 >                            C 	endm
                              C SDL_SetSurfaceRLE proto  :ptr SDL_Surface, :DWORD
                              C SDL_SetColorKey proto  :ptr SDL_Surface, :DWORD, :Uint32
                              C SDL_HasColorKey proto  :ptr SDL_Surface
                              C SDL_GetColorKey proto  :ptr SDL_Surface, :ptr Uint32
                              C SDL_SetSurfaceColorMod proto  :ptr SDL_Surface, :Uint8, :Uint8, :Uint8
                              C SDL_GetSurfaceColorMod proto  :ptr SDL_Surface, :ptr Uint8, :ptr Uint8, :ptr Uint8
                              C SDL_SetSurfaceAlphaMod proto  :ptr SDL_Surface, :Uint8
                              C SDL_GetSurfaceAlphaMod proto  :ptr SDL_Surface, :ptr Uint8
                              C SDL_SetSurfaceBlendMode proto  :ptr SDL_Surface, :SDL_BlendMode
                              C SDL_GetSurfaceBlendMode proto  :ptr SDL_Surface, :ptr SDL_BlendMode
                              C SDL_SetClipRect proto  :ptr SDL_Surface, :ptr SDL_Rect
                              C SDL_GetClipRect proto  :ptr SDL_Surface, :ptr SDL_Rect
                              C SDL_DuplicateSurface proto  :ptr SDL_Surface
                              C SDL_ConvertSurface proto  :ptr SDL_Surface, :ptr SDL_PixelFormat, :Uint32
                              C SDL_ConvertSurfaceFormat proto  :ptr SDL_Surface, :Uint32, :Uint32
                              C SDL_ConvertPixels proto  :DWORD, :DWORD, :Uint32, :ptr , :DWORD, :Uint32, :ptr , :DWORD
                              C SDL_FillRect proto  :ptr SDL_Surface, :ptr SDL_Rect, :Uint32
                              C SDL_FillRects proto  :ptr SDL_Surface, :ptr SDL_Rect, :DWORD, :Uint32
 = SDL_UpperBlit              C SDL_BlitSurface	EQU	<SDL_UpperBlit>
                              C SDL_UpperBlit proto  :ptr SDL_Surface, :ptr SDL_Rect, :ptr SDL_Surface, :ptr SDL_Rect
                              C SDL_LowerBlit proto  :ptr SDL_Surface, :ptr SDL_Rect, :ptr SDL_Surface, :ptr SDL_Rect
                              C SDL_SoftStretch proto  :ptr SDL_Surface, :ptr SDL_Rect, :ptr SDL_Surface, :ptr SDL_Rect
 = SDL_UpperBlitScaled        C SDL_BlitScaled	EQU	<SDL_UpperBlitScaled>
                              C SDL_UpperBlitScaled proto  :ptr SDL_Surface, :ptr SDL_Rect, :ptr SDL_Surface, :ptr SDL_Rect
                              C SDL_LowerBlitScaled proto  :ptr SDL_Surface, :ptr SDL_Rect, :ptr SDL_Surface, :ptr SDL_Rect
                              C SDL_SetYUVConversionMode proto  :SDL_YUV_CONVERSION_MODE
                              C SDL_GetYUVConversionMode proto  
                              C SDL_GetYUVConversionModeForResolution proto  :DWORD, :DWORD
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C 	;include close_code.inc
                              C endif 
                              C ;	include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
00000000                      C SDL_DisplayMode	struct 
00000000                      C format	Uint32	?
00000004                      C w	DWORD	?
00000008                      C h	DWORD	?
0000000C                      C refresh_rate	DWORD	?
00000010                      C driverdata	DWORD	?
00000014                      C SDL_DisplayMode	ends
                              C 
                              C ;SDL_Window typedef SDL_Window
                              C 
                              C SDL_WindowFlags typedef DWORD
 = 1                          C SDL_WINDOW_FULLSCREEN = 00000001h 
 = 2                          C SDL_WINDOW_OPENGL = 00000002h 
 = 4                          C SDL_WINDOW_SHOWN = 00000004h 
 = 8                          C SDL_WINDOW_HIDDEN = 00000008h 
 = 10                         C SDL_WINDOW_BORDERLESS = 00000010h 
 = 20                         C SDL_WINDOW_RESIZABLE = 00000020h 
 = 40                         C SDL_WINDOW_MINIMIZED = 00000040h 
 = 80                         C SDL_WINDOW_MAXIMIZED = 00000080h 
 = 100                        C SDL_WINDOW_INPUT_GRABBED = 00000100h 
 = 200                        C SDL_WINDOW_INPUT_FOCUS = 00000200h 
 = 400                        C SDL_WINDOW_MOUSE_FOCUS = 00000400h 
 = 1001                       C SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN  or  00001000h ) 
 = 800                        C SDL_WINDOW_FOREIGN = 00000800h 
 = 2000                       C SDL_WINDOW_ALLOW_HIGHDPI = 00002000h 
 = 4000                       C SDL_WINDOW_MOUSE_CAPTURE = 00004000h 
 = 8000                       C SDL_WINDOW_ALWAYS_ON_TOP = 00008000h 
 = 10000                      C SDL_WINDOW_SKIP_TASKBAR = 00010000h 
 = 20000                      C SDL_WINDOW_UTILITY = 00020000h 
 = 40000                      C SDL_WINDOW_TOOLTIP = 00040000h 
 = 80000                      C SDL_WINDOW_POPUP_MENU = 00080000h 
 = 10000000                   C SDL_WINDOW_VULKAN = 10000000h 
                              C 
 = 1FFF0000                   C SDL_WINDOWPOS_UNDEFINED_MASK	EQU	1FFF0000h
                              C SDL_WINDOWPOS_UNDEFINED_DISPLAY macro X
 >                            C 	exitm <( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( X ) ) >
 >                            C 	endm
 = SDL_WINDOWPOS_UNDEFINED_D  C SDL_WINDOWPOS_UNDEFINED	EQU	SDL_WINDOWPOS_UNDEFINED_DISPLAY ( 0 )
   ISPLAY ( 0 )                 
                              C SDL_WINDOWPOS_ISUNDEFINED macro X
 >                            C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_UNDEFINED_MASK ) >
 >                            C 	endm
 = 2FFF0000                   C SDL_WINDOWPOS_CENTERED_MASK	EQU	2FFF0000h
                              C SDL_WINDOWPOS_CENTERED_DISPLAY macro X
 >                            C 	exitm <( SDL_WINDOWPOS_CENTERED_MASK  or  ( X ) ) >
 >                            C 	endm
 = SDL_WINDOWPOS_CENTERED_DI  C SDL_WINDOWPOS_CENTERED	EQU	SDL_WINDOWPOS_CENTERED_DISPLAY ( 0 )
   SPLAY ( 0 )                  
                              C SDL_WINDOWPOS_ISCENTERED macro X
 >                            C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_CENTERED_MASK ) >
 >                            C 	endm
                              C SDL_WindowEventID typedef DWORD
 = 0                          C SDL_WINDOWEVENT_NONE = 0
 = 1                          C SDL_WINDOWEVENT_SHOWN = 1
 = 2                          C SDL_WINDOWEVENT_HIDDEN = 2
 = 3                          C SDL_WINDOWEVENT_EXPOSED = 3
 = 4                          C SDL_WINDOWEVENT_MOVED = 4
 = 5                          C SDL_WINDOWEVENT_RESIZED = 5
 = 6                          C SDL_WINDOWEVENT_SIZE_CHANGED = 6
 = 7                          C SDL_WINDOWEVENT_MINIMIZED = 7
 = 8                          C SDL_WINDOWEVENT_MAXIMIZED = 8
 = 9                          C SDL_WINDOWEVENT_RESTORED = 9
 = A                          C SDL_WINDOWEVENT_ENTER = 10
 = B                          C SDL_WINDOWEVENT_LEAVE = 11
 = C                          C SDL_WINDOWEVENT_FOCUS_GAINED = 12
 = D                          C SDL_WINDOWEVENT_FOCUS_LOST = 13
 = E                          C SDL_WINDOWEVENT_CLOSE = 14
 = F                          C SDL_WINDOWEVENT_TAKE_FOCUS = 15
 = 10                         C SDL_WINDOWEVENT_HIT_TEST = 16
                              C 
                              C SDL_DisplayEventID typedef DWORD
 = 0                          C SDL_DISPLAYEVENT_NONE = 0
 = 1                          C SDL_DISPLAYEVENT_ORIENTATION = 1
                              C 
                              C SDL_DisplayOrientation typedef DWORD
 = 0                          C SDL_ORIENTATION_UNKNOWN = 0
 = 1                          C SDL_ORIENTATION_LANDSCAPE = 1
 = 2                          C SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2
 = 3                          C SDL_ORIENTATION_PORTRAIT = 3
 = 4                          C SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
                              C 
                              C SDL_GLContext typedef ptr 
                              C SDL_GLattr typedef DWORD
 = 0                          C SDL_GL_RED_SIZE = 0
 = 1                          C SDL_GL_GREEN_SIZE = 1
 = 2                          C SDL_GL_BLUE_SIZE = 2
 = 3                          C SDL_GL_ALPHA_SIZE = 3
 = 4                          C SDL_GL_BUFFER_SIZE = 4
 = 5                          C SDL_GL_DOUBLEBUFFER = 5
 = 6                          C SDL_GL_DEPTH_SIZE = 6
 = 7                          C SDL_GL_STENCIL_SIZE = 7
 = 8                          C SDL_GL_ACCUM_RED_SIZE = 8
 = 9                          C SDL_GL_ACCUM_GREEN_SIZE = 9
 = A                          C SDL_GL_ACCUM_BLUE_SIZE = 10
 = B                          C SDL_GL_ACCUM_ALPHA_SIZE = 11
 = C                          C SDL_GL_STEREO = 12
 = D                          C SDL_GL_MULTISAMPLEBUFFERS = 13
 = E                          C SDL_GL_MULTISAMPLESAMPLES = 14
 = F                          C SDL_GL_ACCELERATED_VISUAL = 15
 = 10                         C SDL_GL_RETAINED_BACKING = 16
 = 11                         C SDL_GL_CONTEXT_MAJOR_VERSION = 17
 = 12                         C SDL_GL_CONTEXT_MINOR_VERSION = 18
 = 13                         C SDL_GL_CONTEXT_EGL = 19
 = 14                         C SDL_GL_CONTEXT_FLAGS = 20
 = 15                         C SDL_GL_CONTEXT_PROFILE_MASK = 21
 = 16                         C SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22
 = 17                         C SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23
 = 18                         C SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24
 = 19                         C SDL_GL_CONTEXT_RESET_NOTIFICATION = 25
 = 1A                         C SDL_GL_CONTEXT_NO_ERROR = 26
                              C 
                              C SDL_GLprofile typedef DWORD
 = 1                          C SDL_GL_CONTEXT_PROFILE_CORE = 0001h 
 = 2                          C SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0002h 
 = 4                          C SDL_GL_CONTEXT_PROFILE_ES = 0004h 
                              C 
                              C SDL_GLcontextFlag typedef DWORD
 = 1                          C SDL_GL_CONTEXT_DEBUG_FLAG = 0001h 
 = 2                          C SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0002h 
 = 4                          C SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0004h 
 = 8                          C SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0008h 
                              C 
                              C SDL_GLcontextReleaseFlag typedef DWORD
 = 0                          C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0000h 
 = 1                          C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0001h 
                              C 
                              C SDL_GLContextResetNotification typedef DWORD
 = 0                          C SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0000h 
 = 1                          C SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0001h 
                              C 
                              C SDL_GetNumVideoDrivers proto  
                              C SDL_GetVideoDriver proto  :DWORD
                              C SDL_VideoInit proto  :ptr SBYTE
                              C SDL_VideoQuit proto  
                              C SDL_GetCurrentVideoDriver proto  
                              C SDL_GetNumVideoDisplays proto  
                              C SDL_GetDisplayName proto  :DWORD
                              C SDL_GetDisplayBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayUsableBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayDPI proto  :DWORD, :ptr REAL4, :ptr REAL4, :ptr REAL4
                              C SDL_GetDisplayOrientation proto  :DWORD
                              C SDL_GetNumDisplayModes proto  :DWORD
                              C SDL_GetDisplayMode proto  :DWORD, :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetDesktopDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetCurrentDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetClosestDisplayMode proto  :DWORD, :ptr SDL_DisplayMode, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayIndex proto  :ptr SDL_Window
                              C SDL_SetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowPixelFormat proto  :ptr SDL_Window
                              C SDL_CreateWindow proto  :ptr SBYTE, :DWORD, :DWORD, :DWORD, :DWORD, :Uint32
                              C SDL_CreateWindowFrom proto  :ptr 
                              C SDL_GetWindowID proto  :ptr SDL_Window
                              C SDL_GetWindowFromID proto  :Uint32
                              C SDL_GetWindowFlags proto  :ptr SDL_Window
                              C SDL_SetWindowTitle proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_GetWindowTitle proto  :ptr SDL_Window
                              C SDL_SetWindowIcon proto  :ptr SDL_Window, :ptr SDL_Surface
                              C SDL_SetWindowData proto  :ptr SDL_Window, :ptr SBYTE, :ptr 
                              C SDL_GetWindowData proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_SetWindowPosition proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowPosition proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GetWindowBordersSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMinimumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMinimumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMaximumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMaximumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowBordered proto  :ptr SDL_Window, :SDL_bool
                              C SDL_SetWindowResizable proto  :ptr SDL_Window, :SDL_bool
                              C SDL_ShowWindow proto  :ptr SDL_Window
                              C SDL_HideWindow proto  :ptr SDL_Window
                              C SDL_RaiseWindow proto  :ptr SDL_Window
                              C SDL_MaximizeWindow proto  :ptr SDL_Window
                              C SDL_MinimizeWindow proto  :ptr SDL_Window
                              C SDL_RestoreWindow proto  :ptr SDL_Window
                              C SDL_SetWindowFullscreen proto  :ptr SDL_Window, :Uint32
                              C SDL_GetWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurfaceRects proto  :ptr SDL_Window, :ptr SDL_Rect, :DWORD
                              C SDL_SetWindowGrab proto  :ptr SDL_Window, :SDL_bool
                              C SDL_GetWindowGrab proto  :ptr SDL_Window
                              C SDL_GetGrabbedWindow proto  
                              C SDL_SetWindowBrightness proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowBrightness proto  :ptr SDL_Window
                              C SDL_SetWindowOpacity proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowOpacity proto  :ptr SDL_Window, :ptr REAL4
                              C SDL_SetWindowModalFor proto  :ptr SDL_Window, :ptr SDL_Window
                              C SDL_SetWindowInputFocus proto  :ptr SDL_Window
                              C SDL_SetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_GetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_HitTestResult typedef DWORD
 = 0                          C SDL_HITTEST_NORMAL = 0
 = 1                          C SDL_HITTEST_DRAGGABLE = 1
 = 2                          C SDL_HITTEST_RESIZE_TOPLEFT = 2
 = 3                          C SDL_HITTEST_RESIZE_TOP = 3
 = 4                          C SDL_HITTEST_RESIZE_TOPRIGHT = 4
 = 5                          C SDL_HITTEST_RESIZE_RIGHT = 5
 = 6                          C SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6
 = 7                          C SDL_HITTEST_RESIZE_BOTTOM = 7
 = 8                          C SDL_HITTEST_RESIZE_BOTTOMLEFT = 8
 = 9                          C SDL_HITTEST_RESIZE_LEFT = 9
                              C 
                              C proto_SDL_HitTest typedef proto  :ptr SDL_Window,:ptr SDL_Point,:ptr 
                              C SDL_HitTest typedef ptr proto_SDL_HitTest
                              C SDL_SetWindowHitTest proto  :ptr SDL_Window, :SDL_HitTest, :ptr 
                              C SDL_DestroyWindow proto  :ptr SDL_Window
                              C SDL_IsScreenSaverEnabled proto  
                              C SDL_EnableScreenSaver proto  
                              C SDL_DisableScreenSaver proto  
                              C SDL_GL_LoadLibrary proto  :ptr SBYTE
                              C SDL_GL_GetProcAddress proto  :ptr SBYTE
                              C SDL_GL_UnloadLibrary proto  
                              C SDL_GL_ExtensionSupported proto  :ptr SBYTE
                              C SDL_GL_ResetAttributes proto  
                              C SDL_GL_SetAttribute proto  :SDL_GLattr, :DWORD
                              C SDL_GL_GetAttribute proto  :SDL_GLattr, :ptr DWORD
                              C SDL_GL_CreateContext proto  :ptr SDL_Window
                              C SDL_GL_MakeCurrent proto  :ptr SDL_Window, :SDL_GLContext
                              C SDL_GL_GetCurrentWindow proto  
                              C SDL_GL_GetCurrentContext proto  
                              C SDL_GL_GetDrawableSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GL_SetSwapInterval proto  :DWORD
                              C SDL_GL_GetSwapInterval proto  
                              C SDL_GL_SwapWindow proto  :ptr SDL_Window
                              C SDL_GL_DeleteContext proto  :SDL_GLContext
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C 	include SDL_keyboard.inc
                              C ; SDL_keyboard.h
                              C 
                              C ifndef SDL_keyboard_h_
 =                            C SDL_keyboard_h_	EQU	<>
                              C ; include SDL_stdinc.inc
                              C include SDL_error.inc
                              C 
                              C ifndef SDL_error_h_
                              C SDL_error_h_	EQU	<>
                              C 
                              C SDL_SetError proto  :ptr SBYTE, :VARARG
                              C ;SDL_PRINTF_VARARG_FUNC proto  :1
                              C SDL_GetError proto  
                              C SDL_ClearError proto  
                              C 
                              C mSDL_OutOfMemory macro 
                              C 	exitm <SDL_Error ( SDL_ENOMEM ) >
                              C 	endm
                              C 	
                              C mSDL_Unsupported macro 
                              C 	exitm <SDL_Error ( SDL_UNSUPPORTED ) >
                              C 	endm
                              C 	
                              C mSDL_InvalidParamError macro param
                              C 	exitm <SDL_SetError ( "Parameter '%s' is invalid" , ( param ) ) >
                              C 	endm
                              C 	
                              C SDL_errorcode typedef DWORD
                              C SDL_ENOMEM = 0
                              C SDL_EFREAD = 1
                              C SDL_EFWRITE = 2
                              C SDL_EFSEEK = 3
                              C SDL_UNSUPPORTED = 4
                              C SDL_LASTERROR = 5
                              C 
                              C SDL_Error proto  :SDL_errorcode
                              C endif 
                              C include SDL_keycode.inc
                              C 
                              C ifndef SDL_keycode_h_
 =                            C SDL_keycode_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_scancode.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_scancode.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_scancode.h
                              C 
                              C ifndef SDL_scancode_h_
 =                            C SDL_scancode_h_	EQU	<>
                              C 
                              C SDL_Scancode typedef DWORD
 = 0                          C SDL_SCANCODE_UNKNOWN = 0 
 = 4                          C SDL_SCANCODE_A = 4 
 = 5                          C SDL_SCANCODE_B = 5 
 = 6                          C SDL_SCANCODE_C = 6 
 = 7                          C SDL_SCANCODE_D = 7 
 = 8                          C SDL_SCANCODE_E = 8 
 = 9                          C SDL_SCANCODE_F = 9 
 = A                          C SDL_SCANCODE_G = 10 
 = B                          C SDL_SCANCODE_H = 11 
 = C                          C SDL_SCANCODE_I = 12 
 = D                          C SDL_SCANCODE_J = 13 
 = E                          C SDL_SCANCODE_K = 14 
 = F                          C SDL_SCANCODE_L = 15 
 = 10                         C SDL_SCANCODE_M = 16 
 = 11                         C SDL_SCANCODE_N = 17 
 = 12                         C SDL_SCANCODE_O = 18 
 = 13                         C SDL_SCANCODE_P = 19 
 = 14                         C SDL_SCANCODE_Q = 20 
 = 15                         C SDL_SCANCODE_R = 21 
 = 16                         C SDL_SCANCODE_S = 22 
 = 17                         C SDL_SCANCODE_T = 23 
 = 18                         C SDL_SCANCODE_U = 24 
 = 19                         C SDL_SCANCODE_V = 25 
 = 1A                         C SDL_SCANCODE_W = 26 
 = 1B                         C SDL_SCANCODE_X = 27 
 = 1C                         C SDL_SCANCODE_Y = 28 
 = 1D                         C SDL_SCANCODE_Z = 29 
 = 1E                         C SDL_SCANCODE_1 = 30 
 = 1F                         C SDL_SCANCODE_2 = 31 
 = 20                         C SDL_SCANCODE_3 = 32 
 = 21                         C SDL_SCANCODE_4 = 33 
 = 22                         C SDL_SCANCODE_5 = 34 
 = 23                         C SDL_SCANCODE_6 = 35 
 = 24                         C SDL_SCANCODE_7 = 36 
 = 25                         C SDL_SCANCODE_8 = 37 
 = 26                         C SDL_SCANCODE_9 = 38 
 = 27                         C SDL_SCANCODE_0 = 39 
 = 28                         C SDL_SCANCODE_RETURN = 40 
 = 29                         C SDL_SCANCODE_ESCAPE = 41 
 = 2A                         C SDL_SCANCODE_BACKSPACE = 42 
 = 2B                         C SDL_SCANCODE_TAB = 43 
 = 2C                         C SDL_SCANCODE_SPACE = 44 
 = 2D                         C SDL_SCANCODE_MINUS = 45 
 = 2E                         C SDL_SCANCODE_EQUALS = 46 
 = 2F                         C SDL_SCANCODE_LEFTBRACKET = 47 
 = 30                         C SDL_SCANCODE_RIGHTBRACKET = 48 
 = 31                         C SDL_SCANCODE_BACKSLASH = 49 
 = 32                         C SDL_SCANCODE_NONUSHASH = 50 
 = 33                         C SDL_SCANCODE_SEMICOLON = 51 
 = 34                         C SDL_SCANCODE_APOSTROPHE = 52 
 = 35                         C SDL_SCANCODE_GRAVE = 53 
 = 36                         C SDL_SCANCODE_COMMA = 54 
 = 37                         C SDL_SCANCODE_PERIOD = 55 
 = 38                         C SDL_SCANCODE_SLASH = 56 
 = 39                         C SDL_SCANCODE_CAPSLOCK = 57 
 = 3A                         C SDL_SCANCODE_F1 = 58 
 = 3B                         C SDL_SCANCODE_F2 = 59 
 = 3C                         C SDL_SCANCODE_F3 = 60 
 = 3D                         C SDL_SCANCODE_F4 = 61 
 = 3E                         C SDL_SCANCODE_F5 = 62 
 = 3F                         C SDL_SCANCODE_F6 = 63 
 = 40                         C SDL_SCANCODE_F7 = 64 
 = 41                         C SDL_SCANCODE_F8 = 65 
 = 42                         C SDL_SCANCODE_F9 = 66 
 = 43                         C SDL_SCANCODE_F10 = 67 
 = 44                         C SDL_SCANCODE_F11 = 68 
 = 45                         C SDL_SCANCODE_F12 = 69 
 = 46                         C SDL_SCANCODE_PRINTSCREEN = 70 
 = 47                         C SDL_SCANCODE_SCROLLLOCK = 71 
 = 48                         C SDL_SCANCODE_PAUSE = 72 
 = 49                         C SDL_SCANCODE_INSERT = 73 
 = 4A                         C SDL_SCANCODE_HOME = 74 
 = 4B                         C SDL_SCANCODE_PAGEUP = 75 
 = 4C                         C SDL_SCANCODE_DELETE = 76 
 = 4D                         C SDL_SCANCODE_END = 77 
 = 4E                         C SDL_SCANCODE_PAGEDOWN = 78 
 = 4F                         C SDL_SCANCODE_RIGHT = 79 
 = 50                         C SDL_SCANCODE_LEFT = 80 
 = 51                         C SDL_SCANCODE_DOWN = 81 
 = 52                         C SDL_SCANCODE_UP = 82 
 = 53                         C SDL_SCANCODE_NUMLOCKCLEAR = 83 
 = 54                         C SDL_SCANCODE_KP_DIVIDE = 84 
 = 55                         C SDL_SCANCODE_KP_MULTIPLY = 85 
 = 56                         C SDL_SCANCODE_KP_MINUS = 86 
 = 57                         C SDL_SCANCODE_KP_PLUS = 87 
 = 58                         C SDL_SCANCODE_KP_ENTER = 88 
 = 59                         C SDL_SCANCODE_KP_1 = 89 
 = 5A                         C SDL_SCANCODE_KP_2 = 90 
 = 5B                         C SDL_SCANCODE_KP_3 = 91 
 = 5C                         C SDL_SCANCODE_KP_4 = 92 
 = 5D                         C SDL_SCANCODE_KP_5 = 93 
 = 5E                         C SDL_SCANCODE_KP_6 = 94 
 = 5F                         C SDL_SCANCODE_KP_7 = 95 
 = 60                         C SDL_SCANCODE_KP_8 = 96 
 = 61                         C SDL_SCANCODE_KP_9 = 97 
 = 62                         C SDL_SCANCODE_KP_0 = 98 
 = 63                         C SDL_SCANCODE_KP_PERIOD = 99 
 = 64                         C SDL_SCANCODE_NONUSBACKSLASH = 100 
 = 65                         C SDL_SCANCODE_APPLICATION = 101 
 = 66                         C SDL_SCANCODE_POWER = 102 
 = 67                         C SDL_SCANCODE_KP_EQUALS = 103 
 = 68                         C SDL_SCANCODE_F13 = 104 
 = 69                         C SDL_SCANCODE_F14 = 105 
 = 6A                         C SDL_SCANCODE_F15 = 106 
 = 6B                         C SDL_SCANCODE_F16 = 107 
 = 6C                         C SDL_SCANCODE_F17 = 108 
 = 6D                         C SDL_SCANCODE_F18 = 109 
 = 6E                         C SDL_SCANCODE_F19 = 110 
 = 6F                         C SDL_SCANCODE_F20 = 111 
 = 70                         C SDL_SCANCODE_F21 = 112 
 = 71                         C SDL_SCANCODE_F22 = 113 
 = 72                         C SDL_SCANCODE_F23 = 114 
 = 73                         C SDL_SCANCODE_F24 = 115 
 = 74                         C SDL_SCANCODE_EXECUTE = 116 
 = 75                         C SDL_SCANCODE_HELP = 117 
 = 76                         C SDL_SCANCODE_MENU = 118 
 = 77                         C SDL_SCANCODE_SELECT = 119 
 = 78                         C SDL_SCANCODE_STOP = 120 
 = 79                         C SDL_SCANCODE_AGAIN = 121 
 = 7A                         C SDL_SCANCODE_UNDO = 122 
 = 7B                         C SDL_SCANCODE_CUT = 123 
 = 7C                         C SDL_SCANCODE_COPY = 124 
 = 7D                         C SDL_SCANCODE_PASTE = 125 
 = 7E                         C SDL_SCANCODE_FIND = 126 
 = 7F                         C SDL_SCANCODE_MUTE = 127 
 = 80                         C SDL_SCANCODE_VOLUMEUP = 128 
 = 81                         C SDL_SCANCODE_VOLUMEDOWN = 129 
 = 85                         C SDL_SCANCODE_KP_COMMA = 133 
 = 86                         C SDL_SCANCODE_KP_EQUALSAS400 = 134 
 = 87                         C SDL_SCANCODE_INTERNATIONAL1 = 135 
 = 88                         C SDL_SCANCODE_INTERNATIONAL2 = 136 
 = 89                         C SDL_SCANCODE_INTERNATIONAL3 = 137 
 = 8A                         C SDL_SCANCODE_INTERNATIONAL4 = 138 
 = 8B                         C SDL_SCANCODE_INTERNATIONAL5 = 139 
 = 8C                         C SDL_SCANCODE_INTERNATIONAL6 = 140 
 = 8D                         C SDL_SCANCODE_INTERNATIONAL7 = 141 
 = 8E                         C SDL_SCANCODE_INTERNATIONAL8 = 142 
 = 8F                         C SDL_SCANCODE_INTERNATIONAL9 = 143 
 = 90                         C SDL_SCANCODE_LANG1 = 144 
 = 91                         C SDL_SCANCODE_LANG2 = 145 
 = 92                         C SDL_SCANCODE_LANG3 = 146 
 = 93                         C SDL_SCANCODE_LANG4 = 147 
 = 94                         C SDL_SCANCODE_LANG5 = 148 
 = 95                         C SDL_SCANCODE_LANG6 = 149 
 = 96                         C SDL_SCANCODE_LANG7 = 150 
 = 97                         C SDL_SCANCODE_LANG8 = 151 
 = 98                         C SDL_SCANCODE_LANG9 = 152 
 = 99                         C SDL_SCANCODE_ALTERASE = 153 
 = 9A                         C SDL_SCANCODE_SYSREQ = 154 
 = 9B                         C SDL_SCANCODE_CANCEL = 155 
 = 9C                         C SDL_SCANCODE_CLEAR = 156 
 = 9D                         C SDL_SCANCODE_PRIOR = 157 
 = 9E                         C SDL_SCANCODE_RETURN2 = 158 
 = 9F                         C SDL_SCANCODE_SEPARATOR = 159 
 = A0                         C SDL_SCANCODE_OUT = 160 
 = A1                         C SDL_SCANCODE_OPER = 161 
 = A2                         C SDL_SCANCODE_CLEARAGAIN = 162 
 = A3                         C SDL_SCANCODE_CRSEL = 163 
 = A4                         C SDL_SCANCODE_EXSEL = 164 
 = B0                         C SDL_SCANCODE_KP_00 = 176 
 = B1                         C SDL_SCANCODE_KP_000 = 177 
 = B2                         C SDL_SCANCODE_THOUSANDSSEPARATOR = 178 
 = B3                         C SDL_SCANCODE_DECIMALSEPARATOR = 179 
 = B4                         C SDL_SCANCODE_CURRENCYUNIT = 180 
 = B5                         C SDL_SCANCODE_CURRENCYSUBUNIT = 181 
 = B6                         C SDL_SCANCODE_KP_LEFTPAREN = 182 
 = B7                         C SDL_SCANCODE_KP_RIGHTPAREN = 183 
 = B8                         C SDL_SCANCODE_KP_LEFTBRACE = 184 
 = B9                         C SDL_SCANCODE_KP_RIGHTBRACE = 185 
 = BA                         C SDL_SCANCODE_KP_TAB = 186 
 = BB                         C SDL_SCANCODE_KP_BACKSPACE = 187 
 = BC                         C SDL_SCANCODE_KP_A = 188 
 = BD                         C SDL_SCANCODE_KP_B = 189 
 = BE                         C SDL_SCANCODE_KP_C = 190 
 = BF                         C SDL_SCANCODE_KP_D = 191 
 = C0                         C SDL_SCANCODE_KP_E = 192 
 = C1                         C SDL_SCANCODE_KP_F = 193 
 = C2                         C SDL_SCANCODE_KP_XOR = 194 
 = C3                         C SDL_SCANCODE_KP_POWER = 195 
 = C4                         C SDL_SCANCODE_KP_PERCENT = 196 
 = C5                         C SDL_SCANCODE_KP_LESS = 197 
 = C6                         C SDL_SCANCODE_KP_GREATER = 198 
 = C7                         C SDL_SCANCODE_KP_AMPERSAND = 199 
 = C8                         C SDL_SCANCODE_KP_DBLAMPERSAND = 200 
 = C9                         C SDL_SCANCODE_KP_VERTICALBAR = 201 
 = CA                         C SDL_SCANCODE_KP_DBLVERTICALBAR = 202 
 = CB                         C SDL_SCANCODE_KP_COLON = 203 
 = CC                         C SDL_SCANCODE_KP_HASH = 204 
 = CD                         C SDL_SCANCODE_KP_SPACE = 205 
 = CE                         C SDL_SCANCODE_KP_AT = 206 
 = CF                         C SDL_SCANCODE_KP_EXCLAM = 207 
 = D0                         C SDL_SCANCODE_KP_MEMSTORE = 208 
 = D1                         C SDL_SCANCODE_KP_MEMRECALL = 209 
 = D2                         C SDL_SCANCODE_KP_MEMCLEAR = 210 
 = D3                         C SDL_SCANCODE_KP_MEMADD = 211 
 = D4                         C SDL_SCANCODE_KP_MEMSUBTRACT = 212 
 = D5                         C SDL_SCANCODE_KP_MEMMULTIPLY = 213 
 = D6                         C SDL_SCANCODE_KP_MEMDIVIDE = 214 
 = D7                         C SDL_SCANCODE_KP_PLUSMINUS = 215 
 = D8                         C SDL_SCANCODE_KP_CLEAR = 216 
 = D9                         C SDL_SCANCODE_KP_CLEARENTRY = 217 
 = DA                         C SDL_SCANCODE_KP_BINARY = 218 
 = DB                         C SDL_SCANCODE_KP_OCTAL = 219 
 = DC                         C SDL_SCANCODE_KP_DECIMAL = 220 
 = DD                         C SDL_SCANCODE_KP_HEXADECIMAL = 221 
 = E0                         C SDL_SCANCODE_LCTRL = 224 
 = E1                         C SDL_SCANCODE_LSHIFT = 225 
 = E2                         C SDL_SCANCODE_LALT = 226 
 = E3                         C SDL_SCANCODE_LGUI = 227 
 = E4                         C SDL_SCANCODE_RCTRL = 228 
 = E5                         C SDL_SCANCODE_RSHIFT = 229 
 = E6                         C SDL_SCANCODE_RALT = 230 
 = E7                         C SDL_SCANCODE_RGUI = 231 
 = 101                        C SDL_SCANCODE_MODE = 257 
 = 102                        C SDL_SCANCODE_AUDIONEXT = 258 
 = 103                        C SDL_SCANCODE_AUDIOPREV = 259 
 = 104                        C SDL_SCANCODE_AUDIOSTOP = 260 
 = 105                        C SDL_SCANCODE_AUDIOPLAY = 261 
 = 106                        C SDL_SCANCODE_AUDIOMUTE = 262 
 = 107                        C SDL_SCANCODE_MEDIASELECT = 263 
 = 108                        C SDL_SCANCODE_WWW = 264 
 = 109                        C SDL_SCANCODE_MAIL = 265 
 = 10A                        C SDL_SCANCODE_CALCULATOR = 266 
 = 10B                        C SDL_SCANCODE_COMPUTER = 267 
 = 10C                        C SDL_SCANCODE_AC_SEARCH = 268 
 = 10D                        C SDL_SCANCODE_AC_HOME = 269 
 = 10E                        C SDL_SCANCODE_AC_BACK = 270 
 = 10F                        C SDL_SCANCODE_AC_FORWARD = 271 
 = 110                        C SDL_SCANCODE_AC_STOP = 272 
 = 111                        C SDL_SCANCODE_AC_REFRESH = 273 
 = 112                        C SDL_SCANCODE_AC_BOOKMARKS = 274 
 = 113                        C SDL_SCANCODE_BRIGHTNESSDOWN = 275 
 = 114                        C SDL_SCANCODE_BRIGHTNESSUP = 276 
 = 115                        C SDL_SCANCODE_DISPLAYSWITCH = 277 
 = 116                        C SDL_SCANCODE_KBDILLUMTOGGLE = 278 
 = 117                        C SDL_SCANCODE_KBDILLUMDOWN = 279 
 = 118                        C SDL_SCANCODE_KBDILLUMUP = 280 
 = 119                        C SDL_SCANCODE_EJECT = 281 
 = 11A                        C SDL_SCANCODE_SLEEP = 282 
 = 11B                        C SDL_SCANCODE_APP1 = 283 
 = 11C                        C SDL_SCANCODE_APP2 = 284 
 = 11D                        C SDL_SCANCODE_AUDIOREWIND = 285 
 = 11E                        C SDL_SCANCODE_AUDIOFASTFORWARD = 286 
 = 200                        C SDL_NUM_SCANCODES = 512 
                              C 
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C SDL_Keycode typedef Sint32
 = 40000000                   C SDLK_SCANCODE_MASK	EQU	( 1  shl  30 )
                              C SDL_SCANCODE_TO_KEYCODE macro X
 >                            C 	exitm <( X  or  SDLK_SCANCODE_MASK ) >
 >                            C 	endm
                              C ;SDL_KeyCode typedef DWORD
 = 0                          C SDLK_UNKNOWN = 0 
 = 5C72                       C SDLK_RETURN = '\r' 
 = 5C303333                   C SDLK_ESCAPE = '\033' 
 = 5C62                       C SDLK_BACKSPACE = '\b' 
 = 5C74                       C SDLK_TAB = '\t' 
 = 20                         C SDLK_SPACE = ' ' 
 = 21                         C SDLK_EXCLAIM = '!' 
 = 22                         C SDLK_QUOTEDBL = '"' 
 = 23                         C SDLK_HASH = '#' 
 = 25                         C SDLK_PERCENT = '%' 
 = 24                         C SDLK_DOLLAR = '$' 
 = 26                         C SDLK_AMPERSAND = '&' 
                              C ;SDLK_QUOTE = '\'' 
 = 28                         C SDLK_LEFTPAREN = '(' 
 = 29                         C SDLK_RIGHTPAREN = ')' 
 = 2A                         C SDLK_ASTERISK = '*' 
 = 2B                         C SDLK_PLUS = '+' 
 = 2C                         C SDLK_COMMA = ','
 = 2D                         C SDLK_MINUS = '-' 
 = 2E                         C SDLK_PERIOD = '.' 
 = 2F                         C SDLK_SLASH = '/' 
 = 30                         C SDLK_0 = '0' 
 = 31                         C SDLK_1 = '1' 
 = 32                         C SDLK_2 = '2' 
 = 33                         C SDLK_3 = '3' 
 = 34                         C SDLK_4 = '4' 
 = 35                         C SDLK_5 = '5' 
 = 36                         C SDLK_6 = '6' 
 = 37                         C SDLK_7 = '7' 
 = 38                         C SDLK_8 = '8' 
 = 39                         C SDLK_9 = '9' 
 = 3A                         C SDLK_COLON = ':'
 = 3B                         C SDLK_SEMICOLON = ';'
 = 3C                         C SDLK_LESS = '<' 
 = 3D                         C SDLK_EQUALS = '=' 
 = 3E                         C SDLK_GREATER = '>' 
 = 3F                         C SDLK_QUESTION = '?' 
 = 40                         C SDLK_AT = '@' 
 = 20                         C SDLK_LEFTBRACKET = ' ' 
 = 5E                         C SDLK_CARET = '^' 
 = 5F                         C SDLK_UNDERSCORE = '_' 
 = 60                         C SDLK_BACKQUOTE = '`' 
 = 61                         C SDLK_a = 'a' 
 = 62                         C SDLK_b = 'b' 
 = 63                         C SDLK_c = 'c' 
 = 64                         C SDLK_d = 'd' 
 = 65                         C SDLK_e = 'e' 
 = 66                         C SDLK_f = 'f' 
 = 67                         C SDLK_g = 'g' 
 = 68                         C SDLK_h = 'h' 
 = 69                         C SDLK_i = 'i' 
 = 6A                         C SDLK_j = 'j' 
 = 6B                         C SDLK_k = 'k' 
 = 6C                         C SDLK_l = 'l' 
 = 6D                         C SDLK_m = 'm' 
 = 6E                         C SDLK_n = 'n' 
 = 6F                         C SDLK_o = 'o' 
 = 70                         C SDLK_p = 'p' 
 = 71                         C SDLK_q = 'q' 
 = 72                         C SDLK_r = 'r' 
 = 73                         C SDLK_s = 's' 
 = 74                         C SDLK_t = 't' 
 = 75                         C SDLK_u = 'u' 
 = 76                         C SDLK_v = 'v' 
 = 77                         C SDLK_w = 'w' 
 = 78                         C SDLK_x = 'x' 
 = 79                         C SDLK_y = 'y' 
 = 7A                         C SDLK_z = 'z' 
                             1C 	exitm <( SDL_SCANCODE_CAPSLOCK  or  SDLK_SCANCODE_MASK ) >
 = 40000039                   C SDLK_CAPSLOCK = ( SDL_SCANCODE_CAPSLOCK  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F1  or  SDLK_SCANCODE_MASK ) >
 = 4000003A                   C SDLK_F1 = ( SDL_SCANCODE_F1  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F2  or  SDLK_SCANCODE_MASK ) >
 = 4000003B                   C SDLK_F2 = ( SDL_SCANCODE_F2  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F3  or  SDLK_SCANCODE_MASK ) >
 = 4000003C                   C SDLK_F3 = ( SDL_SCANCODE_F3  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F4  or  SDLK_SCANCODE_MASK ) >
 = 4000003D                   C SDLK_F4 = ( SDL_SCANCODE_F4  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F5  or  SDLK_SCANCODE_MASK ) >
 = 4000003E                   C SDLK_F5 = ( SDL_SCANCODE_F5  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F6  or  SDLK_SCANCODE_MASK ) >
 = 4000003F                   C SDLK_F6 = ( SDL_SCANCODE_F6  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F7  or  SDLK_SCANCODE_MASK ) >
 = 40000040                   C SDLK_F7 = ( SDL_SCANCODE_F7  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F8  or  SDLK_SCANCODE_MASK ) >
 = 40000041                   C SDLK_F8 = ( SDL_SCANCODE_F8  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F9  or  SDLK_SCANCODE_MASK ) >
 = 40000042                   C SDLK_F9 = ( SDL_SCANCODE_F9  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F10  or  SDLK_SCANCODE_MASK ) >
 = 40000043                   C SDLK_F10 = ( SDL_SCANCODE_F10  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F11  or  SDLK_SCANCODE_MASK ) >
 = 40000044                   C SDLK_F11 = ( SDL_SCANCODE_F11  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F12  or  SDLK_SCANCODE_MASK ) >
 = 40000045                   C SDLK_F12 = ( SDL_SCANCODE_F12  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_PRINTSCREEN  or  SDLK_SCANCODE_MASK ) >
 = 40000046                   C SDLK_PRINTSCREEN = ( SDL_SCANCODE_PRINTSCREEN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_SCROLLLOCK  or  SDLK_SCANCODE_MASK ) >
 = 40000047                   C SDLK_SCROLLLOCK = ( SDL_SCANCODE_SCROLLLOCK  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_PAUSE  or  SDLK_SCANCODE_MASK ) >
 = 40000048                   C SDLK_PAUSE = ( SDL_SCANCODE_PAUSE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_INSERT  or  SDLK_SCANCODE_MASK ) >
 = 40000049                   C SDLK_INSERT = ( SDL_SCANCODE_INSERT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_HOME  or  SDLK_SCANCODE_MASK ) >
 = 4000004A                   C SDLK_HOME = ( SDL_SCANCODE_HOME  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_PAGEUP  or  SDLK_SCANCODE_MASK ) >
 = 4000004B                   C SDLK_PAGEUP = ( SDL_SCANCODE_PAGEUP  or  SDLK_SCANCODE_MASK ) 
 = 5C313737                   C SDLK_DELETE = '\177' 
                             1C 	exitm <( SDL_SCANCODE_END  or  SDLK_SCANCODE_MASK ) >
 = 4000004D                   C SDLK_END = ( SDL_SCANCODE_END  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_PAGEDOWN  or  SDLK_SCANCODE_MASK ) >
 = 4000004E                   C SDLK_PAGEDOWN = ( SDL_SCANCODE_PAGEDOWN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_RIGHT  or  SDLK_SCANCODE_MASK ) >
 = 4000004F                   C SDLK_RIGHT = ( SDL_SCANCODE_RIGHT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_LEFT  or  SDLK_SCANCODE_MASK ) >
 = 40000050                   C SDLK_LEFT = ( SDL_SCANCODE_LEFT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_DOWN  or  SDLK_SCANCODE_MASK ) >
 = 40000051                   C SDLK_DOWN = ( SDL_SCANCODE_DOWN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_UP  or  SDLK_SCANCODE_MASK ) >
 = 40000052                   C SDLK_UP = ( SDL_SCANCODE_UP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_NUMLOCKCLEAR  or  SDLK_SCANCODE_MASK ) >
 = 40000053                   C SDLK_NUMLOCKCLEAR = ( SDL_SCANCODE_NUMLOCKCLEAR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_DIVIDE  or  SDLK_SCANCODE_MASK ) >
 = 40000054                   C SDLK_KP_DIVIDE = ( SDL_SCANCODE_KP_DIVIDE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MULTIPLY  or  SDLK_SCANCODE_MASK ) >
 = 40000055                   C SDLK_KP_MULTIPLY = ( SDL_SCANCODE_KP_MULTIPLY  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MINUS  or  SDLK_SCANCODE_MASK ) >
 = 40000056                   C SDLK_KP_MINUS = ( SDL_SCANCODE_KP_MINUS  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_PLUS  or  SDLK_SCANCODE_MASK ) >
 = 40000057                   C SDLK_KP_PLUS = ( SDL_SCANCODE_KP_PLUS  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_ENTER  or  SDLK_SCANCODE_MASK ) >
 = 40000058                   C SDLK_KP_ENTER = ( SDL_SCANCODE_KP_ENTER  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_1  or  SDLK_SCANCODE_MASK ) >
 = 40000059                   C SDLK_KP_1 = ( SDL_SCANCODE_KP_1  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_2  or  SDLK_SCANCODE_MASK ) >
 = 4000005A                   C SDLK_KP_2 = ( SDL_SCANCODE_KP_2  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_3  or  SDLK_SCANCODE_MASK ) >
 = 4000005B                   C SDLK_KP_3 = ( SDL_SCANCODE_KP_3  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_4  or  SDLK_SCANCODE_MASK ) >
 = 4000005C                   C SDLK_KP_4 = ( SDL_SCANCODE_KP_4  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_5  or  SDLK_SCANCODE_MASK ) >
 = 4000005D                   C SDLK_KP_5 = ( SDL_SCANCODE_KP_5  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_6  or  SDLK_SCANCODE_MASK ) >
 = 4000005E                   C SDLK_KP_6 = ( SDL_SCANCODE_KP_6  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_7  or  SDLK_SCANCODE_MASK ) >
 = 4000005F                   C SDLK_KP_7 = ( SDL_SCANCODE_KP_7  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_8  or  SDLK_SCANCODE_MASK ) >
 = 40000060                   C SDLK_KP_8 = ( SDL_SCANCODE_KP_8  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_9  or  SDLK_SCANCODE_MASK ) >
 = 40000061                   C SDLK_KP_9 = ( SDL_SCANCODE_KP_9  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_0  or  SDLK_SCANCODE_MASK ) >
 = 40000062                   C SDLK_KP_0 = ( SDL_SCANCODE_KP_0  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_PERIOD  or  SDLK_SCANCODE_MASK ) >
 = 40000063                   C SDLK_KP_PERIOD = ( SDL_SCANCODE_KP_PERIOD  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_APPLICATION  or  SDLK_SCANCODE_MASK ) >
 = 40000065                   C SDLK_APPLICATION = ( SDL_SCANCODE_APPLICATION  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_POWER  or  SDLK_SCANCODE_MASK ) >
 = 40000066                   C SDLK_POWER = ( SDL_SCANCODE_POWER  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_EQUALS  or  SDLK_SCANCODE_MASK ) >
 = 40000067                   C SDLK_KP_EQUALS = ( SDL_SCANCODE_KP_EQUALS  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F13  or  SDLK_SCANCODE_MASK ) >
 = 40000068                   C SDLK_F13 = ( SDL_SCANCODE_F13  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F14  or  SDLK_SCANCODE_MASK ) >
 = 40000069                   C SDLK_F14 = ( SDL_SCANCODE_F14  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F15  or  SDLK_SCANCODE_MASK ) >
 = 4000006A                   C SDLK_F15 = ( SDL_SCANCODE_F15  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F16  or  SDLK_SCANCODE_MASK ) >
 = 4000006B                   C SDLK_F16 = ( SDL_SCANCODE_F16  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F17  or  SDLK_SCANCODE_MASK ) >
 = 4000006C                   C SDLK_F17 = ( SDL_SCANCODE_F17  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F18  or  SDLK_SCANCODE_MASK ) >
 = 4000006D                   C SDLK_F18 = ( SDL_SCANCODE_F18  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F19  or  SDLK_SCANCODE_MASK ) >
 = 4000006E                   C SDLK_F19 = ( SDL_SCANCODE_F19  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F20  or  SDLK_SCANCODE_MASK ) >
 = 4000006F                   C SDLK_F20 = ( SDL_SCANCODE_F20  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F21  or  SDLK_SCANCODE_MASK ) >
 = 40000070                   C SDLK_F21 = ( SDL_SCANCODE_F21  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F22  or  SDLK_SCANCODE_MASK ) >
 = 40000071                   C SDLK_F22 = ( SDL_SCANCODE_F22  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F23  or  SDLK_SCANCODE_MASK ) >
 = 40000072                   C SDLK_F23 = ( SDL_SCANCODE_F23  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_F24  or  SDLK_SCANCODE_MASK ) >
 = 40000073                   C SDLK_F24 = ( SDL_SCANCODE_F24  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_EXECUTE  or  SDLK_SCANCODE_MASK ) >
 = 40000074                   C SDLK_EXECUTE = ( SDL_SCANCODE_EXECUTE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_HELP  or  SDLK_SCANCODE_MASK ) >
 = 40000075                   C SDLK_HELP = ( SDL_SCANCODE_HELP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_MENU  or  SDLK_SCANCODE_MASK ) >
 = 40000076                   C SDLK_MENU = ( SDL_SCANCODE_MENU  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_SELECT  or  SDLK_SCANCODE_MASK ) >
 = 40000077                   C SDLK_SELECT = ( SDL_SCANCODE_SELECT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_STOP  or  SDLK_SCANCODE_MASK ) >
 = 40000078                   C SDLK_STOP = ( SDL_SCANCODE_STOP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AGAIN  or  SDLK_SCANCODE_MASK ) >
 = 40000079                   C SDLK_AGAIN = ( SDL_SCANCODE_AGAIN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_UNDO  or  SDLK_SCANCODE_MASK ) >
 = 4000007A                   C SDLK_UNDO = ( SDL_SCANCODE_UNDO  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_CUT  or  SDLK_SCANCODE_MASK ) >
 = 4000007B                   C SDLK_CUT = ( SDL_SCANCODE_CUT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_COPY  or  SDLK_SCANCODE_MASK ) >
 = 4000007C                   C SDLK_COPY = ( SDL_SCANCODE_COPY  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_PASTE  or  SDLK_SCANCODE_MASK ) >
 = 4000007D                   C SDLK_PASTE = ( SDL_SCANCODE_PASTE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_FIND  or  SDLK_SCANCODE_MASK ) >
 = 4000007E                   C SDLK_FIND = ( SDL_SCANCODE_FIND  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_MUTE  or  SDLK_SCANCODE_MASK ) >
 = 4000007F                   C SDLK_MUTE = ( SDL_SCANCODE_MUTE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_VOLUMEUP  or  SDLK_SCANCODE_MASK ) >
 = 40000080                   C SDLK_VOLUMEUP = ( SDL_SCANCODE_VOLUMEUP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_VOLUMEDOWN  or  SDLK_SCANCODE_MASK ) >
 = 40000081                   C SDLK_VOLUMEDOWN = ( SDL_SCANCODE_VOLUMEDOWN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_COMMA  or  SDLK_SCANCODE_MASK ) >
 = 40000085                   C SDLK_KP_COMMA = ( SDL_SCANCODE_KP_COMMA  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_EQUALSAS400  or  SDLK_SCANCODE_MASK ) >
 = 40000086                   C SDLK_KP_EQUALSAS400 = ( SDL_SCANCODE_KP_EQUALSAS400  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_ALTERASE  or  SDLK_SCANCODE_MASK ) >
 = 40000099                   C SDLK_ALTERASE = ( SDL_SCANCODE_ALTERASE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_SYSREQ  or  SDLK_SCANCODE_MASK ) >
 = 4000009A                   C SDLK_SYSREQ = ( SDL_SCANCODE_SYSREQ  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_CANCEL  or  SDLK_SCANCODE_MASK ) >
 = 4000009B                   C SDLK_CANCEL = ( SDL_SCANCODE_CANCEL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_CLEAR  or  SDLK_SCANCODE_MASK ) >
 = 4000009C                   C SDLK_CLEAR = ( SDL_SCANCODE_CLEAR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_PRIOR  or  SDLK_SCANCODE_MASK ) >
 = 4000009D                   C SDLK_PRIOR = ( SDL_SCANCODE_PRIOR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_RETURN2  or  SDLK_SCANCODE_MASK ) >
 = 4000009E                   C SDLK_RETURN2 = ( SDL_SCANCODE_RETURN2  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_SEPARATOR  or  SDLK_SCANCODE_MASK ) >
 = 4000009F                   C SDLK_SEPARATOR = ( SDL_SCANCODE_SEPARATOR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_OUT  or  SDLK_SCANCODE_MASK ) >
 = 400000A0                   C SDLK_OUT = ( SDL_SCANCODE_OUT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_OPER  or  SDLK_SCANCODE_MASK ) >
 = 400000A1                   C SDLK_OPER = ( SDL_SCANCODE_OPER  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_CLEARAGAIN  or  SDLK_SCANCODE_MASK ) >
 = 400000A2                   C SDLK_CLEARAGAIN = ( SDL_SCANCODE_CLEARAGAIN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_CRSEL  or  SDLK_SCANCODE_MASK ) >
 = 400000A3                   C SDLK_CRSEL = ( SDL_SCANCODE_CRSEL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_EXSEL  or  SDLK_SCANCODE_MASK ) >
 = 400000A4                   C SDLK_EXSEL = ( SDL_SCANCODE_EXSEL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_00  or  SDLK_SCANCODE_MASK ) >
 = 400000B0                   C SDLK_KP_00 = ( SDL_SCANCODE_KP_00  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_000  or  SDLK_SCANCODE_MASK ) >
 = 400000B1                   C SDLK_KP_000 = ( SDL_SCANCODE_KP_000  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_THOUSANDSSEPARATOR  or  SDLK_SCANCODE_MASK ) >
 = 400000B2                   C SDLK_THOUSANDSSEPARATOR = ( SDL_SCANCODE_THOUSANDSSEPARATOR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_DECIMALSEPARATOR  or  SDLK_SCANCODE_MASK ) >
 = 400000B3                   C SDLK_DECIMALSEPARATOR = ( SDL_SCANCODE_DECIMALSEPARATOR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_CURRENCYUNIT  or  SDLK_SCANCODE_MASK ) >
 = 400000B4                   C SDLK_CURRENCYUNIT = ( SDL_SCANCODE_CURRENCYUNIT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_CURRENCYSUBUNIT  or  SDLK_SCANCODE_MASK ) >
 = 400000B5                   C SDLK_CURRENCYSUBUNIT = ( SDL_SCANCODE_CURRENCYSUBUNIT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_LEFTPAREN  or  SDLK_SCANCODE_MASK ) >
 = 400000B6                   C SDLK_KP_LEFTPAREN = ( SDL_SCANCODE_KP_LEFTPAREN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_RIGHTPAREN  or  SDLK_SCANCODE_MASK ) >
 = 400000B7                   C SDLK_KP_RIGHTPAREN = ( SDL_SCANCODE_KP_RIGHTPAREN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_LEFTBRACE  or  SDLK_SCANCODE_MASK ) >
 = 400000B8                   C SDLK_KP_LEFTBRACE = ( SDL_SCANCODE_KP_LEFTBRACE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_RIGHTBRACE  or  SDLK_SCANCODE_MASK ) >
 = 400000B9                   C SDLK_KP_RIGHTBRACE = ( SDL_SCANCODE_KP_RIGHTBRACE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_TAB  or  SDLK_SCANCODE_MASK ) >
 = 400000BA                   C SDLK_KP_TAB = ( SDL_SCANCODE_KP_TAB  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_BACKSPACE  or  SDLK_SCANCODE_MASK ) >
 = 400000BB                   C SDLK_KP_BACKSPACE = ( SDL_SCANCODE_KP_BACKSPACE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_A  or  SDLK_SCANCODE_MASK ) >
 = 400000BC                   C SDLK_KP_A = ( SDL_SCANCODE_KP_A  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_B  or  SDLK_SCANCODE_MASK ) >
 = 400000BD                   C SDLK_KP_B = ( SDL_SCANCODE_KP_B  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_C  or  SDLK_SCANCODE_MASK ) >
 = 400000BE                   C SDLK_KP_C = ( SDL_SCANCODE_KP_C  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_D  or  SDLK_SCANCODE_MASK ) >
 = 400000BF                   C SDLK_KP_D = ( SDL_SCANCODE_KP_D  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_E  or  SDLK_SCANCODE_MASK ) >
 = 400000C0                   C SDLK_KP_E = ( SDL_SCANCODE_KP_E  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_F  or  SDLK_SCANCODE_MASK ) >
 = 400000C1                   C SDLK_KP_F = ( SDL_SCANCODE_KP_F  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_XOR  or  SDLK_SCANCODE_MASK ) >
 = 400000C2                   C SDLK_KP_XOR = ( SDL_SCANCODE_KP_XOR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_POWER  or  SDLK_SCANCODE_MASK ) >
 = 400000C3                   C SDLK_KP_POWER = ( SDL_SCANCODE_KP_POWER  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_PERCENT  or  SDLK_SCANCODE_MASK ) >
 = 400000C4                   C SDLK_KP_PERCENT = ( SDL_SCANCODE_KP_PERCENT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_LESS  or  SDLK_SCANCODE_MASK ) >
 = 400000C5                   C SDLK_KP_LESS = ( SDL_SCANCODE_KP_LESS  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_GREATER  or  SDLK_SCANCODE_MASK ) >
 = 400000C6                   C SDLK_KP_GREATER = ( SDL_SCANCODE_KP_GREATER  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_AMPERSAND  or  SDLK_SCANCODE_MASK ) >
 = 400000C7                   C SDLK_KP_AMPERSAND = ( SDL_SCANCODE_KP_AMPERSAND  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_DBLAMPERSAND  or  SDLK_SCANCODE_MASK ) >
 = 400000C8                   C SDLK_KP_DBLAMPERSAND = ( SDL_SCANCODE_KP_DBLAMPERSAND  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_VERTICALBAR  or  SDLK_SCANCODE_MASK ) >
 = 400000C9                   C SDLK_KP_VERTICALBAR = ( SDL_SCANCODE_KP_VERTICALBAR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_DBLVERTICALBAR  or  SDLK_SCANCODE_MASK ) >
 = 400000CA                   C SDLK_KP_DBLVERTICALBAR = ( SDL_SCANCODE_KP_DBLVERTICALBAR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_COLON  or  SDLK_SCANCODE_MASK ) >
 = 400000CB                   C SDLK_KP_COLON = ( SDL_SCANCODE_KP_COLON  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_HASH  or  SDLK_SCANCODE_MASK ) >
 = 400000CC                   C SDLK_KP_HASH = ( SDL_SCANCODE_KP_HASH  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_SPACE  or  SDLK_SCANCODE_MASK ) >
 = 400000CD                   C SDLK_KP_SPACE = ( SDL_SCANCODE_KP_SPACE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_AT  or  SDLK_SCANCODE_MASK ) >
 = 400000CE                   C SDLK_KP_AT = ( SDL_SCANCODE_KP_AT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_EXCLAM  or  SDLK_SCANCODE_MASK ) >
 = 400000CF                   C SDLK_KP_EXCLAM = ( SDL_SCANCODE_KP_EXCLAM  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MEMSTORE  or  SDLK_SCANCODE_MASK ) >
 = 400000D0                   C SDLK_KP_MEMSTORE = ( SDL_SCANCODE_KP_MEMSTORE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MEMRECALL  or  SDLK_SCANCODE_MASK ) >
 = 400000D1                   C SDLK_KP_MEMRECALL = ( SDL_SCANCODE_KP_MEMRECALL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MEMCLEAR  or  SDLK_SCANCODE_MASK ) >
 = 400000D2                   C SDLK_KP_MEMCLEAR = ( SDL_SCANCODE_KP_MEMCLEAR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MEMADD  or  SDLK_SCANCODE_MASK ) >
 = 400000D3                   C SDLK_KP_MEMADD = ( SDL_SCANCODE_KP_MEMADD  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MEMSUBTRACT  or  SDLK_SCANCODE_MASK ) >
 = 400000D4                   C SDLK_KP_MEMSUBTRACT = ( SDL_SCANCODE_KP_MEMSUBTRACT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MEMMULTIPLY  or  SDLK_SCANCODE_MASK ) >
 = 400000D5                   C SDLK_KP_MEMMULTIPLY = ( SDL_SCANCODE_KP_MEMMULTIPLY  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_MEMDIVIDE  or  SDLK_SCANCODE_MASK ) >
 = 400000D6                   C SDLK_KP_MEMDIVIDE = ( SDL_SCANCODE_KP_MEMDIVIDE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_PLUSMINUS  or  SDLK_SCANCODE_MASK ) >
 = 400000D7                   C SDLK_KP_PLUSMINUS = ( SDL_SCANCODE_KP_PLUSMINUS  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_CLEAR  or  SDLK_SCANCODE_MASK ) >
 = 400000D8                   C SDLK_KP_CLEAR = ( SDL_SCANCODE_KP_CLEAR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_CLEARENTRY  or  SDLK_SCANCODE_MASK ) >
 = 400000D9                   C SDLK_KP_CLEARENTRY = ( SDL_SCANCODE_KP_CLEARENTRY  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_BINARY  or  SDLK_SCANCODE_MASK ) >
 = 400000DA                   C SDLK_KP_BINARY = ( SDL_SCANCODE_KP_BINARY  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_OCTAL  or  SDLK_SCANCODE_MASK ) >
 = 400000DB                   C SDLK_KP_OCTAL = ( SDL_SCANCODE_KP_OCTAL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_DECIMAL  or  SDLK_SCANCODE_MASK ) >
 = 400000DC                   C SDLK_KP_DECIMAL = ( SDL_SCANCODE_KP_DECIMAL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KP_HEXADECIMAL  or  SDLK_SCANCODE_MASK ) >
 = 400000DD                   C SDLK_KP_HEXADECIMAL = ( SDL_SCANCODE_KP_HEXADECIMAL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_LCTRL  or  SDLK_SCANCODE_MASK ) >
 = 400000E0                   C SDLK_LCTRL = ( SDL_SCANCODE_LCTRL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_LSHIFT  or  SDLK_SCANCODE_MASK ) >
 = 400000E1                   C SDLK_LSHIFT = ( SDL_SCANCODE_LSHIFT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_LALT  or  SDLK_SCANCODE_MASK ) >
 = 400000E2                   C SDLK_LALT = ( SDL_SCANCODE_LALT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_LGUI  or  SDLK_SCANCODE_MASK ) >
 = 400000E3                   C SDLK_LGUI = ( SDL_SCANCODE_LGUI  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_RCTRL  or  SDLK_SCANCODE_MASK ) >
 = 400000E4                   C SDLK_RCTRL = ( SDL_SCANCODE_RCTRL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_RSHIFT  or  SDLK_SCANCODE_MASK ) >
 = 400000E5                   C SDLK_RSHIFT = ( SDL_SCANCODE_RSHIFT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_RALT  or  SDLK_SCANCODE_MASK ) >
 = 400000E6                   C SDLK_RALT = ( SDL_SCANCODE_RALT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_RGUI  or  SDLK_SCANCODE_MASK ) >
 = 400000E7                   C SDLK_RGUI = ( SDL_SCANCODE_RGUI  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_MODE  or  SDLK_SCANCODE_MASK ) >
 = 40000101                   C SDLK_MODE = ( SDL_SCANCODE_MODE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AUDIONEXT  or  SDLK_SCANCODE_MASK ) >
 = 40000102                   C SDLK_AUDIONEXT = ( SDL_SCANCODE_AUDIONEXT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AUDIOPREV  or  SDLK_SCANCODE_MASK ) >
 = 40000103                   C SDLK_AUDIOPREV = ( SDL_SCANCODE_AUDIOPREV  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AUDIOSTOP  or  SDLK_SCANCODE_MASK ) >
 = 40000104                   C SDLK_AUDIOSTOP = ( SDL_SCANCODE_AUDIOSTOP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AUDIOPLAY  or  SDLK_SCANCODE_MASK ) >
 = 40000105                   C SDLK_AUDIOPLAY = ( SDL_SCANCODE_AUDIOPLAY  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AUDIOMUTE  or  SDLK_SCANCODE_MASK ) >
 = 40000106                   C SDLK_AUDIOMUTE = ( SDL_SCANCODE_AUDIOMUTE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_MEDIASELECT  or  SDLK_SCANCODE_MASK ) >
 = 40000107                   C SDLK_MEDIASELECT = ( SDL_SCANCODE_MEDIASELECT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_WWW  or  SDLK_SCANCODE_MASK ) >
 = 40000108                   C SDLK_WWW = ( SDL_SCANCODE_WWW  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_MAIL  or  SDLK_SCANCODE_MASK ) >
 = 40000109                   C SDLK_MAIL = ( SDL_SCANCODE_MAIL  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_CALCULATOR  or  SDLK_SCANCODE_MASK ) >
 = 4000010A                   C SDLK_CALCULATOR = ( SDL_SCANCODE_CALCULATOR  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_COMPUTER  or  SDLK_SCANCODE_MASK ) >
 = 4000010B                   C SDLK_COMPUTER = ( SDL_SCANCODE_COMPUTER  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AC_SEARCH  or  SDLK_SCANCODE_MASK ) >
 = 4000010C                   C SDLK_AC_SEARCH = ( SDL_SCANCODE_AC_SEARCH  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AC_HOME  or  SDLK_SCANCODE_MASK ) >
 = 4000010D                   C SDLK_AC_HOME = ( SDL_SCANCODE_AC_HOME  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AC_BACK  or  SDLK_SCANCODE_MASK ) >
 = 4000010E                   C SDLK_AC_BACK = ( SDL_SCANCODE_AC_BACK  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AC_FORWARD  or  SDLK_SCANCODE_MASK ) >
 = 4000010F                   C SDLK_AC_FORWARD = ( SDL_SCANCODE_AC_FORWARD  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AC_STOP  or  SDLK_SCANCODE_MASK ) >
 = 40000110                   C SDLK_AC_STOP = ( SDL_SCANCODE_AC_STOP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AC_REFRESH  or  SDLK_SCANCODE_MASK ) >
 = 40000111                   C SDLK_AC_REFRESH = ( SDL_SCANCODE_AC_REFRESH  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AC_BOOKMARKS  or  SDLK_SCANCODE_MASK ) >
 = 40000112                   C SDLK_AC_BOOKMARKS = ( SDL_SCANCODE_AC_BOOKMARKS  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_BRIGHTNESSDOWN  or  SDLK_SCANCODE_MASK ) >
 = 40000113                   C SDLK_BRIGHTNESSDOWN = ( SDL_SCANCODE_BRIGHTNESSDOWN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_BRIGHTNESSUP  or  SDLK_SCANCODE_MASK ) >
 = 40000114                   C SDLK_BRIGHTNESSUP = ( SDL_SCANCODE_BRIGHTNESSUP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_DISPLAYSWITCH  or  SDLK_SCANCODE_MASK ) >
 = 40000115                   C SDLK_DISPLAYSWITCH = ( SDL_SCANCODE_DISPLAYSWITCH  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KBDILLUMTOGGLE  or  SDLK_SCANCODE_MASK ) >
 = 40000116                   C SDLK_KBDILLUMTOGGLE = ( SDL_SCANCODE_KBDILLUMTOGGLE  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KBDILLUMDOWN  or  SDLK_SCANCODE_MASK ) >
 = 40000117                   C SDLK_KBDILLUMDOWN = ( SDL_SCANCODE_KBDILLUMDOWN  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_KBDILLUMUP  or  SDLK_SCANCODE_MASK ) >
 = 40000118                   C SDLK_KBDILLUMUP = ( SDL_SCANCODE_KBDILLUMUP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_EJECT  or  SDLK_SCANCODE_MASK ) >
 = 40000119                   C SDLK_EJECT = ( SDL_SCANCODE_EJECT  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_SLEEP  or  SDLK_SCANCODE_MASK ) >
 = 4000011A                   C SDLK_SLEEP = ( SDL_SCANCODE_SLEEP  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_APP1  or  SDLK_SCANCODE_MASK ) >
 = 4000011B                   C SDLK_APP1 = ( SDL_SCANCODE_APP1  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_APP2  or  SDLK_SCANCODE_MASK ) >
 = 4000011C                   C SDLK_APP2 = ( SDL_SCANCODE_APP2  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AUDIOREWIND  or  SDLK_SCANCODE_MASK ) >
 = 4000011D                   C SDLK_AUDIOREWIND = ( SDL_SCANCODE_AUDIOREWIND  or  SDLK_SCANCODE_MASK ) 
                             1C 	exitm <( SDL_SCANCODE_AUDIOFASTFORWARD  or  SDLK_SCANCODE_MASK ) >
 = 4000011E                   C SDLK_AUDIOFASTFORWARD = ( SDL_SCANCODE_AUDIOFASTFORWARD  or  SDLK_SCANCODE_MASK ) 
                              C 
                              C SDL_Keymod typedef DWORD
 = 0                          C KMOD_NONE = 0000h 
 = 1                          C KMOD_LSHIFT = 0001h 
 = 2                          C KMOD_RSHIFT = 0002h 
 = 40                         C KMOD_LCTRL = 0040h 
 = 80                         C KMOD_RCTRL = 0080h 
 = 100                        C KMOD_LALT = 0100h 
 = 200                        C KMOD_RALT = 0200h 
 = 400                        C KMOD_LGUI = 0400h 
 = 800                        C KMOD_RGUI = 0800h 
 = 1000                       C KMOD_NUM = 1000h 
 = 2000                       C KMOD_CAPS = 2000h 
 = 4000                       C KMOD_MODE = 4000h 
 = 8000                       C KMOD_RESERVED = 8000h 
                              C 
 = C0                         C KMOD_CTRL	EQU	( KMOD_LCTRL  or  KMOD_RCTRL )
 = 3                          C KMOD_SHIFT	EQU	( KMOD_LSHIFT  or  KMOD_RSHIFT )
 = 300                        C KMOD_ALT	EQU	( KMOD_LALT  or  KMOD_RALT )
 = C00                        C KMOD_GUI	EQU	( KMOD_LGUI  or  KMOD_RGUI )
                              C endif 
                              C include SDL_video.inc
                              C 
                              C ifndef SDL_video_h_
                              C SDL_video_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_pixels.inc
                              C 	include SDL_rect.inc
                              C 	include SDL_surface.inc
                              C ;	include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_DisplayMode	struct 
                              C format	Uint32	?
                              C w	DWORD	?
                              C h	DWORD	?
                              C refresh_rate	DWORD	?
                              C driverdata	DWORD	?
                              C SDL_DisplayMode	ends
                              C 
                              C ;SDL_Window typedef SDL_Window
                              C 
                              C SDL_WindowFlags typedef DWORD
                              C SDL_WINDOW_FULLSCREEN = 00000001h 
                              C SDL_WINDOW_OPENGL = 00000002h 
                              C SDL_WINDOW_SHOWN = 00000004h 
                              C SDL_WINDOW_HIDDEN = 00000008h 
                              C SDL_WINDOW_BORDERLESS = 00000010h 
                              C SDL_WINDOW_RESIZABLE = 00000020h 
                              C SDL_WINDOW_MINIMIZED = 00000040h 
                              C SDL_WINDOW_MAXIMIZED = 00000080h 
                              C SDL_WINDOW_INPUT_GRABBED = 00000100h 
                              C SDL_WINDOW_INPUT_FOCUS = 00000200h 
                              C SDL_WINDOW_MOUSE_FOCUS = 00000400h 
                              C SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN  or  00001000h ) 
                              C SDL_WINDOW_FOREIGN = 00000800h 
                              C SDL_WINDOW_ALLOW_HIGHDPI = 00002000h 
                              C SDL_WINDOW_MOUSE_CAPTURE = 00004000h 
                              C SDL_WINDOW_ALWAYS_ON_TOP = 00008000h 
                              C SDL_WINDOW_SKIP_TASKBAR = 00010000h 
                              C SDL_WINDOW_UTILITY = 00020000h 
                              C SDL_WINDOW_TOOLTIP = 00040000h 
                              C SDL_WINDOW_POPUP_MENU = 00080000h 
                              C SDL_WINDOW_VULKAN = 10000000h 
                              C 
                              C SDL_WINDOWPOS_UNDEFINED_MASK	EQU	1FFF0000h
                              C SDL_WINDOWPOS_UNDEFINED_DISPLAY macro X
                              C 	exitm <( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( X ) ) >
                              C 	endm
                              C SDL_WINDOWPOS_UNDEFINED	EQU	SDL_WINDOWPOS_UNDEFINED_DISPLAY ( 0 )
                              C SDL_WINDOWPOS_ISUNDEFINED macro X
                              C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_UNDEFINED_MASK ) >
                              C 	endm
                              C SDL_WINDOWPOS_CENTERED_MASK	EQU	2FFF0000h
                              C SDL_WINDOWPOS_CENTERED_DISPLAY macro X
                              C 	exitm <( SDL_WINDOWPOS_CENTERED_MASK  or  ( X ) ) >
                              C 	endm
                              C SDL_WINDOWPOS_CENTERED	EQU	SDL_WINDOWPOS_CENTERED_DISPLAY ( 0 )
                              C SDL_WINDOWPOS_ISCENTERED macro X
                              C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_CENTERED_MASK ) >
                              C 	endm
                              C SDL_WindowEventID typedef DWORD
                              C SDL_WINDOWEVENT_NONE = 0
                              C SDL_WINDOWEVENT_SHOWN = 1
                              C SDL_WINDOWEVENT_HIDDEN = 2
                              C SDL_WINDOWEVENT_EXPOSED = 3
                              C SDL_WINDOWEVENT_MOVED = 4
                              C SDL_WINDOWEVENT_RESIZED = 5
                              C SDL_WINDOWEVENT_SIZE_CHANGED = 6
                              C SDL_WINDOWEVENT_MINIMIZED = 7
                              C SDL_WINDOWEVENT_MAXIMIZED = 8
                              C SDL_WINDOWEVENT_RESTORED = 9
                              C SDL_WINDOWEVENT_ENTER = 10
                              C SDL_WINDOWEVENT_LEAVE = 11
                              C SDL_WINDOWEVENT_FOCUS_GAINED = 12
                              C SDL_WINDOWEVENT_FOCUS_LOST = 13
                              C SDL_WINDOWEVENT_CLOSE = 14
                              C SDL_WINDOWEVENT_TAKE_FOCUS = 15
                              C SDL_WINDOWEVENT_HIT_TEST = 16
                              C 
                              C SDL_DisplayEventID typedef DWORD
                              C SDL_DISPLAYEVENT_NONE = 0
                              C SDL_DISPLAYEVENT_ORIENTATION = 1
                              C 
                              C SDL_DisplayOrientation typedef DWORD
                              C SDL_ORIENTATION_UNKNOWN = 0
                              C SDL_ORIENTATION_LANDSCAPE = 1
                              C SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2
                              C SDL_ORIENTATION_PORTRAIT = 3
                              C SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
                              C 
                              C SDL_GLContext typedef ptr 
                              C SDL_GLattr typedef DWORD
                              C SDL_GL_RED_SIZE = 0
                              C SDL_GL_GREEN_SIZE = 1
                              C SDL_GL_BLUE_SIZE = 2
                              C SDL_GL_ALPHA_SIZE = 3
                              C SDL_GL_BUFFER_SIZE = 4
                              C SDL_GL_DOUBLEBUFFER = 5
                              C SDL_GL_DEPTH_SIZE = 6
                              C SDL_GL_STENCIL_SIZE = 7
                              C SDL_GL_ACCUM_RED_SIZE = 8
                              C SDL_GL_ACCUM_GREEN_SIZE = 9
                              C SDL_GL_ACCUM_BLUE_SIZE = 10
                              C SDL_GL_ACCUM_ALPHA_SIZE = 11
                              C SDL_GL_STEREO = 12
                              C SDL_GL_MULTISAMPLEBUFFERS = 13
                              C SDL_GL_MULTISAMPLESAMPLES = 14
                              C SDL_GL_ACCELERATED_VISUAL = 15
                              C SDL_GL_RETAINED_BACKING = 16
                              C SDL_GL_CONTEXT_MAJOR_VERSION = 17
                              C SDL_GL_CONTEXT_MINOR_VERSION = 18
                              C SDL_GL_CONTEXT_EGL = 19
                              C SDL_GL_CONTEXT_FLAGS = 20
                              C SDL_GL_CONTEXT_PROFILE_MASK = 21
                              C SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22
                              C SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24
                              C SDL_GL_CONTEXT_RESET_NOTIFICATION = 25
                              C SDL_GL_CONTEXT_NO_ERROR = 26
                              C 
                              C SDL_GLprofile typedef DWORD
                              C SDL_GL_CONTEXT_PROFILE_CORE = 0001h 
                              C SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0002h 
                              C SDL_GL_CONTEXT_PROFILE_ES = 0004h 
                              C 
                              C SDL_GLcontextFlag typedef DWORD
                              C SDL_GL_CONTEXT_DEBUG_FLAG = 0001h 
                              C SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0002h 
                              C SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0004h 
                              C SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0008h 
                              C 
                              C SDL_GLcontextReleaseFlag typedef DWORD
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0000h 
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0001h 
                              C 
                              C SDL_GLContextResetNotification typedef DWORD
                              C SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0000h 
                              C SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0001h 
                              C 
                              C SDL_GetNumVideoDrivers proto  
                              C SDL_GetVideoDriver proto  :DWORD
                              C SDL_VideoInit proto  :ptr SBYTE
                              C SDL_VideoQuit proto  
                              C SDL_GetCurrentVideoDriver proto  
                              C SDL_GetNumVideoDisplays proto  
                              C SDL_GetDisplayName proto  :DWORD
                              C SDL_GetDisplayBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayUsableBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayDPI proto  :DWORD, :ptr REAL4, :ptr REAL4, :ptr REAL4
                              C SDL_GetDisplayOrientation proto  :DWORD
                              C SDL_GetNumDisplayModes proto  :DWORD
                              C SDL_GetDisplayMode proto  :DWORD, :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetDesktopDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetCurrentDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetClosestDisplayMode proto  :DWORD, :ptr SDL_DisplayMode, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayIndex proto  :ptr SDL_Window
                              C SDL_SetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowPixelFormat proto  :ptr SDL_Window
                              C SDL_CreateWindow proto  :ptr SBYTE, :DWORD, :DWORD, :DWORD, :DWORD, :Uint32
                              C SDL_CreateWindowFrom proto  :ptr 
                              C SDL_GetWindowID proto  :ptr SDL_Window
                              C SDL_GetWindowFromID proto  :Uint32
                              C SDL_GetWindowFlags proto  :ptr SDL_Window
                              C SDL_SetWindowTitle proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_GetWindowTitle proto  :ptr SDL_Window
                              C SDL_SetWindowIcon proto  :ptr SDL_Window, :ptr SDL_Surface
                              C SDL_SetWindowData proto  :ptr SDL_Window, :ptr SBYTE, :ptr 
                              C SDL_GetWindowData proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_SetWindowPosition proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowPosition proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GetWindowBordersSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMinimumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMinimumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMaximumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMaximumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowBordered proto  :ptr SDL_Window, :SDL_bool
                              C SDL_SetWindowResizable proto  :ptr SDL_Window, :SDL_bool
                              C SDL_ShowWindow proto  :ptr SDL_Window
                              C SDL_HideWindow proto  :ptr SDL_Window
                              C SDL_RaiseWindow proto  :ptr SDL_Window
                              C SDL_MaximizeWindow proto  :ptr SDL_Window
                              C SDL_MinimizeWindow proto  :ptr SDL_Window
                              C SDL_RestoreWindow proto  :ptr SDL_Window
                              C SDL_SetWindowFullscreen proto  :ptr SDL_Window, :Uint32
                              C SDL_GetWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurfaceRects proto  :ptr SDL_Window, :ptr SDL_Rect, :DWORD
                              C SDL_SetWindowGrab proto  :ptr SDL_Window, :SDL_bool
                              C SDL_GetWindowGrab proto  :ptr SDL_Window
                              C SDL_GetGrabbedWindow proto  
                              C SDL_SetWindowBrightness proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowBrightness proto  :ptr SDL_Window
                              C SDL_SetWindowOpacity proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowOpacity proto  :ptr SDL_Window, :ptr REAL4
                              C SDL_SetWindowModalFor proto  :ptr SDL_Window, :ptr SDL_Window
                              C SDL_SetWindowInputFocus proto  :ptr SDL_Window
                              C SDL_SetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_GetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_HitTestResult typedef DWORD
                              C SDL_HITTEST_NORMAL = 0
                              C SDL_HITTEST_DRAGGABLE = 1
                              C SDL_HITTEST_RESIZE_TOPLEFT = 2
                              C SDL_HITTEST_RESIZE_TOP = 3
                              C SDL_HITTEST_RESIZE_TOPRIGHT = 4
                              C SDL_HITTEST_RESIZE_RIGHT = 5
                              C SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6
                              C SDL_HITTEST_RESIZE_BOTTOM = 7
                              C SDL_HITTEST_RESIZE_BOTTOMLEFT = 8
                              C SDL_HITTEST_RESIZE_LEFT = 9
                              C 
                              C proto_SDL_HitTest typedef proto  :ptr SDL_Window,:ptr SDL_Point,:ptr 
                              C SDL_HitTest typedef ptr proto_SDL_HitTest
                              C SDL_SetWindowHitTest proto  :ptr SDL_Window, :SDL_HitTest, :ptr 
                              C SDL_DestroyWindow proto  :ptr SDL_Window
                              C SDL_IsScreenSaverEnabled proto  
                              C SDL_EnableScreenSaver proto  
                              C SDL_DisableScreenSaver proto  
                              C SDL_GL_LoadLibrary proto  :ptr SBYTE
                              C SDL_GL_GetProcAddress proto  :ptr SBYTE
                              C SDL_GL_UnloadLibrary proto  
                              C SDL_GL_ExtensionSupported proto  :ptr SBYTE
                              C SDL_GL_ResetAttributes proto  
                              C SDL_GL_SetAttribute proto  :SDL_GLattr, :DWORD
                              C SDL_GL_GetAttribute proto  :SDL_GLattr, :ptr DWORD
                              C SDL_GL_CreateContext proto  :ptr SDL_Window
                              C SDL_GL_MakeCurrent proto  :ptr SDL_Window, :SDL_GLContext
                              C SDL_GL_GetCurrentWindow proto  
                              C SDL_GL_GetCurrentContext proto  
                              C SDL_GL_GetDrawableSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GL_SetSwapInterval proto  :DWORD
                              C SDL_GL_GetSwapInterval proto  
                              C SDL_GL_SwapWindow proto  :ptr SDL_Window
                              C SDL_GL_DeleteContext proto  :SDL_GLContext
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C 
00000000                      C SDL_Keysym	struct 
00000000                      C 	scancode	SDL_Scancode	?
00000004                      C 	sym			SDL_Keycode		?
00000008                      C 	mode		WORD			?
0000000C                      C 	unused		DWORD			?
00000010                      C SDL_Keysym	ends
                              C 
                              C SDL_GetKeyboardFocus proto  
                              C SDL_GetKeyboardState proto  :ptr DWORD
                              C SDL_GetModState proto  
                              C SDL_SetModState proto  :SDL_Keymod
                              C SDL_GetKeyFromScancode proto  :SDL_Scancode
                              C SDL_GetScancodeFromKey proto  :SDL_Keycode
                              C SDL_GetScancodeName proto  :SDL_Scancode
                              C SDL_GetScancodeFromName proto  :ptr SBYTE
                              C SDL_GetKeyName proto  :SDL_Keycode
                              C SDL_GetKeyFromName proto  :ptr SBYTE
                              C SDL_StartTextInput proto  
                              C SDL_IsTextInputActive proto  
                              C SDL_StopTextInput proto  
                              C SDL_SetTextInputRect proto  :ptr SDL_Rect
                              C SDL_HasScreenKeyboardSupport proto  
                              C SDL_IsScreenKeyboardShown proto  :ptr SDL_Window
                              C 
                              C endif 
                              C 	include SDL_mouse.inc
                              C ifndef SDL_mouse_h_
 =                            C SDL_mouse_h_	EQU	<>
                              C 	;include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C 
                              C ifndef SDL_error_h_
                              C SDL_error_h_	EQU	<>
                              C 
                              C SDL_SetError proto  :ptr SBYTE, :VARARG
                              C ;SDL_PRINTF_VARARG_FUNC proto  :1
                              C SDL_GetError proto  
                              C SDL_ClearError proto  
                              C 
                              C mSDL_OutOfMemory macro 
                              C 	exitm <SDL_Error ( SDL_ENOMEM ) >
                              C 	endm
                              C 	
                              C mSDL_Unsupported macro 
                              C 	exitm <SDL_Error ( SDL_UNSUPPORTED ) >
                              C 	endm
                              C 	
                              C mSDL_InvalidParamError macro param
                              C 	exitm <SDL_SetError ( "Parameter '%s' is invalid" , ( param ) ) >
                              C 	endm
                              C 	
                              C SDL_errorcode typedef DWORD
                              C SDL_ENOMEM = 0
                              C SDL_EFREAD = 1
                              C SDL_EFWRITE = 2
                              C SDL_EFSEEK = 3
                              C SDL_UNSUPPORTED = 4
                              C SDL_LASTERROR = 5
                              C 
                              C SDL_Error proto  :SDL_errorcode
                              C endif 
                              C 	include SDL_video.inc
                              C 
                              C ifndef SDL_video_h_
                              C SDL_video_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_pixels.inc
                              C 	include SDL_rect.inc
                              C 	include SDL_surface.inc
                              C ;	include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_DisplayMode	struct 
                              C format	Uint32	?
                              C w	DWORD	?
                              C h	DWORD	?
                              C refresh_rate	DWORD	?
                              C driverdata	DWORD	?
                              C SDL_DisplayMode	ends
                              C 
                              C ;SDL_Window typedef SDL_Window
                              C 
                              C SDL_WindowFlags typedef DWORD
                              C SDL_WINDOW_FULLSCREEN = 00000001h 
                              C SDL_WINDOW_OPENGL = 00000002h 
                              C SDL_WINDOW_SHOWN = 00000004h 
                              C SDL_WINDOW_HIDDEN = 00000008h 
                              C SDL_WINDOW_BORDERLESS = 00000010h 
                              C SDL_WINDOW_RESIZABLE = 00000020h 
                              C SDL_WINDOW_MINIMIZED = 00000040h 
                              C SDL_WINDOW_MAXIMIZED = 00000080h 
                              C SDL_WINDOW_INPUT_GRABBED = 00000100h 
                              C SDL_WINDOW_INPUT_FOCUS = 00000200h 
                              C SDL_WINDOW_MOUSE_FOCUS = 00000400h 
                              C SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN  or  00001000h ) 
                              C SDL_WINDOW_FOREIGN = 00000800h 
                              C SDL_WINDOW_ALLOW_HIGHDPI = 00002000h 
                              C SDL_WINDOW_MOUSE_CAPTURE = 00004000h 
                              C SDL_WINDOW_ALWAYS_ON_TOP = 00008000h 
                              C SDL_WINDOW_SKIP_TASKBAR = 00010000h 
                              C SDL_WINDOW_UTILITY = 00020000h 
                              C SDL_WINDOW_TOOLTIP = 00040000h 
                              C SDL_WINDOW_POPUP_MENU = 00080000h 
                              C SDL_WINDOW_VULKAN = 10000000h 
                              C 
                              C SDL_WINDOWPOS_UNDEFINED_MASK	EQU	1FFF0000h
                              C SDL_WINDOWPOS_UNDEFINED_DISPLAY macro X
                              C 	exitm <( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( X ) ) >
                              C 	endm
                              C SDL_WINDOWPOS_UNDEFINED	EQU	SDL_WINDOWPOS_UNDEFINED_DISPLAY ( 0 )
                              C SDL_WINDOWPOS_ISUNDEFINED macro X
                              C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_UNDEFINED_MASK ) >
                              C 	endm
                              C SDL_WINDOWPOS_CENTERED_MASK	EQU	2FFF0000h
                              C SDL_WINDOWPOS_CENTERED_DISPLAY macro X
                              C 	exitm <( SDL_WINDOWPOS_CENTERED_MASK  or  ( X ) ) >
                              C 	endm
                              C SDL_WINDOWPOS_CENTERED	EQU	SDL_WINDOWPOS_CENTERED_DISPLAY ( 0 )
                              C SDL_WINDOWPOS_ISCENTERED macro X
                              C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_CENTERED_MASK ) >
                              C 	endm
                              C SDL_WindowEventID typedef DWORD
                              C SDL_WINDOWEVENT_NONE = 0
                              C SDL_WINDOWEVENT_SHOWN = 1
                              C SDL_WINDOWEVENT_HIDDEN = 2
                              C SDL_WINDOWEVENT_EXPOSED = 3
                              C SDL_WINDOWEVENT_MOVED = 4
                              C SDL_WINDOWEVENT_RESIZED = 5
                              C SDL_WINDOWEVENT_SIZE_CHANGED = 6
                              C SDL_WINDOWEVENT_MINIMIZED = 7
                              C SDL_WINDOWEVENT_MAXIMIZED = 8
                              C SDL_WINDOWEVENT_RESTORED = 9
                              C SDL_WINDOWEVENT_ENTER = 10
                              C SDL_WINDOWEVENT_LEAVE = 11
                              C SDL_WINDOWEVENT_FOCUS_GAINED = 12
                              C SDL_WINDOWEVENT_FOCUS_LOST = 13
                              C SDL_WINDOWEVENT_CLOSE = 14
                              C SDL_WINDOWEVENT_TAKE_FOCUS = 15
                              C SDL_WINDOWEVENT_HIT_TEST = 16
                              C 
                              C SDL_DisplayEventID typedef DWORD
                              C SDL_DISPLAYEVENT_NONE = 0
                              C SDL_DISPLAYEVENT_ORIENTATION = 1
                              C 
                              C SDL_DisplayOrientation typedef DWORD
                              C SDL_ORIENTATION_UNKNOWN = 0
                              C SDL_ORIENTATION_LANDSCAPE = 1
                              C SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2
                              C SDL_ORIENTATION_PORTRAIT = 3
                              C SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
                              C 
                              C SDL_GLContext typedef ptr 
                              C SDL_GLattr typedef DWORD
                              C SDL_GL_RED_SIZE = 0
                              C SDL_GL_GREEN_SIZE = 1
                              C SDL_GL_BLUE_SIZE = 2
                              C SDL_GL_ALPHA_SIZE = 3
                              C SDL_GL_BUFFER_SIZE = 4
                              C SDL_GL_DOUBLEBUFFER = 5
                              C SDL_GL_DEPTH_SIZE = 6
                              C SDL_GL_STENCIL_SIZE = 7
                              C SDL_GL_ACCUM_RED_SIZE = 8
                              C SDL_GL_ACCUM_GREEN_SIZE = 9
                              C SDL_GL_ACCUM_BLUE_SIZE = 10
                              C SDL_GL_ACCUM_ALPHA_SIZE = 11
                              C SDL_GL_STEREO = 12
                              C SDL_GL_MULTISAMPLEBUFFERS = 13
                              C SDL_GL_MULTISAMPLESAMPLES = 14
                              C SDL_GL_ACCELERATED_VISUAL = 15
                              C SDL_GL_RETAINED_BACKING = 16
                              C SDL_GL_CONTEXT_MAJOR_VERSION = 17
                              C SDL_GL_CONTEXT_MINOR_VERSION = 18
                              C SDL_GL_CONTEXT_EGL = 19
                              C SDL_GL_CONTEXT_FLAGS = 20
                              C SDL_GL_CONTEXT_PROFILE_MASK = 21
                              C SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22
                              C SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24
                              C SDL_GL_CONTEXT_RESET_NOTIFICATION = 25
                              C SDL_GL_CONTEXT_NO_ERROR = 26
                              C 
                              C SDL_GLprofile typedef DWORD
                              C SDL_GL_CONTEXT_PROFILE_CORE = 0001h 
                              C SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0002h 
                              C SDL_GL_CONTEXT_PROFILE_ES = 0004h 
                              C 
                              C SDL_GLcontextFlag typedef DWORD
                              C SDL_GL_CONTEXT_DEBUG_FLAG = 0001h 
                              C SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0002h 
                              C SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0004h 
                              C SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0008h 
                              C 
                              C SDL_GLcontextReleaseFlag typedef DWORD
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0000h 
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0001h 
                              C 
                              C SDL_GLContextResetNotification typedef DWORD
                              C SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0000h 
                              C SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0001h 
                              C 
                              C SDL_GetNumVideoDrivers proto  
                              C SDL_GetVideoDriver proto  :DWORD
                              C SDL_VideoInit proto  :ptr SBYTE
                              C SDL_VideoQuit proto  
                              C SDL_GetCurrentVideoDriver proto  
                              C SDL_GetNumVideoDisplays proto  
                              C SDL_GetDisplayName proto  :DWORD
                              C SDL_GetDisplayBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayUsableBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayDPI proto  :DWORD, :ptr REAL4, :ptr REAL4, :ptr REAL4
                              C SDL_GetDisplayOrientation proto  :DWORD
                              C SDL_GetNumDisplayModes proto  :DWORD
                              C SDL_GetDisplayMode proto  :DWORD, :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetDesktopDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetCurrentDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetClosestDisplayMode proto  :DWORD, :ptr SDL_DisplayMode, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayIndex proto  :ptr SDL_Window
                              C SDL_SetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowPixelFormat proto  :ptr SDL_Window
                              C SDL_CreateWindow proto  :ptr SBYTE, :DWORD, :DWORD, :DWORD, :DWORD, :Uint32
                              C SDL_CreateWindowFrom proto  :ptr 
                              C SDL_GetWindowID proto  :ptr SDL_Window
                              C SDL_GetWindowFromID proto  :Uint32
                              C SDL_GetWindowFlags proto  :ptr SDL_Window
                              C SDL_SetWindowTitle proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_GetWindowTitle proto  :ptr SDL_Window
                              C SDL_SetWindowIcon proto  :ptr SDL_Window, :ptr SDL_Surface
                              C SDL_SetWindowData proto  :ptr SDL_Window, :ptr SBYTE, :ptr 
                              C SDL_GetWindowData proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_SetWindowPosition proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowPosition proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GetWindowBordersSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMinimumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMinimumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMaximumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMaximumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowBordered proto  :ptr SDL_Window, :SDL_bool
                              C SDL_SetWindowResizable proto  :ptr SDL_Window, :SDL_bool
                              C SDL_ShowWindow proto  :ptr SDL_Window
                              C SDL_HideWindow proto  :ptr SDL_Window
                              C SDL_RaiseWindow proto  :ptr SDL_Window
                              C SDL_MaximizeWindow proto  :ptr SDL_Window
                              C SDL_MinimizeWindow proto  :ptr SDL_Window
                              C SDL_RestoreWindow proto  :ptr SDL_Window
                              C SDL_SetWindowFullscreen proto  :ptr SDL_Window, :Uint32
                              C SDL_GetWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurfaceRects proto  :ptr SDL_Window, :ptr SDL_Rect, :DWORD
                              C SDL_SetWindowGrab proto  :ptr SDL_Window, :SDL_bool
                              C SDL_GetWindowGrab proto  :ptr SDL_Window
                              C SDL_GetGrabbedWindow proto  
                              C SDL_SetWindowBrightness proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowBrightness proto  :ptr SDL_Window
                              C SDL_SetWindowOpacity proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowOpacity proto  :ptr SDL_Window, :ptr REAL4
                              C SDL_SetWindowModalFor proto  :ptr SDL_Window, :ptr SDL_Window
                              C SDL_SetWindowInputFocus proto  :ptr SDL_Window
                              C SDL_SetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_GetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_HitTestResult typedef DWORD
                              C SDL_HITTEST_NORMAL = 0
                              C SDL_HITTEST_DRAGGABLE = 1
                              C SDL_HITTEST_RESIZE_TOPLEFT = 2
                              C SDL_HITTEST_RESIZE_TOP = 3
                              C SDL_HITTEST_RESIZE_TOPRIGHT = 4
                              C SDL_HITTEST_RESIZE_RIGHT = 5
                              C SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6
                              C SDL_HITTEST_RESIZE_BOTTOM = 7
                              C SDL_HITTEST_RESIZE_BOTTOMLEFT = 8
                              C SDL_HITTEST_RESIZE_LEFT = 9
                              C 
                              C proto_SDL_HitTest typedef proto  :ptr SDL_Window,:ptr SDL_Point,:ptr 
                              C SDL_HitTest typedef ptr proto_SDL_HitTest
                              C SDL_SetWindowHitTest proto  :ptr SDL_Window, :SDL_HitTest, :ptr 
                              C SDL_DestroyWindow proto  :ptr SDL_Window
                              C SDL_IsScreenSaverEnabled proto  
                              C SDL_EnableScreenSaver proto  
                              C SDL_DisableScreenSaver proto  
                              C SDL_GL_LoadLibrary proto  :ptr SBYTE
                              C SDL_GL_GetProcAddress proto  :ptr SBYTE
                              C SDL_GL_UnloadLibrary proto  
                              C SDL_GL_ExtensionSupported proto  :ptr SBYTE
                              C SDL_GL_ResetAttributes proto  
                              C SDL_GL_SetAttribute proto  :SDL_GLattr, :DWORD
                              C SDL_GL_GetAttribute proto  :SDL_GLattr, :ptr DWORD
                              C SDL_GL_CreateContext proto  :ptr SDL_Window
                              C SDL_GL_MakeCurrent proto  :ptr SDL_Window, :SDL_GLContext
                              C SDL_GL_GetCurrentWindow proto  
                              C SDL_GL_GetCurrentContext proto  
                              C SDL_GL_GetDrawableSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GL_SetSwapInterval proto  :DWORD
                              C SDL_GL_GetSwapInterval proto  
                              C SDL_GL_SwapWindow proto  :ptr SDL_Window
                              C SDL_GL_DeleteContext proto  :SDL_GLContext
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C ;SDL_Cursor typedef SDL_Cursor
                              C 
                              C SDL_SystemCursor typedef DWORD
 = 0                          C SDL_SYSTEM_CURSOR_ARROW = 0
 = 1                          C SDL_SYSTEM_CURSOR_IBEAM = 1
 = 2                          C SDL_SYSTEM_CURSOR_WAIT = 2
 = 3                          C SDL_SYSTEM_CURSOR_CROSSHAIR = 3
 = 4                          C SDL_SYSTEM_CURSOR_WAITARROW = 4
 = 5                          C SDL_SYSTEM_CURSOR_SIZENWSE = 5
 = 6                          C SDL_SYSTEM_CURSOR_SIZENESW = 6
 = 7                          C SDL_SYSTEM_CURSOR_SIZEWE = 7
 = 8                          C SDL_SYSTEM_CURSOR_SIZENS = 8
 = 9                          C SDL_SYSTEM_CURSOR_SIZEALL = 9
 = A                          C SDL_SYSTEM_CURSOR_NO = 10
 = B                          C SDL_SYSTEM_CURSOR_HAND = 11
 = C                          C SDL_NUM_SYSTEM_CURSORS = 12
                              C 
                              C SDL_MouseWheelDirection typedef DWORD
 = 0                          C SDL_MOUSEWHEEL_NORMAL = 0
 = 1                          C SDL_MOUSEWHEEL_FLIPPED = 1
                              C 
                              C SDL_GetMouseFocus proto  
                              C SDL_GetMouseState proto  :ptr DWORD, :ptr DWORD
                              C SDL_GetGlobalMouseState proto  :ptr DWORD, :ptr DWORD
                              C SDL_GetRelativeMouseState proto  :ptr DWORD, :ptr DWORD
                              C SDL_WarpMouseInWindow proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_WarpMouseGlobal proto  :DWORD, :DWORD
                              C SDL_SetRelativeMouseMode proto  :SDL_bool
                              C SDL_CaptureMouse proto  :SDL_bool
                              C SDL_GetRelativeMouseMode proto  
                              C SDL_CreateCursor proto  :ptr Uint8, :ptr Uint8, :DWORD, :DWORD, :DWORD, :DWORD
                              C SDL_CreateColorCursor proto  :ptr SDL_Surface, :DWORD, :DWORD
                              C SDL_CreateSystemCursor proto  :SDL_SystemCursor
                              C SDL_SetCursor proto  :ptr SDL_Cursor
                              C SDL_GetCursor proto  
                              C SDL_GetDefaultCursor proto  
                              C SDL_FreeCursor proto  :ptr SDL_Cursor
                              C SDL_ShowCursor proto  :DWORD
                              C SDL_BUTTON macro X
 >                            C 	exitm <( 1  shl  ( ( X ) - 1 ) ) >
 >                            C 	endm
 = 1                          C SDL_BUTTON_LEFT	EQU	1
 = 2                          C SDL_BUTTON_MIDDLE	EQU	2
 = 3                          C SDL_BUTTON_RIGHT	EQU	3
 = 4                          C SDL_BUTTON_X1	EQU	4
 = 5                          C SDL_BUTTON_X2	EQU	5
 = SDL_BUTTON ( SDL_BUTTON_L  C SDL_BUTTON_LMASK	EQU	<SDL_BUTTON ( SDL_BUTTON_LEFT )>
   EFT )                        
 = SDL_BUTTON ( SDL_BUTTON_M  C SDL_BUTTON_MMASK	EQU	<SDL_BUTTON ( SDL_BUTTON_MIDDLE )>
   IDDLE )                      
 = SDL_BUTTON ( SDL_BUTTON_R  C SDL_BUTTON_RMASK	EQU	<SDL_BUTTON ( SDL_BUTTON_RIGHT )>
   IGHT )                       
 = SDL_BUTTON ( SDL_BUTTON_X  C SDL_BUTTON_X1MASK	EQU	<SDL_BUTTON ( SDL_BUTTON_X1 )>
   1 )                          
 = SDL_BUTTON ( SDL_BUTTON_X  C SDL_BUTTON_X2MASK	EQU	<SDL_BUTTON ( SDL_BUTTON_X2 )>
   2 )                          
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C 	;include close_code.inc
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C ;	include SDL_joystick.inc
                              C ;	include SDL_gamecontroller.inc
                              C ;	include SDL_quit.inc
                              C ;	include SDL_gesture.inc
                              C ;	include SDL_touch.inc
                              C ;	include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
 = 0                          C SDL_RELEASED	EQU	0
 = 1                          C SDL_PRESSED	EQU	1
                              C SDL_EventType typedef DWORD
 = 0                          C SDL_FIRSTEVENT = 0 
 = 100                        C SDL_EVENTQUIT = 100h 
 = 101                        C SDL_APP_TERMINATING = 101h
 = 102                        C SDL_APP_LOWMEMORY = 102h
 = 103                        C SDL_APP_WILLENTERBACKGROUND = 103h
 = 104                        C SDL_APP_DIDENTERBACKGROUND = 104h
 = 105                        C SDL_APP_WILLENTERFOREGROUND = 105h
 = 106                        C SDL_APP_DIDENTERFOREGROUND = 106h
 = 150                        C SDL_DISPLAYEVENT = 150h 
 = 200                        C SDL_WINDOWEVENT = 200h 
 = 201                        C SDL_SYSWMEVENT = 201h
 = 300                        C SDL_KEYDOWN = 300h 
 = 301                        C SDL_KEYUP = 301h
 = 302                        C SDL_TEXTEDITING = 302h
 = 303                        C SDL_TEXTINPUT = 303h
 = 304                        C SDL_KEYMAPCHANGED = 304h
 = 400                        C SDL_MOUSEMOTION = 400h 
 = 401                        C SDL_MOUSEBUTTONDOWN = 401h
 = 402                        C SDL_MOUSEBUTTONUP = 402h
 = 403                        C SDL_MOUSEWHEEL = 403h
 = 600                        C SDL_JOYAXISMOTION = 600h 
 = 601                        C SDL_JOYBALLMOTION = 601h
 = 602                        C SDL_JOYHATMOTION = 602h
 = 603                        C SDL_JOYBUTTONDOWN = 603h
 = 604                        C SDL_JOYBUTTONUP = 604h
 = 605                        C SDL_JOYDEVICEADDED = 605h
 = 606                        C SDL_JOYDEVICEREMOVED = 606h
 = 650                        C SDL_CONTROLLERAXISMOTION = 650h 
 = 651                        C SDL_CONTROLLERBUTTONDOWN = 651h
 = 652                        C SDL_CONTROLLERBUTTONUP = 652h
 = 653                        C SDL_CONTROLLERDEVICEADDED = 653h
 = 654                        C SDL_CONTROLLERDEVICEREMOVED = 654h
 = 655                        C SDL_CONTROLLERDEVICEREMAPPED = 655h
 = 700                        C SDL_FINGERDOWN = 700h 
 = 701                        C SDL_FINGERUP = 701h
 = 702                        C SDL_FINGERMOTION = 702h
 = 800                        C SDL_DOLLARGESTURE = 800h 
 = 801                        C SDL_DOLLARRECORD = 801h
 = 802                        C SDL_MULTIGESTURE = 802h
 = 900                        C SDL_CLIPBOARDUPDATE = 900h 
 = 1000                       C SDL_DROPFILE = 1000h 
 = 1001                       C SDL_DROPTEXT = 1001h
 = 1002                       C SDL_DROPBEGIN = 1002h
 = 1003                       C SDL_DROPCOMPLETE = 1003h
 = 1100                       C SDL_AUDIODEVICEADDED = 1100h 
 = 1101                       C SDL_AUDIODEVICEREMOVED = 1101h
 = 1200                       C SDL_SENSORUPDATE = 1200h 
 = 2000                       C SDL_RENDER_TARGETS_RESET = 2000h 
 = 2001                       C SDL_RENDER_DEVICE_RESET = 2001h
 = 8000                       C SDL_USEREVENT = 8000h 
 = FFFF                       C SDL_LASTEVENT = 0FFFFh 
                              C 
00000000                      C SDL_CommonEvent	struct 
00000000                      C 	type_		Uint32	?
00000004                      C 	timestamp	Uint32	?
00000008                      C SDL_CommonEvent	ends
                              C 
00000000                      C SDL_SDisplayEvent	struct 
00000000                      C type_		Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C display		Uint32	?
0000000C                      C event		Uint8	?
0000000D                      C padding1	Uint8	?
0000000E                      C padding2	Uint8	?
0000000F                      C padding3	Uint8	?
00000010                      C dwData1		Sint32	?
00000014                      C SDL_SDisplayEvent	ends
                              C 
00000000                      C SDL_SWindowEvent	struct 
00000000                      C type_	Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C windowID	Uint32	?
0000000C                      C event		Uint8	?
0000000D                      C padding1	Uint8	?
0000000E                      C padding2	Uint8	?
0000000F                      C padding3	Uint8	?
00000010                      C data1		Sint32	?
00000014                      C data2		Sint32	?
00000018                      C SDL_SWindowEvent	ends
                              C 
00000000                      C SDL_KeyboardEvent	struct 
00000000                      C type_		Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C windowID	Uint32	?
0000000C                      C state		Uint8	?
0000000D                      C repeat_		Uint8	?
0000000E                      C padding2	Uint8	?
0000000F                      C padding3	Uint8	?
00000010                      C keysym		SDL_Keysym	<>
00000020                      C SDL_KeyboardEvent	ends
                              C 
 = 20                         C SDL_TEXTEDITINGEVENT_TEXT_SIZE	EQU	32
00000000                      C SDL_TextEditingEvent	struct 
00000000                      C type_		Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C windowID	Uint32	?
0000000C                      C text		SBYTE SDL_TEXTEDITINGEVENT_TEXT_SIZE dup (?)
0000002C                      C start		Sint32	?
00000030                      C length_		Sint32	?
00000034                      C SDL_TextEditingEvent	ends
                              C 
 = 20                         C SDL_TEXTINPUTEVENT_TEXT_SIZE	EQU	32
00000000                      C SDL_TextInputEvent	struct 
00000000                      C type_		Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C windowID	Uint32	?
0000000C                      C text		SBYTE SDL_TEXTINPUTEVENT_TEXT_SIZE dup (?)
0000002C                      C SDL_TextInputEvent	ends
                              C 
00000000                      C SDL_MouseMotionEvent	struct 
00000000                      C type_		Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C windowID	Uint32	?
0000000C                      C which		Uint32	?
00000010                      C state		Uint32	?
00000014                      C x			Sint32	?
00000018                      C y			Sint32	?
0000001C                      C xrel		Sint32	?
00000020                      C yrel		Sint32	?
00000024                      C SDL_MouseMotionEvent	ends
                              C 
00000000                      C SDL_MouseButtonEvent	struct 
00000000                      C type_		Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C windowID	Uint32	?
0000000C                      C which		Uint32	?
00000010                      C button		Uint8	?
00000011                      C state		Uint8	?
00000012                      C clicks		Uint8	?
00000013                      C padding1	Uint8	?
00000014                      C x			Sint32	?
00000018                      C y			Sint32	?
0000001C                      C SDL_MouseButtonEvent	ends
                              C 
00000000                      C SDL_MouseWheelEvent	struct 
00000000                      C type_		Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C windowID	Uint32	?
0000000C                      C which	Uint32	?
00000010                      C x	Sint32	?
00000014                      C y	Sint32	?
00000018                      C direction	Uint32	?
0000001C                      C SDL_MouseWheelEvent	ends
                              C ;
                              C ;SDL_JoyAxisEvent	struct 
                              C ;	type_	Uint32	?
                              C ;	timestamp	Uint32	?
                              C ;	which	SDL_JoystickID	?
                              C ;	axis	Uint8	?
                              C ;	padding1	Uint8	?
                              C ;	padding2	Uint8	?
                              C ;	padding3	Uint8	?
                              C ;	value	Sint16	?
                              C ;	padding4	Uint16	?
                              C ;SDL_JoyAxisEvent	ends
                              C ;
                              C ;SDL_JoyBallEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;which	SDL_JoystickID	?
                              C ;ball	Uint8	?
                              C ;padding1	Uint8	?
                              C ;padding2	Uint8	?
                              C ;padding3	Uint8	?
                              C ;xrel	Sint16	?
                              C ;yrel	Sint16	?
                              C ;SDL_JoyBallEvent	ends
                              C ;
                              C ;SDL_JoyHatEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;which	SDL_JoystickID	?
                              C ;hat	Uint8	?
                              C ;value	Uint8	?
                              C ;padding1	Uint8	?
                              C ;padding2	Uint8	?
                              C ;SDL_JoyHatEvent	ends
                              C ;
                              C ;SDL_JoyButtonEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;which	SDL_JoystickID	?
                              C ;button	Uint8	?
                              C ;state	Uint8	?
                              C ;padding1	Uint8	?
                              C ;padding2	Uint8	?
                              C ;SDL_JoyButtonEvent	ends
                              C ;
                              C ;SDL_JoyDeviceEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;which	Sint32	?
                              C ;SDL_JoyDeviceEvent	ends
                              C ;
                              C ;SDL_ControllerAxisEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;which	SDL_JoystickID	?
                              C ;axis	Uint8	?
                              C ;padding1	Uint8	?
                              C ;padding2	Uint8	?
                              C ;padding3	Uint8	?
                              C ;value	Sint16	?
                              C ;padding4	Uint16	?
                              C ;SDL_ControllerAxisEvent	ends
                              C ;
                              C ;SDL_ControllerButtonEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;which	SDL_JoystickID	?
                              C ;button	Uint8	?
                              C ;state	Uint8	?
                              C ;padding1	Uint8	?
                              C ;padding2	Uint8	?
                              C ;SDL_ControllerButtonEvent	ends
                              C ;
                              C ;SDL_ControllerDeviceEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;which	Sint32	?
                              C ;SDL_ControllerDeviceEvent	ends
                              C 
00000000                      C SDL_AudioDeviceEvent	struct 
00000000                      C type_	Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C which	Uint32	?
0000000C                      C iscapture	Uint8	?
0000000D                      C padding1	Uint8	?
0000000E                      C padding2	Uint8	?
0000000F                      C padding3	Uint8	?
00000010                      C SDL_AudioDeviceEvent	ends
                              C ;
                              C ;SDL_TouchFingerEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;touchId	SDL_TouchID	?
                              C ;fingerId	SDL_FingerID	?
                              C ;x	REAL4	?
                              C ;y	REAL4	?
                              C ;dx_	REAL4	?
                              C ;dy	REAL4	?
                              C ;pressure	REAL4	?
                              C ;windowID	Uint32	?
                              C ;SDL_TouchFingerEvent	ends
                              C ;
                              C ;SDL_MultiGestureEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;touchId	SDL_TouchID	?
                              C ;dTheta	REAL4	?
                              C ;dDist	REAL4	?
                              C ;x	REAL4	?
                              C ;y	REAL4	?
                              C ;numFingers	Uint16	?
                              C ;padding	Uint16	?
                              C ;SDL_MultiGestureEvent	ends
                              C ;
                              C ;SDL_DollarGestureEvent	struct 
                              C ;type_	Uint32	?
                              C ;timestamp	Uint32	?
                              C ;touchId	SDL_TouchID	?
                              C ;gestureId	SDL_GestureID	?
                              C ;numFingers	Uint32	?
                              C ;error	REAL4	?
                              C ;x	REAL4	?
                              C ;y	REAL4	?
                              C ;SDL_DollarGestureEvent	ends
                              C 
00000000                      C SDL_DropEvent	struct 
00000000                      C type_	Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C file	DWORD	?
0000000C                      C windowID	Uint32	?
00000010                      C SDL_DropEvent	ends
                              C 
00000000                      C SDL_SensorEvent	struct 
00000000                      C type_	Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C which	Sint32	?
0000000C                      C data	REAL4 6 dup (?)
00000024                      C SDL_SensorEvent	ends
                              C 
00000000                      C SDL_QuitEvent	struct 
00000000                      C type_	Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C SDL_QuitEvent	ends
                              C 
00000000                      C SDL_OSEvent	struct 
00000000                      C type_	Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C SDL_OSEvent	ends
                              C 
00000000                      C SDL_SUserEvent	struct 
00000000                      C 	type_		Uint32	?
00000004                      C 	timestamp	Uint32	?
00000008                      C 	windowID	Uint32	?
0000000C                      C 	sCode		Sint32	?
00000010                      C 	dwData1		DWORD	?
00000014                      C 	dwData2		DWORD	?
00000018                      C SDL_SUserEvent	ends
                              C 
                              C ;SDL_SysWMmsg typedef SDL_SysWMmsg
                              C 
00000000                      C SDL_SSysWMEvent	struct 
00000000                      C type_	Uint32	?
00000004                      C timestamp	Uint32	?
00000008                      C msg	DWORD	?
0000000C                      C SDL_SSysWMEvent	ends
                              C 
00000000                      C SDL_Event	union 
00000000                      C 	type_		Uint32						?
00000000                      C 	common		SDL_CommonEvent				<>
00000000                      C 	display		SDL_SDisplayEvent			<>
00000000                      C 	window		SDL_SWindowEvent			<>
00000000                      C 	key			SDL_KeyboardEvent			<>
00000000                      C 	edit		SDL_TextEditingEvent		<>
00000000                      C 	text		SDL_TextInputEvent			<>
00000000                      C 	motion		SDL_MouseMotionEvent		<>
00000000                      C 	button		SDL_MouseButtonEvent		<>
00000000                      C 	wheel		SDL_MouseWheelEvent			<>
                              C 	;jaxis		SDL_JoyAxisEvent			<>
                              C 	;jball		SDL_JoyBallEvent			<>
                              C 	;jhat		SDL_JoyHatEvent				<>
                              C 	;jbutton	SDL_JoyButtonEvent			<>
                              C 	;jdevice	SDL_JoyDeviceEvent			<>
                              C 	;caxis		SDL_ControllerAxisEvent		<>
                              C 	;cbutton	SDL_ControllerButtonEvent	<>
                              C 	;cdevice	SDL_ControllerDeviceEvent	<>
00000000                      C 	adevice		SDL_AudioDeviceEvent		<>
00000000                      C 	sensor		SDL_SensorEvent				<>
00000000                      C 	quit		SDL_QuitEvent				<>
00000000                      C 	user		SDL_SUserEvent				<>
00000000                      C 	syswm		SDL_SSysWMEvent				<>
                              C 	;tfinger	SDL_TouchFingerEvent		<>
                              C 	;mgesture	SDL_MultiGestureEvent		<>
                              C 	;dgesture	SDL_DollarGestureEvent		<>
00000000                      C 	drop		SDL_DropEvent				<>
00000000                      C 	padding		Uint8 				56 dup (?)
00000038                      C SDL_Event	ends
                              C 
                              C ;SDL_COMPILE_TIME_ASSERT proto  :SDL_Event, :sizeof :==
                              C SDL_PumpEvents proto  
                              C SDL_eventaction typedef DWORD
 = 0                          C SDL_ADDEVENT = 0
 = 1                          C SDL_PEEKEVENT = 1
 = 2                          C SDL_GETEVENT = 2
                              C 
                              C SDL_PeepEvents proto  :ptr SDL_Event, :DWORD, :SDL_eventaction, :Uint32, :Uint32
                              C SDL_HasEvent proto  :Uint32
                              C SDL_HasEvents proto  :Uint32, :Uint32
                              C SDL_FlushEvent proto  :Uint32
                              C SDL_FlushEvents proto  :Uint32, :Uint32
                              C SDL_PollEvent proto  :ptr SDL_Event
                              C SDL_WaitEvent proto  :ptr SDL_Event
                              C SDL_WaitEventTimeout proto  :ptr SDL_Event, :DWORD
                              C SDL_PushEvent proto  :ptr SDL_Event
                              C proto_SDL_EventFilter typedef proto  :ptr ,:ptr SDL_Event
                              C SDL_EventFilter typedef ptr proto_SDL_EventFilter
                              C SDL_SetEventFilter proto  :SDL_EventFilter, :ptr 
                              C SDL_GetEventFilter proto  :ptr SDL_EventFilter, :ptr ptr 
                              C SDL_AddEventWatch proto  :SDL_EventFilter, :ptr 
                              C SDL_DelEventWatch proto  :SDL_EventFilter, :ptr 
                              C SDL_FilterEvents proto  :SDL_EventFilter, :ptr 
 = FFFFFFFF                   C SDL_QUERY	EQU	- 1
 = 0                          C SDL_IGNORE	EQU	0
 = 0                          C SDL_DISABLE	EQU	0
 = 1                          C SDL_ENABLE	EQU	1
                              C SDL_EventState proto  :Uint32, :DWORD
                              C SDL_GetEventState macro type
 >                            C 	exitm <SDL_EventState ( type , SDL_QUERY ) >
 >                            C 	endm
                              C SDL_RegisterEvents proto  :DWORD
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C ;include SDL_filesystem.inc
                              C ;include SDL_gamecontroller.inc
                              C ;include SDL_haptic.inc
                              C ;include SDL_hints.inc
                              C ;include SDL_joystick.inc
                              C ;include SDL_loadso.inc
                              C ;include SDL_log.inc
                              C ;include SDL_messagebox.inc
                              C ;include SDL_metal.inc
                              C ;include SDL_mutex.inc
                              C ;include SDL_power.inc
                              C include SDL_render.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_render.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_render.h
                              C 
                              C ifndef SDL_render_h_
 =                            C SDL_render_h_	EQU	<>
                              C 	;include SDL_stdinc.inc
                              C 	include SDL_rect.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_rect.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_rect.h
                              C 
                              C ifndef SDL_rect_h_
                              C SDL_rect_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C ;	include SDL_pixels.inc
                              C 	include SDL_rwops.inc
                              C 	
                              C SDL_Point	struct 
                              C x	DWORD	?
                              C y	DWORD	?
                              C SDL_Point	ends
                              C 
                              C SDL_FPoint	struct 
                              C x	REAL4	?
                              C y	REAL4	?
                              C SDL_FPoint	ends
                              C 
                              C SDL_Rect	struct 
                              C x	DWORD	?
                              C y	DWORD	?
                              C w	DWORD	?
                              C h	DWORD	?
                              C SDL_Rect	ends
                              C 
                              C SDL_FRect	struct 
                              C x	REAL4	?
                              C y	REAL4	?
                              C w	REAL4	?
                              C h	REAL4	?
                              C SDL_FRect	ends
                              C 
                              C ;SDL_PointInRect proto
                              C ;;{
                              C ;return proto  :-> :ptr -> :ptr -> :ptr ->
                              C ;;}
                              C ;SDL_RectEmpty proto  :ptr SDL_Rect
                              C ;;{
                              C ;return proto  :! :<= :<=
                              C ;;}
                              C ;SDL_RectEquals proto  :ptr SDL_Rect, :ptr SDL_Rect
                              C ;;{
                              C ;return proto  :ptr ptr -> :ptr -> :ptr -> :ptr ->
                              C ;;}
                              C externdef SDL_HasIntersection:proto
                              C externdef SDL_IntersectRect:proto
                              C externdef SDL_UnionRect:proto
                              C externdef SDL_EnclosePoints:proto
                              C externdef SDL_IntersectRectAndLine:proto
                              C 
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C 	include SDL_video.inc
                              C 
                              C ifndef SDL_video_h_
                              C SDL_video_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_pixels.inc
                              C 	include SDL_rect.inc
                              C 	include SDL_surface.inc
                              C ;	include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_DisplayMode	struct 
                              C format	Uint32	?
                              C w	DWORD	?
                              C h	DWORD	?
                              C refresh_rate	DWORD	?
                              C driverdata	DWORD	?
                              C SDL_DisplayMode	ends
                              C 
                              C ;SDL_Window typedef SDL_Window
                              C 
                              C SDL_WindowFlags typedef DWORD
                              C SDL_WINDOW_FULLSCREEN = 00000001h 
                              C SDL_WINDOW_OPENGL = 00000002h 
                              C SDL_WINDOW_SHOWN = 00000004h 
                              C SDL_WINDOW_HIDDEN = 00000008h 
                              C SDL_WINDOW_BORDERLESS = 00000010h 
                              C SDL_WINDOW_RESIZABLE = 00000020h 
                              C SDL_WINDOW_MINIMIZED = 00000040h 
                              C SDL_WINDOW_MAXIMIZED = 00000080h 
                              C SDL_WINDOW_INPUT_GRABBED = 00000100h 
                              C SDL_WINDOW_INPUT_FOCUS = 00000200h 
                              C SDL_WINDOW_MOUSE_FOCUS = 00000400h 
                              C SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN  or  00001000h ) 
                              C SDL_WINDOW_FOREIGN = 00000800h 
                              C SDL_WINDOW_ALLOW_HIGHDPI = 00002000h 
                              C SDL_WINDOW_MOUSE_CAPTURE = 00004000h 
                              C SDL_WINDOW_ALWAYS_ON_TOP = 00008000h 
                              C SDL_WINDOW_SKIP_TASKBAR = 00010000h 
                              C SDL_WINDOW_UTILITY = 00020000h 
                              C SDL_WINDOW_TOOLTIP = 00040000h 
                              C SDL_WINDOW_POPUP_MENU = 00080000h 
                              C SDL_WINDOW_VULKAN = 10000000h 
                              C 
                              C SDL_WINDOWPOS_UNDEFINED_MASK	EQU	1FFF0000h
                              C SDL_WINDOWPOS_UNDEFINED_DISPLAY macro X
                              C 	exitm <( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( X ) ) >
                              C 	endm
                              C SDL_WINDOWPOS_UNDEFINED	EQU	SDL_WINDOWPOS_UNDEFINED_DISPLAY ( 0 )
                              C SDL_WINDOWPOS_ISUNDEFINED macro X
                              C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_UNDEFINED_MASK ) >
                              C 	endm
                              C SDL_WINDOWPOS_CENTERED_MASK	EQU	2FFF0000h
                              C SDL_WINDOWPOS_CENTERED_DISPLAY macro X
                              C 	exitm <( SDL_WINDOWPOS_CENTERED_MASK  or  ( X ) ) >
                              C 	endm
                              C SDL_WINDOWPOS_CENTERED	EQU	SDL_WINDOWPOS_CENTERED_DISPLAY ( 0 )
                              C SDL_WINDOWPOS_ISCENTERED macro X
                              C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_CENTERED_MASK ) >
                              C 	endm
                              C SDL_WindowEventID typedef DWORD
                              C SDL_WINDOWEVENT_NONE = 0
                              C SDL_WINDOWEVENT_SHOWN = 1
                              C SDL_WINDOWEVENT_HIDDEN = 2
                              C SDL_WINDOWEVENT_EXPOSED = 3
                              C SDL_WINDOWEVENT_MOVED = 4
                              C SDL_WINDOWEVENT_RESIZED = 5
                              C SDL_WINDOWEVENT_SIZE_CHANGED = 6
                              C SDL_WINDOWEVENT_MINIMIZED = 7
                              C SDL_WINDOWEVENT_MAXIMIZED = 8
                              C SDL_WINDOWEVENT_RESTORED = 9
                              C SDL_WINDOWEVENT_ENTER = 10
                              C SDL_WINDOWEVENT_LEAVE = 11
                              C SDL_WINDOWEVENT_FOCUS_GAINED = 12
                              C SDL_WINDOWEVENT_FOCUS_LOST = 13
                              C SDL_WINDOWEVENT_CLOSE = 14
                              C SDL_WINDOWEVENT_TAKE_FOCUS = 15
                              C SDL_WINDOWEVENT_HIT_TEST = 16
                              C 
                              C SDL_DisplayEventID typedef DWORD
                              C SDL_DISPLAYEVENT_NONE = 0
                              C SDL_DISPLAYEVENT_ORIENTATION = 1
                              C 
                              C SDL_DisplayOrientation typedef DWORD
                              C SDL_ORIENTATION_UNKNOWN = 0
                              C SDL_ORIENTATION_LANDSCAPE = 1
                              C SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2
                              C SDL_ORIENTATION_PORTRAIT = 3
                              C SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
                              C 
                              C SDL_GLContext typedef ptr 
                              C SDL_GLattr typedef DWORD
                              C SDL_GL_RED_SIZE = 0
                              C SDL_GL_GREEN_SIZE = 1
                              C SDL_GL_BLUE_SIZE = 2
                              C SDL_GL_ALPHA_SIZE = 3
                              C SDL_GL_BUFFER_SIZE = 4
                              C SDL_GL_DOUBLEBUFFER = 5
                              C SDL_GL_DEPTH_SIZE = 6
                              C SDL_GL_STENCIL_SIZE = 7
                              C SDL_GL_ACCUM_RED_SIZE = 8
                              C SDL_GL_ACCUM_GREEN_SIZE = 9
                              C SDL_GL_ACCUM_BLUE_SIZE = 10
                              C SDL_GL_ACCUM_ALPHA_SIZE = 11
                              C SDL_GL_STEREO = 12
                              C SDL_GL_MULTISAMPLEBUFFERS = 13
                              C SDL_GL_MULTISAMPLESAMPLES = 14
                              C SDL_GL_ACCELERATED_VISUAL = 15
                              C SDL_GL_RETAINED_BACKING = 16
                              C SDL_GL_CONTEXT_MAJOR_VERSION = 17
                              C SDL_GL_CONTEXT_MINOR_VERSION = 18
                              C SDL_GL_CONTEXT_EGL = 19
                              C SDL_GL_CONTEXT_FLAGS = 20
                              C SDL_GL_CONTEXT_PROFILE_MASK = 21
                              C SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22
                              C SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24
                              C SDL_GL_CONTEXT_RESET_NOTIFICATION = 25
                              C SDL_GL_CONTEXT_NO_ERROR = 26
                              C 
                              C SDL_GLprofile typedef DWORD
                              C SDL_GL_CONTEXT_PROFILE_CORE = 0001h 
                              C SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0002h 
                              C SDL_GL_CONTEXT_PROFILE_ES = 0004h 
                              C 
                              C SDL_GLcontextFlag typedef DWORD
                              C SDL_GL_CONTEXT_DEBUG_FLAG = 0001h 
                              C SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0002h 
                              C SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0004h 
                              C SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0008h 
                              C 
                              C SDL_GLcontextReleaseFlag typedef DWORD
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0000h 
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0001h 
                              C 
                              C SDL_GLContextResetNotification typedef DWORD
                              C SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0000h 
                              C SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0001h 
                              C 
                              C SDL_GetNumVideoDrivers proto  
                              C SDL_GetVideoDriver proto  :DWORD
                              C SDL_VideoInit proto  :ptr SBYTE
                              C SDL_VideoQuit proto  
                              C SDL_GetCurrentVideoDriver proto  
                              C SDL_GetNumVideoDisplays proto  
                              C SDL_GetDisplayName proto  :DWORD
                              C SDL_GetDisplayBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayUsableBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayDPI proto  :DWORD, :ptr REAL4, :ptr REAL4, :ptr REAL4
                              C SDL_GetDisplayOrientation proto  :DWORD
                              C SDL_GetNumDisplayModes proto  :DWORD
                              C SDL_GetDisplayMode proto  :DWORD, :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetDesktopDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetCurrentDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetClosestDisplayMode proto  :DWORD, :ptr SDL_DisplayMode, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayIndex proto  :ptr SDL_Window
                              C SDL_SetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowPixelFormat proto  :ptr SDL_Window
                              C SDL_CreateWindow proto  :ptr SBYTE, :DWORD, :DWORD, :DWORD, :DWORD, :Uint32
                              C SDL_CreateWindowFrom proto  :ptr 
                              C SDL_GetWindowID proto  :ptr SDL_Window
                              C SDL_GetWindowFromID proto  :Uint32
                              C SDL_GetWindowFlags proto  :ptr SDL_Window
                              C SDL_SetWindowTitle proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_GetWindowTitle proto  :ptr SDL_Window
                              C SDL_SetWindowIcon proto  :ptr SDL_Window, :ptr SDL_Surface
                              C SDL_SetWindowData proto  :ptr SDL_Window, :ptr SBYTE, :ptr 
                              C SDL_GetWindowData proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_SetWindowPosition proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowPosition proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GetWindowBordersSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMinimumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMinimumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMaximumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMaximumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowBordered proto  :ptr SDL_Window, :SDL_bool
                              C SDL_SetWindowResizable proto  :ptr SDL_Window, :SDL_bool
                              C SDL_ShowWindow proto  :ptr SDL_Window
                              C SDL_HideWindow proto  :ptr SDL_Window
                              C SDL_RaiseWindow proto  :ptr SDL_Window
                              C SDL_MaximizeWindow proto  :ptr SDL_Window
                              C SDL_MinimizeWindow proto  :ptr SDL_Window
                              C SDL_RestoreWindow proto  :ptr SDL_Window
                              C SDL_SetWindowFullscreen proto  :ptr SDL_Window, :Uint32
                              C SDL_GetWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurfaceRects proto  :ptr SDL_Window, :ptr SDL_Rect, :DWORD
                              C SDL_SetWindowGrab proto  :ptr SDL_Window, :SDL_bool
                              C SDL_GetWindowGrab proto  :ptr SDL_Window
                              C SDL_GetGrabbedWindow proto  
                              C SDL_SetWindowBrightness proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowBrightness proto  :ptr SDL_Window
                              C SDL_SetWindowOpacity proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowOpacity proto  :ptr SDL_Window, :ptr REAL4
                              C SDL_SetWindowModalFor proto  :ptr SDL_Window, :ptr SDL_Window
                              C SDL_SetWindowInputFocus proto  :ptr SDL_Window
                              C SDL_SetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_GetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_HitTestResult typedef DWORD
                              C SDL_HITTEST_NORMAL = 0
                              C SDL_HITTEST_DRAGGABLE = 1
                              C SDL_HITTEST_RESIZE_TOPLEFT = 2
                              C SDL_HITTEST_RESIZE_TOP = 3
                              C SDL_HITTEST_RESIZE_TOPRIGHT = 4
                              C SDL_HITTEST_RESIZE_RIGHT = 5
                              C SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6
                              C SDL_HITTEST_RESIZE_BOTTOM = 7
                              C SDL_HITTEST_RESIZE_BOTTOMLEFT = 8
                              C SDL_HITTEST_RESIZE_LEFT = 9
                              C 
                              C proto_SDL_HitTest typedef proto  :ptr SDL_Window,:ptr SDL_Point,:ptr 
                              C SDL_HitTest typedef ptr proto_SDL_HitTest
                              C SDL_SetWindowHitTest proto  :ptr SDL_Window, :SDL_HitTest, :ptr 
                              C SDL_DestroyWindow proto  :ptr SDL_Window
                              C SDL_IsScreenSaverEnabled proto  
                              C SDL_EnableScreenSaver proto  
                              C SDL_DisableScreenSaver proto  
                              C SDL_GL_LoadLibrary proto  :ptr SBYTE
                              C SDL_GL_GetProcAddress proto  :ptr SBYTE
                              C SDL_GL_UnloadLibrary proto  
                              C SDL_GL_ExtensionSupported proto  :ptr SBYTE
                              C SDL_GL_ResetAttributes proto  
                              C SDL_GL_SetAttribute proto  :SDL_GLattr, :DWORD
                              C SDL_GL_GetAttribute proto  :SDL_GLattr, :ptr DWORD
                              C SDL_GL_CreateContext proto  :ptr SDL_Window
                              C SDL_GL_MakeCurrent proto  :ptr SDL_Window, :SDL_GLContext
                              C SDL_GL_GetCurrentWindow proto  
                              C SDL_GL_GetCurrentContext proto  
                              C SDL_GL_GetDrawableSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GL_SetSwapInterval proto  :DWORD
                              C SDL_GL_GetSwapInterval proto  
                              C SDL_GL_SwapWindow proto  :ptr SDL_Window
                              C SDL_GL_DeleteContext proto  :SDL_GLContext
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_RendererFlags typedef DWORD
 = 1                          C SDL_RENDERER_SOFTWARE = 00000001h 
 = 2                          C SDL_RENDERER_ACCELERATED = 00000002h 
 = 4                          C SDL_RENDERER_PRESENTVSYNC = 00000004h 
 = 8                          C SDL_RENDERER_TARGETTEXTURE = 00000008h 
                              C 
00000000                      C SDL_RendererInfo	struct 
00000000                      C name_	DWORD	?
00000004                      C flags	Uint32	?
00000008                      C num_texture_formats	Uint32	?
0000000C                      C texture_formats	Uint32 16 dup (?)
0000004C                      C max_texture_width	DWORD	?
00000050                      C max_texture_height	DWORD	?
00000054                      C SDL_RendererInfo	ends
                              C 
                              C SDL_ScaleMode typedef DWORD
 = 0                          C SDL_ScaleModeNearest = 0
 = 1                          C SDL_ScaleModeLinear = 1
 = 2                          C SDL_ScaleModeBest = 2
                              C 
                              C SDL_TextureAccess typedef DWORD
 = 0                          C SDL_TEXTUREACCESS_STATIC = 0
 = 1                          C SDL_TEXTUREACCESS_STREAMING = 1
 = 2                          C SDL_TEXTUREACCESS_TARGET = 2
                              C 
                              C SDL_TextureModulate typedef DWORD
 = 0                          C SDL_TEXTUREMODULATE_NONE = 00000000h 
 = 1                          C SDL_TEXTUREMODULATE_COLOR = 00000001h 
 = 2                          C SDL_TEXTUREMODULATE_ALPHA = 00000002h 
                              C 
                              C SDL_RendererFlip typedef DWORD
 = 0                          C SDL_FLIP_NONE = 00000000h 
 = 1                          C SDL_FLIP_HORIZONTAL = 00000001h 
 = 2                          C SDL_FLIP_VERTICAL = 00000002h 
                              C 
                              C ;SDL_Renderer typedef SDL_Renderer
                              C 
                              C ;SDL_Texture typedef SDL_Texture
                              C 
                              C SDL_GetNumRenderDrivers proto  
                              C SDL_GetRenderDriverInfo proto  :DWORD, :ptr SDL_RendererInfo
                              C SDL_CreateWindowAndRenderer proto  :DWORD, :DWORD, :Uint32, :ptr ptr SDL_Window, :ptr ptr SDL_Renderer
                              C SDL_CreateRenderer proto  :ptr SDL_Window, :DWORD, :Uint32
                              C SDL_CreateSoftwareRenderer proto  :ptr SDL_Surface
                              C SDL_GetRenderer proto  :ptr SDL_Window
                              C SDL_GetRendererInfo proto  :ptr SDL_Renderer, :ptr SDL_RendererInfo
                              C SDL_GetRendererOutputSize proto  :ptr SDL_Renderer, :ptr DWORD, :ptr DWORD
                              C SDL_CreateTexture proto  :ptr SDL_Renderer, :Uint32, :DWORD, :DWORD, :DWORD
                              C SDL_CreateTextureFromSurface proto  :ptr SDL_Renderer, :ptr SDL_Surface
                              C SDL_QueryTexture proto  :ptr SDL_Texture, :ptr Uint32, :ptr DWORD, :ptr DWORD, :ptr DWORD
                              C SDL_SetTextureColorMod proto  :ptr SDL_Texture, :Uint8, :Uint8, :Uint8
                              C SDL_GetTextureColorMod proto  :ptr SDL_Texture, :ptr Uint8, :ptr Uint8, :ptr Uint8
                              C SDL_SetTextureAlphaMod proto  :ptr SDL_Texture, :Uint8
                              C SDL_GetTextureAlphaMod proto  :ptr SDL_Texture, :ptr Uint8
                              C SDL_SetTextureBlendMode proto  :ptr SDL_Texture, :SDL_BlendMode
                              C SDL_GetTextureBlendMode proto  :ptr SDL_Texture, :ptr SDL_BlendMode
                              C SDL_SetTextureScaleMode proto  :ptr SDL_Texture, :SDL_ScaleMode
                              C SDL_GetTextureScaleMode proto  :ptr SDL_Texture, :ptr SDL_ScaleMode
                              C SDL_UpdateTexture proto  :ptr SDL_Texture, :ptr SDL_Rect, :ptr , :DWORD
                              C SDL_UpdateYUVTexture proto  :ptr SDL_Texture, :ptr SDL_Rect, :ptr Uint8, :DWORD, :ptr Uint8, :DWORD, :ptr Uint8, :DWORD
                              C SDL_LockTexture proto  :ptr SDL_Texture, :ptr SDL_Rect, :ptr ptr , :ptr DWORD
                              C SDL_LockTextureToSurface proto  :ptr SDL_Texture, :ptr SDL_Rect, :ptr ptr SDL_Surface
                              C SDL_UnlockTexture proto  :ptr SDL_Texture
                              C SDL_RenderTargetSupported proto  :ptr SDL_Renderer
                              C SDL_SetRenderTarget proto  :ptr SDL_Renderer, :ptr SDL_Texture
                              C SDL_GetRenderTarget proto  :ptr SDL_Renderer
                              C SDL_RenderSetLogicalSize proto  :ptr SDL_Renderer, :DWORD, :DWORD
                              C SDL_RenderGetLogicalSize proto  :ptr SDL_Renderer, :ptr DWORD, :ptr DWORD
                              C SDL_RenderSetIntegerScale proto  :ptr SDL_Renderer, :SDL_bool
                              C SDL_RenderGetIntegerScale proto  :ptr SDL_Renderer
                              C SDL_RenderSetViewport proto  :ptr SDL_Renderer, :ptr SDL_Rect
                              C SDL_RenderGetViewport proto  :ptr SDL_Renderer, :ptr SDL_Rect
                              C SDL_RenderSetClipRect proto  :ptr SDL_Renderer, :ptr SDL_Rect
                              C SDL_RenderGetClipRect proto  :ptr SDL_Renderer, :ptr SDL_Rect
                              C SDL_RenderIsClipEnabled proto  :ptr SDL_Renderer
                              C SDL_RenderSetScale proto  :ptr SDL_Renderer, :REAL4, :REAL4
                              C SDL_RenderGetScale proto  :ptr SDL_Renderer, :ptr REAL4, :ptr REAL4
                              C SDL_SetRenderDrawColor proto  :ptr SDL_Renderer, :Uint8, :Uint8, :Uint8, :Uint8
                              C SDL_GetRenderDrawColor proto  :ptr SDL_Renderer, :ptr Uint8, :ptr Uint8, :ptr Uint8, :ptr Uint8
                              C SDL_SetRenderDrawBlendMode proto  :ptr SDL_Renderer, :SDL_BlendMode
                              C SDL_GetRenderDrawBlendMode proto  :ptr SDL_Renderer, :ptr SDL_BlendMode
                              C SDL_RenderClear proto  :ptr SDL_Renderer
                              C SDL_RenderDrawPoint proto  :ptr SDL_Renderer, :DWORD, :DWORD
                              C SDL_RenderDrawPoints proto  :ptr SDL_Renderer, :ptr SDL_Point, :DWORD
                              C SDL_RenderDrawLine proto  :ptr SDL_Renderer, :DWORD, :DWORD, :DWORD, :DWORD
                              C SDL_RenderDrawLines proto  :ptr SDL_Renderer, :ptr SDL_Point, :DWORD
                              C SDL_RenderDrawRect proto  :ptr SDL_Renderer, :ptr SDL_Rect
                              C SDL_RenderDrawRects proto  :ptr SDL_Renderer, :ptr SDL_Rect, :DWORD
                              C SDL_RenderFillRect proto  :ptr SDL_Renderer, :ptr SDL_Rect
                              C SDL_RenderFillRects proto  :ptr SDL_Renderer, :ptr SDL_Rect, :DWORD
                              C SDL_RenderCopy proto  :ptr SDL_Renderer, :ptr SDL_Texture, :ptr SDL_Rect, :ptr SDL_Rect
                              C SDL_RenderCopyEx proto  :ptr SDL_Renderer, :ptr SDL_Texture, :ptr SDL_Rect, :ptr SDL_Rect, :REAL8, :ptr SDL_Point, :SDL_RendererFlip
                              C SDL_RenderDrawPointF proto  :ptr SDL_Renderer, :REAL4, :REAL4
                              C SDL_RenderDrawPointsF proto  :ptr SDL_Renderer, :ptr SDL_FPoint, :DWORD
                              C SDL_RenderDrawLineF proto  :ptr SDL_Renderer, :REAL4, :REAL4, :REAL4, :REAL4
                              C SDL_RenderDrawLinesF proto  :ptr SDL_Renderer, :ptr SDL_FPoint, :DWORD
                              C SDL_RenderDrawRectF proto  :ptr SDL_Renderer, :ptr SDL_FRect
                              C SDL_RenderDrawRectsF proto  :ptr SDL_Renderer, :ptr SDL_FRect, :DWORD
                              C SDL_RenderFillRectF proto  :ptr SDL_Renderer, :ptr SDL_FRect
                              C SDL_RenderFillRectsF proto  :ptr SDL_Renderer, :ptr SDL_FRect, :DWORD
                              C SDL_RenderCopyF proto  :ptr SDL_Renderer, :ptr SDL_Texture, :ptr SDL_Rect, :ptr SDL_FRect
                              C SDL_RenderCopyExF proto  :ptr SDL_Renderer, :ptr SDL_Texture, :ptr SDL_Rect, :ptr SDL_FRect, :REAL8, :ptr SDL_FPoint, :SDL_RendererFlip
                              C SDL_RenderReadPixels proto  :ptr SDL_Renderer, :ptr SDL_Rect, :Uint32, :ptr , :DWORD
                              C SDL_RenderPresent proto  :ptr SDL_Renderer
                              C SDL_DestroyTexture proto  :ptr SDL_Texture
                              C SDL_DestroyRenderer proto  :ptr SDL_Renderer
                              C SDL_RenderFlush proto  :ptr SDL_Renderer
                              C SDL_GL_BindTexture proto  :ptr SDL_Texture, :ptr REAL4, :ptr REAL4
                              C SDL_GL_UnbindTexture proto  :ptr SDL_Texture
                              C SDL_RenderGetMetalLayer proto  :ptr SDL_Renderer
                              C SDL_RenderGetMetalCommandEncoder proto  :ptr SDL_Renderer
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C 	;include close_code.inc
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C ;include SDL_rwops.inc
                              C ;include SDL_sensor.inc
                              C ;include SDL_shape.inc
                              C ;include SDL_system.inc
                              C ;include SDL_thread.inc
                              C include SDL_timer.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_timer.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_timer.h
                              C 
                              C ifndef SDL_timer_h_
 =                            C SDL_timer_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C include SDL_error.inc
                              C 
                              C ifndef SDL_error_h_
                              C SDL_error_h_	EQU	<>
                              C 
                              C SDL_SetError proto  :ptr SBYTE, :VARARG
                              C ;SDL_PRINTF_VARARG_FUNC proto  :1
                              C SDL_GetError proto  
                              C SDL_ClearError proto  
                              C 
                              C mSDL_OutOfMemory macro 
                              C 	exitm <SDL_Error ( SDL_ENOMEM ) >
                              C 	endm
                              C 	
                              C mSDL_Unsupported macro 
                              C 	exitm <SDL_Error ( SDL_UNSUPPORTED ) >
                              C 	endm
                              C 	
                              C mSDL_InvalidParamError macro param
                              C 	exitm <SDL_SetError ( "Parameter '%s' is invalid" , ( param ) ) >
                              C 	endm
                              C 	
                              C SDL_errorcode typedef DWORD
                              C SDL_ENOMEM = 0
                              C SDL_EFREAD = 1
                              C SDL_EFWRITE = 2
                              C SDL_EFSEEK = 3
                              C SDL_UNSUPPORTED = 4
                              C SDL_LASTERROR = 5
                              C 
                              C SDL_Error proto  :SDL_errorcode
                              C endif 
                              C ;	include begin_code.inc
                              C SDL_GetTicks proto  
                              C SDL_TICKS_PASSED macro A,B
 >                            C 	exitm <( ( Sint32 ) ( ( B ) - ( A ) ) <= 0 ) >
 >                            C 	endm
                              C externdef SDL_GetPerformanceCounter:proto  
                              C externdef SDL_GetPerformanceFrequency:proto  
                              C externdef SDL_Delay:proto
                              C SDL_TimerID typedef DWORD
                              C externdef SDL_AddTimer:proto
                              C externdef SDL_RemoveTimer:proto
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C ;include SDL_version.inc
                              C include SDL_video.inc
                              C 
                              C ifndef SDL_video_h_
                              C SDL_video_h_	EQU	<>
                              C ;	include SDL_stdinc.inc
                              C 	include SDL_pixels.inc
                              C 	include SDL_rect.inc
                              C 	include SDL_surface.inc
                              C ;	include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_DisplayMode	struct 
                              C format	Uint32	?
                              C w	DWORD	?
                              C h	DWORD	?
                              C refresh_rate	DWORD	?
                              C driverdata	DWORD	?
                              C SDL_DisplayMode	ends
                              C 
                              C ;SDL_Window typedef SDL_Window
                              C 
                              C SDL_WindowFlags typedef DWORD
                              C SDL_WINDOW_FULLSCREEN = 00000001h 
                              C SDL_WINDOW_OPENGL = 00000002h 
                              C SDL_WINDOW_SHOWN = 00000004h 
                              C SDL_WINDOW_HIDDEN = 00000008h 
                              C SDL_WINDOW_BORDERLESS = 00000010h 
                              C SDL_WINDOW_RESIZABLE = 00000020h 
                              C SDL_WINDOW_MINIMIZED = 00000040h 
                              C SDL_WINDOW_MAXIMIZED = 00000080h 
                              C SDL_WINDOW_INPUT_GRABBED = 00000100h 
                              C SDL_WINDOW_INPUT_FOCUS = 00000200h 
                              C SDL_WINDOW_MOUSE_FOCUS = 00000400h 
                              C SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN  or  00001000h ) 
                              C SDL_WINDOW_FOREIGN = 00000800h 
                              C SDL_WINDOW_ALLOW_HIGHDPI = 00002000h 
                              C SDL_WINDOW_MOUSE_CAPTURE = 00004000h 
                              C SDL_WINDOW_ALWAYS_ON_TOP = 00008000h 
                              C SDL_WINDOW_SKIP_TASKBAR = 00010000h 
                              C SDL_WINDOW_UTILITY = 00020000h 
                              C SDL_WINDOW_TOOLTIP = 00040000h 
                              C SDL_WINDOW_POPUP_MENU = 00080000h 
                              C SDL_WINDOW_VULKAN = 10000000h 
                              C 
                              C SDL_WINDOWPOS_UNDEFINED_MASK	EQU	1FFF0000h
                              C SDL_WINDOWPOS_UNDEFINED_DISPLAY macro X
                              C 	exitm <( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( X ) ) >
                              C 	endm
                              C SDL_WINDOWPOS_UNDEFINED	EQU	SDL_WINDOWPOS_UNDEFINED_DISPLAY ( 0 )
                              C SDL_WINDOWPOS_ISUNDEFINED macro X
                              C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_UNDEFINED_MASK ) >
                              C 	endm
                              C SDL_WINDOWPOS_CENTERED_MASK	EQU	2FFF0000h
                              C SDL_WINDOWPOS_CENTERED_DISPLAY macro X
                              C 	exitm <( SDL_WINDOWPOS_CENTERED_MASK  or  ( X ) ) >
                              C 	endm
                              C SDL_WINDOWPOS_CENTERED	EQU	SDL_WINDOWPOS_CENTERED_DISPLAY ( 0 )
                              C SDL_WINDOWPOS_ISCENTERED macro X
                              C 	exitm <( ( ( X )  and  0FFFF0000h ) == SDL_WINDOWPOS_CENTERED_MASK ) >
                              C 	endm
                              C SDL_WindowEventID typedef DWORD
                              C SDL_WINDOWEVENT_NONE = 0
                              C SDL_WINDOWEVENT_SHOWN = 1
                              C SDL_WINDOWEVENT_HIDDEN = 2
                              C SDL_WINDOWEVENT_EXPOSED = 3
                              C SDL_WINDOWEVENT_MOVED = 4
                              C SDL_WINDOWEVENT_RESIZED = 5
                              C SDL_WINDOWEVENT_SIZE_CHANGED = 6
                              C SDL_WINDOWEVENT_MINIMIZED = 7
                              C SDL_WINDOWEVENT_MAXIMIZED = 8
                              C SDL_WINDOWEVENT_RESTORED = 9
                              C SDL_WINDOWEVENT_ENTER = 10
                              C SDL_WINDOWEVENT_LEAVE = 11
                              C SDL_WINDOWEVENT_FOCUS_GAINED = 12
                              C SDL_WINDOWEVENT_FOCUS_LOST = 13
                              C SDL_WINDOWEVENT_CLOSE = 14
                              C SDL_WINDOWEVENT_TAKE_FOCUS = 15
                              C SDL_WINDOWEVENT_HIT_TEST = 16
                              C 
                              C SDL_DisplayEventID typedef DWORD
                              C SDL_DISPLAYEVENT_NONE = 0
                              C SDL_DISPLAYEVENT_ORIENTATION = 1
                              C 
                              C SDL_DisplayOrientation typedef DWORD
                              C SDL_ORIENTATION_UNKNOWN = 0
                              C SDL_ORIENTATION_LANDSCAPE = 1
                              C SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2
                              C SDL_ORIENTATION_PORTRAIT = 3
                              C SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
                              C 
                              C SDL_GLContext typedef ptr 
                              C SDL_GLattr typedef DWORD
                              C SDL_GL_RED_SIZE = 0
                              C SDL_GL_GREEN_SIZE = 1
                              C SDL_GL_BLUE_SIZE = 2
                              C SDL_GL_ALPHA_SIZE = 3
                              C SDL_GL_BUFFER_SIZE = 4
                              C SDL_GL_DOUBLEBUFFER = 5
                              C SDL_GL_DEPTH_SIZE = 6
                              C SDL_GL_STENCIL_SIZE = 7
                              C SDL_GL_ACCUM_RED_SIZE = 8
                              C SDL_GL_ACCUM_GREEN_SIZE = 9
                              C SDL_GL_ACCUM_BLUE_SIZE = 10
                              C SDL_GL_ACCUM_ALPHA_SIZE = 11
                              C SDL_GL_STEREO = 12
                              C SDL_GL_MULTISAMPLEBUFFERS = 13
                              C SDL_GL_MULTISAMPLESAMPLES = 14
                              C SDL_GL_ACCELERATED_VISUAL = 15
                              C SDL_GL_RETAINED_BACKING = 16
                              C SDL_GL_CONTEXT_MAJOR_VERSION = 17
                              C SDL_GL_CONTEXT_MINOR_VERSION = 18
                              C SDL_GL_CONTEXT_EGL = 19
                              C SDL_GL_CONTEXT_FLAGS = 20
                              C SDL_GL_CONTEXT_PROFILE_MASK = 21
                              C SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22
                              C SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24
                              C SDL_GL_CONTEXT_RESET_NOTIFICATION = 25
                              C SDL_GL_CONTEXT_NO_ERROR = 26
                              C 
                              C SDL_GLprofile typedef DWORD
                              C SDL_GL_CONTEXT_PROFILE_CORE = 0001h 
                              C SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0002h 
                              C SDL_GL_CONTEXT_PROFILE_ES = 0004h 
                              C 
                              C SDL_GLcontextFlag typedef DWORD
                              C SDL_GL_CONTEXT_DEBUG_FLAG = 0001h 
                              C SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0002h 
                              C SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0004h 
                              C SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0008h 
                              C 
                              C SDL_GLcontextReleaseFlag typedef DWORD
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0000h 
                              C SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0001h 
                              C 
                              C SDL_GLContextResetNotification typedef DWORD
                              C SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0000h 
                              C SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0001h 
                              C 
                              C SDL_GetNumVideoDrivers proto  
                              C SDL_GetVideoDriver proto  :DWORD
                              C SDL_VideoInit proto  :ptr SBYTE
                              C SDL_VideoQuit proto  
                              C SDL_GetCurrentVideoDriver proto  
                              C SDL_GetNumVideoDisplays proto  
                              C SDL_GetDisplayName proto  :DWORD
                              C SDL_GetDisplayBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayUsableBounds proto  :DWORD, :ptr SDL_Rect
                              C SDL_GetDisplayDPI proto  :DWORD, :ptr REAL4, :ptr REAL4, :ptr REAL4
                              C SDL_GetDisplayOrientation proto  :DWORD
                              C SDL_GetNumDisplayModes proto  :DWORD
                              C SDL_GetDisplayMode proto  :DWORD, :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetDesktopDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetCurrentDisplayMode proto  :DWORD, :ptr SDL_DisplayMode
                              C SDL_GetClosestDisplayMode proto  :DWORD, :ptr SDL_DisplayMode, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayIndex proto  :ptr SDL_Window
                              C SDL_SetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowDisplayMode proto  :ptr SDL_Window, :ptr SDL_DisplayMode
                              C SDL_GetWindowPixelFormat proto  :ptr SDL_Window
                              C SDL_CreateWindow proto  :ptr SBYTE, :DWORD, :DWORD, :DWORD, :DWORD, :Uint32
                              C SDL_CreateWindowFrom proto  :ptr 
                              C SDL_GetWindowID proto  :ptr SDL_Window
                              C SDL_GetWindowFromID proto  :Uint32
                              C SDL_GetWindowFlags proto  :ptr SDL_Window
                              C SDL_SetWindowTitle proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_GetWindowTitle proto  :ptr SDL_Window
                              C SDL_SetWindowIcon proto  :ptr SDL_Window, :ptr SDL_Surface
                              C SDL_SetWindowData proto  :ptr SDL_Window, :ptr SBYTE, :ptr 
                              C SDL_GetWindowData proto  :ptr SDL_Window, :ptr SBYTE
                              C SDL_SetWindowPosition proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowPosition proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GetWindowBordersSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMinimumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMinimumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowMaximumSize proto  :ptr SDL_Window, :DWORD, :DWORD
                              C SDL_GetWindowMaximumSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_SetWindowBordered proto  :ptr SDL_Window, :SDL_bool
                              C SDL_SetWindowResizable proto  :ptr SDL_Window, :SDL_bool
                              C SDL_ShowWindow proto  :ptr SDL_Window
                              C SDL_HideWindow proto  :ptr SDL_Window
                              C SDL_RaiseWindow proto  :ptr SDL_Window
                              C SDL_MaximizeWindow proto  :ptr SDL_Window
                              C SDL_MinimizeWindow proto  :ptr SDL_Window
                              C SDL_RestoreWindow proto  :ptr SDL_Window
                              C SDL_SetWindowFullscreen proto  :ptr SDL_Window, :Uint32
                              C SDL_GetWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurface proto  :ptr SDL_Window
                              C SDL_UpdateWindowSurfaceRects proto  :ptr SDL_Window, :ptr SDL_Rect, :DWORD
                              C SDL_SetWindowGrab proto  :ptr SDL_Window, :SDL_bool
                              C SDL_GetWindowGrab proto  :ptr SDL_Window
                              C SDL_GetGrabbedWindow proto  
                              C SDL_SetWindowBrightness proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowBrightness proto  :ptr SDL_Window
                              C SDL_SetWindowOpacity proto  :ptr SDL_Window, :REAL4
                              C SDL_GetWindowOpacity proto  :ptr SDL_Window, :ptr REAL4
                              C SDL_SetWindowModalFor proto  :ptr SDL_Window, :ptr SDL_Window
                              C SDL_SetWindowInputFocus proto  :ptr SDL_Window
                              C SDL_SetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_GetWindowGammaRamp proto  :ptr SDL_Window, :ptr Uint16, :ptr Uint16, :ptr Uint16
                              C SDL_HitTestResult typedef DWORD
                              C SDL_HITTEST_NORMAL = 0
                              C SDL_HITTEST_DRAGGABLE = 1
                              C SDL_HITTEST_RESIZE_TOPLEFT = 2
                              C SDL_HITTEST_RESIZE_TOP = 3
                              C SDL_HITTEST_RESIZE_TOPRIGHT = 4
                              C SDL_HITTEST_RESIZE_RIGHT = 5
                              C SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6
                              C SDL_HITTEST_RESIZE_BOTTOM = 7
                              C SDL_HITTEST_RESIZE_BOTTOMLEFT = 8
                              C SDL_HITTEST_RESIZE_LEFT = 9
                              C 
                              C proto_SDL_HitTest typedef proto  :ptr SDL_Window,:ptr SDL_Point,:ptr 
                              C SDL_HitTest typedef ptr proto_SDL_HitTest
                              C SDL_SetWindowHitTest proto  :ptr SDL_Window, :SDL_HitTest, :ptr 
                              C SDL_DestroyWindow proto  :ptr SDL_Window
                              C SDL_IsScreenSaverEnabled proto  
                              C SDL_EnableScreenSaver proto  
                              C SDL_DisableScreenSaver proto  
                              C SDL_GL_LoadLibrary proto  :ptr SBYTE
                              C SDL_GL_GetProcAddress proto  :ptr SBYTE
                              C SDL_GL_UnloadLibrary proto  
                              C SDL_GL_ExtensionSupported proto  :ptr SBYTE
                              C SDL_GL_ResetAttributes proto  
                              C SDL_GL_SetAttribute proto  :SDL_GLattr, :DWORD
                              C SDL_GL_GetAttribute proto  :SDL_GLattr, :ptr DWORD
                              C SDL_GL_CreateContext proto  :ptr SDL_Window
                              C SDL_GL_MakeCurrent proto  :ptr SDL_Window, :SDL_GLContext
                              C SDL_GL_GetCurrentWindow proto  
                              C SDL_GL_GetCurrentContext proto  
                              C SDL_GL_GetDrawableSize proto  :ptr SDL_Window, :ptr DWORD, :ptr DWORD
                              C SDL_GL_SetSwapInterval proto  :DWORD
                              C SDL_GL_GetSwapInterval proto  
                              C SDL_GL_SwapWindow proto  :ptr SDL_Window
                              C SDL_GL_DeleteContext proto  :SDL_GLContext
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C 
 = 1                          C SDL_INIT_TIMER				EQU	00000001h
 = 10                         C SDL_INIT_AUDIO				EQU	00000010h
 = 20                         C SDL_INIT_VIDEO				EQU	00000020h
 = 200                        C SDL_INIT_JOYSTICK			EQU	00000200h
 = 1000                       C SDL_INIT_HAPTIC				EQU	00001000h
 = 2000                       C SDL_INIT_GAMECONTROLLER		EQU	00002000h
 = 4000                       C SDL_INIT_EVENTS				EQU	00004000h
 = 8000                       C SDL_INIT_SENSOR				EQU	00008000h
 = 100000                     C SDL_INIT_NOPARACHUTE		EQU	00100000h
 = F231                       C SDL_INIT_EVERYTHING			EQU	( SDL_INIT_TIMER  or  SDL_INIT_AUDIO  or  SDL_INIT_VIDEO  or  SDL_INIT_EVENTS  or  SDL_INIT_JOYSTICK  or  SDL_INIT_HAPTIC  or  SDL_INIT_GAMECONTROLLER  or  SDL_INIT_SENSOR )
                              C 
                              C SDL_Init proto 	:DWORD
                              C SDL_InitSubSystem proto	:DWORD
                              C SDL_QuitSubSystem proto	:DWORD
                              C SDL_WasInit proto	:DWORD
                              C SDL_Quit proto  
                              C 
                              C endif 
                                include SDL_image.inc
                              C 
                              C ifndef SDL_IMAGE_H_
 =                            C SDL_IMAGE_H_	EQU	<>
                              C 	include SDL.inc
                              C ; SDL.h
                              C 
                              C ifndef SDL_h_
                              C SDL_h_	EQU	<>
                              C Uint16	typedef WORD
                              C Sint16	typedef SWORD
                              C Sint32	typedef SDWORD
                              C Uint32 	typedef DWORD
                              C Uint8	typedef BYTE
                              C Sint8	typedef SBYTE
                              C SDL_Bool typedef BYTE
                              C Sint64 	typedef QWORD
                              C Uint64 	typedef QWORD
                              C size_t 	typedef QWORD
                              C ;include SDL_main.inc
                              C ;include SDL_stdinc.inc
                              C ;include SDL_assert.inc
                              C ;include SDL_atomic.inc
                              C ;include SDL_audio.inc
                              C ;include SDL_clipboard.inc
                              C ;include SDL_cpuinfo.inc
                              C ;include SDL_endian.inc
                              C include SDL_error.inc
                              C include SDL_events.inc
                              C ;include SDL_filesystem.inc
                              C ;include SDL_gamecontroller.inc
                              C ;include SDL_haptic.inc
                              C ;include SDL_hints.inc
                              C ;include SDL_joystick.inc
                              C ;include SDL_loadso.inc
                              C ;include SDL_log.inc
                              C ;include SDL_messagebox.inc
                              C ;include SDL_metal.inc
                              C ;include SDL_mutex.inc
                              C ;include SDL_power.inc
                              C include SDL_render.inc
                              C ;include SDL_rwops.inc
                              C ;include SDL_sensor.inc
                              C ;include SDL_shape.inc
                              C ;include SDL_system.inc
                              C ;include SDL_thread.inc
                              C include SDL_timer.inc
                              C ;include SDL_version.inc
                              C include SDL_video.inc
                              C 
                              C SDL_INIT_TIMER				EQU	00000001h
                              C SDL_INIT_AUDIO				EQU	00000010h
                              C SDL_INIT_VIDEO				EQU	00000020h
                              C SDL_INIT_JOYSTICK			EQU	00000200h
                              C SDL_INIT_HAPTIC				EQU	00001000h
                              C SDL_INIT_GAMECONTROLLER		EQU	00002000h
                              C SDL_INIT_EVENTS				EQU	00004000h
                              C SDL_INIT_SENSOR				EQU	00008000h
                              C SDL_INIT_NOPARACHUTE		EQU	00100000h
                              C SDL_INIT_EVERYTHING			EQU	( SDL_INIT_TIMER  or  SDL_INIT_AUDIO  or  SDL_INIT_VIDEO  or  SDL_INIT_EVENTS  or  SDL_INIT_JOYSTICK  or  SDL_INIT_HAPTIC  or  SDL_INIT_GAMECONTROLLER  or  SDL_INIT_SENSOR )
                              C 
                              C SDL_Init proto 	:DWORD
                              C SDL_InitSubSystem proto	:DWORD
                              C SDL_QuitSubSystem proto	:DWORD
                              C SDL_WasInit proto	:DWORD
                              C SDL_Quit proto  
                              C 
                              C endif 
                              C 	;include SDL_version.inc
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
 = 2                          C SDL_IMAGE_MAJOR_VERSION	EQU	2
 = 0                          C SDL_IMAGE_MINOR_VERSION	EQU	0
 = 5                          C SDL_IMAGE_PATCHLEVEL	EQU	5
                              C SDL_IMAGE_VERSION macro X
 >                            C 	exitm <{ ( X ) -> major = SDL_IMAGE_MAJOR_VERSION ; ( X ) -> minor = SDL_IMAGE_MINOR_VERSION ; ( X ) -> patch = SDL_IMAGE_PATCHLEVEL ; } >
 >                            C 	endm
 = SDL_VERSIONNUM ( SDL_IMAG  C SDL_IMAGE_COMPILEDVERSION	EQU	<SDL_VERSIONNUM ( SDL_IMAGE_MAJOR_VERSION , SDL_IMAGE_MINOR_VERSION , SDL_IMAGE_PATCHLEVEL )>
   E_MAJOR_VERSION , SDL_IMA    
   GE_MINOR_VERSION , SDL_IM    
   AGE_PATCHLEVEL )             
                              C SDL_IMAGE_VERSION_ATLEAST macro X,Y,Z
 >                            C 	exitm <( SDL_IMAGE_COMPILEDVERSION >= SDL_VERSIONNUM ( X , Y , Z ) ) >
 >                            C 	endm
                              C IMG_Linked_Version proto  
                              C IMG_InitFlags typedef DWORD
 = 1                          C IMG_INIT_JPG = 00000001h 
 = 2                          C IMG_INIT_PNG = 00000002h 
 = 4                          C IMG_INIT_TIF = 00000004h 
 = 8                          C IMG_INIT_WEBP = 00000008h 
                              C 
                              C IMG_Init proto  :DWORD
                              C IMG_Quit proto  
                              C IMG_LoadTyped_RW proto  :ptr SDL_RWops, :DWORD, :ptr SBYTE
                              C IMG_Load proto  :ptr SBYTE
                              C IMG_Load_RW proto  :ptr SDL_RWops, :DWORD
                              C ;if SDL_VERSION_ATLEAST(2,0,0)
                              C IMG_LoadTexture proto  :ptr SDL_Renderer, :ptr SBYTE
                              C IMG_LoadTexture_RW proto  :ptr SDL_Renderer, :ptr SDL_RWops, :DWORD
                              C IMG_LoadTextureTyped_RW proto  :ptr SDL_Renderer, :ptr SDL_RWops, :DWORD, :ptr SBYTE
                              C ;endif 
                              C IMG_isICO proto  :ptr SDL_RWops
                              C IMG_isCUR proto  :ptr SDL_RWops
                              C IMG_isBMP proto  :ptr SDL_RWops
                              C IMG_isGIF proto  :ptr SDL_RWops
                              C IMG_isJPG proto  :ptr SDL_RWops
                              C IMG_isLBM proto  :ptr SDL_RWops
                              C IMG_isPCX proto  :ptr SDL_RWops
                              C IMG_isPNG proto  :ptr SDL_RWops
                              C IMG_isPNM proto  :ptr SDL_RWops
                              C IMG_isSVG proto  :ptr SDL_RWops
                              C IMG_isTIF proto  :ptr SDL_RWops
                              C IMG_isXCF proto  :ptr SDL_RWops
                              C IMG_isXPM proto  :ptr SDL_RWops
                              C IMG_isXV proto  :ptr SDL_RWops
                              C IMG_isWEBP proto  :ptr SDL_RWops
                              C IMG_LoadICO_RW proto  :ptr SDL_RWops
                              C IMG_LoadCUR_RW proto  :ptr SDL_RWops
                              C IMG_LoadBMP_RW proto  :ptr SDL_RWops
                              C IMG_LoadGIF_RW proto  :ptr SDL_RWops
                              C IMG_LoadJPG_RW proto  :ptr SDL_RWops
                              C IMG_LoadLBM_RW proto  :ptr SDL_RWops
                              C IMG_LoadPCX_RW proto  :ptr SDL_RWops
                              C IMG_LoadPNG_RW proto  :ptr SDL_RWops
                              C IMG_LoadPNM_RW proto  :ptr SDL_RWops
                              C IMG_LoadSVG_RW proto  :ptr SDL_RWops
                              C IMG_LoadTGA_RW proto  :ptr SDL_RWops
                              C IMG_LoadTIF_RW proto  :ptr SDL_RWops
                              C IMG_LoadXCF_RW proto  :ptr SDL_RWops
                              C IMG_LoadXPM_RW proto  :ptr SDL_RWops
                              C IMG_LoadXV_RW proto  :ptr SDL_RWops
                              C IMG_LoadWEBP_RW proto  :ptr SDL_RWops
                              C IMG_ReadXPMFromArray proto  :ptr ptr SBYTE
                              C IMG_SavePNG proto  :ptr SDL_Surface, :ptr SBYTE
                              C IMG_SavePNG_RW proto  :ptr SDL_Surface, :ptr SDL_RWops, :DWORD
                              C IMG_SaveJPG proto  :ptr SDL_Surface, :ptr SBYTE, :DWORD
                              C IMG_SaveJPG_RW proto  :ptr SDL_Surface, :ptr SDL_RWops, :DWORD, :DWORD
 = SDL_SetError               C IMG_SetError	EQU	<SDL_SetError>
 = SDL_GetError               C IMG_GetError	EQU	<SDL_GetError>
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C 	;include close_code.inc
                              C endif 
                                include SDL_ttf.inc
                              C ifndef SDL_TTF_H_
 =                            C SDL_TTF_H_	EQU	<>
                              C 	include SDL.inc
                              C ; SDL.h
                              C 
                              C ifndef SDL_h_
                              C SDL_h_	EQU	<>
                              C Uint16	typedef WORD
                              C Sint16	typedef SWORD
                              C Sint32	typedef SDWORD
                              C Uint32 	typedef DWORD
                              C Uint8	typedef BYTE
                              C Sint8	typedef SBYTE
                              C SDL_Bool typedef BYTE
                              C Sint64 	typedef QWORD
                              C Uint64 	typedef QWORD
                              C size_t 	typedef QWORD
                              C ;include SDL_main.inc
                              C ;include SDL_stdinc.inc
                              C ;include SDL_assert.inc
                              C ;include SDL_atomic.inc
                              C ;include SDL_audio.inc
                              C ;include SDL_clipboard.inc
                              C ;include SDL_cpuinfo.inc
                              C ;include SDL_endian.inc
                              C include SDL_error.inc
                              C include SDL_events.inc
                              C ;include SDL_filesystem.inc
                              C ;include SDL_gamecontroller.inc
                              C ;include SDL_haptic.inc
                              C ;include SDL_hints.inc
                              C ;include SDL_joystick.inc
                              C ;include SDL_loadso.inc
                              C ;include SDL_log.inc
                              C ;include SDL_messagebox.inc
                              C ;include SDL_metal.inc
                              C ;include SDL_mutex.inc
                              C ;include SDL_power.inc
                              C include SDL_render.inc
                              C ;include SDL_rwops.inc
                              C ;include SDL_sensor.inc
                              C ;include SDL_shape.inc
                              C ;include SDL_system.inc
                              C ;include SDL_thread.inc
                              C include SDL_timer.inc
                              C ;include SDL_version.inc
                              C include SDL_video.inc
                              C 
                              C SDL_INIT_TIMER				EQU	00000001h
                              C SDL_INIT_AUDIO				EQU	00000010h
                              C SDL_INIT_VIDEO				EQU	00000020h
                              C SDL_INIT_JOYSTICK			EQU	00000200h
                              C SDL_INIT_HAPTIC				EQU	00001000h
                              C SDL_INIT_GAMECONTROLLER		EQU	00002000h
                              C SDL_INIT_EVENTS				EQU	00004000h
                              C SDL_INIT_SENSOR				EQU	00008000h
                              C SDL_INIT_NOPARACHUTE		EQU	00100000h
                              C SDL_INIT_EVERYTHING			EQU	( SDL_INIT_TIMER  or  SDL_INIT_AUDIO  or  SDL_INIT_VIDEO  or  SDL_INIT_EVENTS  or  SDL_INIT_JOYSTICK  or  SDL_INIT_HAPTIC  or  SDL_INIT_GAMECONTROLLER  or  SDL_INIT_SENSOR )
                              C 
                              C SDL_Init proto 	:DWORD
                              C SDL_InitSubSystem proto	:DWORD
                              C SDL_QuitSubSystem proto	:DWORD
                              C SDL_WasInit proto	:DWORD
                              C SDL_Quit proto  
                              C 
                              C endif 
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
 = 2                          C SDL_TTF_MAJOR_VERSION	EQU	2
 = 0                          C SDL_TTF_MINOR_VERSION	EQU	0
 = F                          C SDL_TTF_PATCHLEVEL	EQU	15
                              C SDL_TTF_VERSION macro X
 >                            C 	exitm <{ ( X ) -> major = SDL_TTF_MAJOR_VERSION ; ( X ) -> minor = SDL_TTF_MINOR_VERSION ; ( X ) -> patch = SDL_TTF_PATCHLEVEL ; } >
 >                            C 	endm
 = SDL_TTF_MAJOR_VERSION      C TTF_MAJOR_VERSION	EQU	<SDL_TTF_MAJOR_VERSION>
 = SDL_TTF_MINOR_VERSION      C TTF_MINOR_VERSION	EQU	<SDL_TTF_MINOR_VERSION>
 = SDL_TTF_PATCHLEVEL         C TTF_PATCHLEVEL	EQU	<SDL_TTF_PATCHLEVEL>
                              C TTF_VERSION macro X
 >                            C 	exitm <SDL_TTF_VERSION ( X ) >
 >                            C 	endm
 = SDL_VERSIONNUM ( SDL_TTF_  C SDL_TTF_COMPILEDVERSION	EQU	<SDL_VERSIONNUM ( SDL_TTF_MAJOR_VERSION , SDL_TTF_MINOR_VERSION , SDL_TTF_PATCHLEVEL )>
   MAJOR_VERSION , SDL_TTF_M    
   INOR_VERSION , SDL_TTF_PA    
   TCHLEVEL )                   
                              C SDL_TTF_VERSION_ATLEAST macro X,Y,Z
 >                            C 	exitm <( SDL_TTF_COMPILEDVERSION >= SDL_VERSIONNUM ( X , Y , Z ) ) >
 >                            C 	endm
                              C ifndef SDL_DEPRECATED
 =                            C SDL_DEPRECATED	EQU	<>
                              C endif 
                              C TTF_Linked_Version proto  
 = FEFF                       C UNICODE_BOM_NATIVE	EQU	0FEFFh
 = FFFE                       C UNICODE_BOM_SWAPPED	EQU	0FFFEh
                              C TTF_ByteSwappedUNICODE proto  :DWORD
                              C ;TTF_Font typedef _TTF_Font
                              C 
                              C TTF_Init proto  
                              C TTF_OpenFont proto  :ptr SBYTE, :DWORD
                              C TTF_OpenFontIndex proto  :ptr SBYTE, :DWORD, :SDWORD
                              C TTF_OpenFontRW proto  :ptr SDL_RWops, :DWORD, :DWORD
                              C TTF_OpenFontIndexRW proto  :ptr SDL_RWops, :DWORD, :DWORD, :SDWORD
 = 0                          C TTF_STYLE_NORMAL	EQU	00h
 = 1                          C TTF_STYLE_BOLD	EQU	01h
 = 2                          C TTF_STYLE_ITALIC	EQU	02h
 = 4                          C TTF_STYLE_UNDERLINE	EQU	04h
 = 8                          C TTF_STYLE_STRIKETHROUGH	EQU	08h
                              C TTF_GetFontStyle proto  :ptr TTF_Font
                              C TTF_SetFontStyle proto  :ptr TTF_Font, :DWORD
                              C TTF_GetFontOutline proto  :ptr TTF_Font
                              C TTF_SetFontOutline proto  :ptr TTF_Font, :DWORD
 = 0                          C TTF_HINTING_NORMAL	EQU	0
 = 1                          C TTF_HINTING_LIGHT	EQU	1
 = 2                          C TTF_HINTING_MONO	EQU	2
 = 3                          C TTF_HINTING_NONE	EQU	3
                              C TTF_GetFontHinting proto  :ptr TTF_Font
                              C TTF_SetFontHinting proto  :ptr TTF_Font, :DWORD
                              C TTF_FontHeight proto  :ptr TTF_Font
                              C TTF_FontAscent proto  :ptr TTF_Font
                              C TTF_FontDescent proto  :ptr TTF_Font
                              C TTF_FontLineSkip proto  :ptr TTF_Font
                              C TTF_GetFontKerning proto  :ptr TTF_Font
                              C TTF_SetFontKerning proto  :ptr TTF_Font, :DWORD
                              C TTF_FontFaces proto  :ptr TTF_Font
                              C TTF_FontFaceIsFixedWidth proto  :ptr TTF_Font
                              C TTF_FontFaceFamilyName proto  :ptr TTF_Font
                              C TTF_FontFaceStyleName proto  :ptr TTF_Font
                              C TTF_GlyphIsProvided proto  :ptr TTF_Font, :Uint16
                              C TTF_GlyphMetrics proto  :ptr TTF_Font, :Uint16, :ptr DWORD, :ptr DWORD, :ptr DWORD, :ptr DWORD, :ptr DWORD
                              C TTF_SizeText proto  :ptr TTF_Font, :ptr SBYTE, :ptr DWORD, :ptr DWORD
                              C TTF_SizeUTF8 proto  :ptr TTF_Font, :ptr SBYTE, :ptr DWORD, :ptr DWORD
                              C TTF_SizeUNICODE proto  :ptr TTF_Font, :ptr Uint16, :ptr DWORD, :ptr DWORD
                              C TTF_RenderText_Solid proto  :ptr TTF_Font, :ptr SBYTE, :SDL_Color
                              C TTF_RenderUTF8_Solid proto  :ptr TTF_Font, :ptr SBYTE, :SDL_Color
                              C TTF_RenderUNICODE_Solid proto  :ptr TTF_Font, :ptr Uint16, :SDL_Color
                              C TTF_RenderGlyph_Solid proto  :ptr TTF_Font, :Uint16, :SDL_Color
                              C TTF_RenderText_Shaded proto  :ptr TTF_Font, :ptr SBYTE, :SDL_Color, :SDL_Color
                              C TTF_RenderUTF8_Shaded proto  :ptr TTF_Font, :ptr SBYTE, :SDL_Color, :SDL_Color
                              C TTF_RenderUNICODE_Shaded proto  :ptr TTF_Font, :ptr Uint16, :SDL_Color, :SDL_Color
                              C TTF_RenderGlyph_Shaded proto  :ptr TTF_Font, :Uint16, :SDL_Color, :SDL_Color
                              C TTF_RenderText_Blended proto  :ptr TTF_Font, :ptr SBYTE, :SDL_Color
                              C TTF_RenderUTF8_Blended proto  :ptr TTF_Font, :ptr SBYTE, :SDL_Color
                              C TTF_RenderUNICODE_Blended proto  :ptr TTF_Font, :ptr Uint16, :SDL_Color
                              C TTF_RenderText_Blended_Wrapped proto  :ptr TTF_Font, :ptr SBYTE, :SDL_Color, :Uint32
                              C TTF_RenderUTF8_Blended_Wrapped proto  :ptr TTF_Font, :ptr SBYTE, :SDL_Color, :Uint32
                              C TTF_RenderUNICODE_Blended_Wrapped proto  :ptr TTF_Font, :ptr Uint16, :SDL_Color, :Uint32
                              C TTF_RenderGlyph_Blended proto  :ptr TTF_Font, :Uint16, :SDL_Color
                              C TTF_RenderText macro font,text,fg,bg
 >                            C 	exitm <TTF_RenderText_Shaded ( font , text , fg , bg ) >
 >                            C 	endm
                              C TTF_RenderUTF8 macro font,text,fg,bg
 >                            C 	exitm <TTF_RenderUTF8_Shaded ( font , text , fg , bg ) >
 >                            C 	endm
                              C TTF_RenderUNICODE macro font,text,fg,bg
 >                            C 	exitm <TTF_RenderUNICODE_Shaded ( font , text , fg , bg ) >
 >                            C 	endm
                              C TTF_CloseFont proto  :ptr TTF_Font
                              C TTF_Quit proto  
                              C TTF_WasInit proto  
                              C TTF_GetFontKerningSize proto  :ptr TTF_Font, :DWORD, :DWORD
                              C TTF_GetFontKerningSizeGlyphs proto  :ptr TTF_Font, :Uint16, :Uint16
 = SDL_SetError               C TTF_SetError	EQU	<SDL_SetError>
 = SDL_GetError               C TTF_GetError	EQU	<SDL_GetError>
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C 	;include close_code.inc
                              C endif 
                                include SDL_mixer.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_mixer.h, last modified: 10/31/2018 17:0
                              C ;--- cmdline used for creation:  SDL_mixer.h
                              C 
                              C ifndef SDL_MIXER_H_
 =                            C SDL_MIXER_H_	EQU	<>
                              C 	;include SDL_stdinc.inc
                              C 	include SDL_rwops.inc
                              C 
                              C ifndef SDL_rwops_h_
                              C SDL_rwops_h_	EQU	<>
                              C 	;include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_RWOPS_UNKNOWN	EQU	0
                              C SDL_RWOPS_WINFILE	EQU	1
                              C SDL_RWOPS_STDFILE	EQU	2
                              C SDL_RWOPS_JNIFILE	EQU	3
                              C SDL_RWOPS_MEMORY	EQU	4
                              C SDL_RWOPS_MEMORY_RO	EQU	5
                              C SDL_RWops	struct 
                              C protoSDL_RWops_size typedef proto  :ptr SDL_RWops
                              C pSDL_RWops_size typedef ptr protoSDL_RWops_size
                              C size_	pSDL_RWops_size	?
                              C protoSDL_RWops_seek typedef proto  :ptr SDL_RWops,:Sint64,:DWORD
                              C pSDL_RWops_seek typedef ptr protoSDL_RWops_seek
                              C seek	pSDL_RWops_seek	?
                              C protoSDL_RWops_read typedef proto  :ptr SDL_RWops,:ptr ,:size_t,:size_t
                              C pSDL_RWops_read typedef ptr protoSDL_RWops_read
                              C read	pSDL_RWops_read	?
                              C protoSDL_RWops_write typedef proto  :ptr SDL_RWops,:ptr ,:size_t,:size_t
                              C pSDL_RWops_write typedef ptr protoSDL_RWops_write
                              C write	pSDL_RWops_write	?
                              C protoSDL_RWops_close typedef proto  :ptr SDL_RWops
                              C pSDL_RWops_close typedef ptr protoSDL_RWops_close
                              C close	pSDL_RWops_close	?
                              C type_	Uint32	?
                              C union hidden
                              C ifndef defined
                              C defined macro x
                              C ifdef x
                              C   exitm <1>
                              C else
                              C   exitm <0>
                              C endif
                              C endm
                              C endif
                              C if defined(__ANDROID__)
                              C struct androidio
                              C fileNameRef	DWORD	?
                              C inputStreamRef	DWORD	?
                              C readableByteChannelRef	DWORD	?
                              C readMethod	DWORD	?
                              C assetFileDescriptorRef	DWORD	?
                              C position	SDWORD	?
                              C size_	SDWORD	?
                              C offset_	SDWORD	?
                              C fd	DWORD	?
                              C ends
                              C elseif defined(__WIN32__)
                              C struct windowsio
                              C append	SDL_bool	?
                              C h	DWORD	?
                              C struct buffer
                              C data	DWORD	?
                              C size_	size_t	?
                              C left	size_t	?
                              C ends
                              C ends
                              C endif 
                              C ifdef HAVE_STDIO_H
                              C struct stdio
                              C autoclose	SDL_bool	?
                              C fp	DWORD	?
                              C ends
                              C endif 
                              C struct mem
                              C base	DWORD	?
                              C here	DWORD	?
                              C stop	DWORD	?
                              C ends
                              C struct unknown
                              C data1	DWORD	?
                              C data2	DWORD	?
                              C ends
                              C ends
                              C SDL_RWops	ends
                              C 
                              C SDL_RWFromFile proto  :ptr SBYTE, :ptr SBYTE
                              C ifdef HAVE_STDIO_H
                              C SDL_RWFromFP proto  :ptr FILE, :SDL_bool
                              C else 
                              C SDL_RWFromFP proto  :ptr , :SDL_bool
                              C endif 
                              C SDL_RWFromMem proto  :ptr , :DWORD
                              C SDL_RWFromConstMem proto  :ptr , :DWORD
                              C SDL_AllocRW proto  
                              C SDL_FreeRW proto  :ptr SDL_RWops
                              C RW_SEEK_SET	EQU	0
                              C RW_SEEK_CUR	EQU	1
                              C RW_SEEK_END	EQU	2
                              C SDL_RWsize proto  :ptr SDL_RWops
                              C SDL_RWseek proto  :ptr SDL_RWops, :Sint64, :DWORD
                              C SDL_RWtell proto  :ptr SDL_RWops
                              C SDL_RWread proto  :ptr SDL_RWops, :ptr , :size_t, :size_t
                              C SDL_RWwrite proto  :ptr SDL_RWops, :ptr , :size_t, :size_t
                              C SDL_RWclose proto  :ptr SDL_RWops
                              C SDL_LoadFile_RW proto  :ptr SDL_RWops, :ptr size_t, :DWORD
                              C SDL_LoadFile proto  :ptr SBYTE, :ptr size_t
                              C SDL_ReadU8 proto  :ptr SDL_RWops
                              C SDL_ReadLE16 proto  :ptr SDL_RWops
                              C SDL_ReadBE16 proto  :ptr SDL_RWops
                              C SDL_ReadLE32 proto  :ptr SDL_RWops
                              C SDL_ReadBE32 proto  :ptr SDL_RWops
                              C SDL_ReadLE64 proto  :ptr SDL_RWops
                              C SDL_ReadBE64 proto  :ptr SDL_RWops
                              C SDL_WriteU8 proto  :ptr SDL_RWops, :Uint8
                              C SDL_WriteLE16 proto  :ptr SDL_RWops, :Uint16
                              C SDL_WriteBE16 proto  :ptr SDL_RWops, :Uint16
                              C SDL_WriteLE32 proto  :ptr SDL_RWops, :Uint32
                              C SDL_WriteBE32 proto  :ptr SDL_RWops, :Uint32
                              C SDL_WriteLE64 proto  :ptr SDL_RWops, :Uint64
                              C SDL_WriteBE64 proto  :ptr SDL_RWops, :Uint64
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C 	include SDL_audio.inc
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_audio.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_audio.h
                              C 
                              C ifndef SDL_audio_h_
 =                            C SDL_audio_h_	EQU	<>
                              C 	;include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C 
                              C ifndef SDL_error_h_
                              C SDL_error_h_	EQU	<>
                              C 
                              C SDL_SetError proto  :ptr SBYTE, :VARARG
                              C ;SDL_PRINTF_VARARG_FUNC proto  :1
                              C SDL_GetError proto  
                              C SDL_ClearError proto  
                              C 
                              C mSDL_OutOfMemory macro 
                              C 	exitm <SDL_Error ( SDL_ENOMEM ) >
                              C 	endm
                              C 	
                              C mSDL_Unsupported macro 
                              C 	exitm <SDL_Error ( SDL_UNSUPPORTED ) >
                              C 	endm
                              C 	
                              C mSDL_InvalidParamError macro param
                              C 	exitm <SDL_SetError ( "Parameter '%s' is invalid" , ( param ) ) >
                              C 	endm
                              C 	
                              C SDL_errorcode typedef DWORD
                              C SDL_ENOMEM = 0
                              C SDL_EFREAD = 1
                              C SDL_EFWRITE = 2
                              C SDL_EFSEEK = 3
                              C SDL_UNSUPPORTED = 4
                              C SDL_LASTERROR = 5
                              C 
                              C SDL_Error proto  :SDL_errorcode
                              C endif 
                              C 	;include SDL_endian.inc
                              C 	;include SDL_mutex.inc
                              C 	;include SDL_thread.inc
                              C 	include SDL_rwops.inc
                              C 
                              C ifndef SDL_rwops_h_
                              C SDL_rwops_h_	EQU	<>
                              C 	;include SDL_stdinc.inc
                              C 	include SDL_error.inc
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_RWOPS_UNKNOWN	EQU	0
                              C SDL_RWOPS_WINFILE	EQU	1
                              C SDL_RWOPS_STDFILE	EQU	2
                              C SDL_RWOPS_JNIFILE	EQU	3
                              C SDL_RWOPS_MEMORY	EQU	4
                              C SDL_RWOPS_MEMORY_RO	EQU	5
                              C SDL_RWops	struct 
                              C protoSDL_RWops_size typedef proto  :ptr SDL_RWops
                              C pSDL_RWops_size typedef ptr protoSDL_RWops_size
                              C size_	pSDL_RWops_size	?
                              C protoSDL_RWops_seek typedef proto  :ptr SDL_RWops,:Sint64,:DWORD
                              C pSDL_RWops_seek typedef ptr protoSDL_RWops_seek
                              C seek	pSDL_RWops_seek	?
                              C protoSDL_RWops_read typedef proto  :ptr SDL_RWops,:ptr ,:size_t,:size_t
                              C pSDL_RWops_read typedef ptr protoSDL_RWops_read
                              C read	pSDL_RWops_read	?
                              C protoSDL_RWops_write typedef proto  :ptr SDL_RWops,:ptr ,:size_t,:size_t
                              C pSDL_RWops_write typedef ptr protoSDL_RWops_write
                              C write	pSDL_RWops_write	?
                              C protoSDL_RWops_close typedef proto  :ptr SDL_RWops
                              C pSDL_RWops_close typedef ptr protoSDL_RWops_close
                              C close	pSDL_RWops_close	?
                              C type_	Uint32	?
                              C union hidden
                              C ifndef defined
                              C defined macro x
                              C ifdef x
                              C   exitm <1>
                              C else
                              C   exitm <0>
                              C endif
                              C endm
                              C endif
                              C if defined(__ANDROID__)
                              C struct androidio
                              C fileNameRef	DWORD	?
                              C inputStreamRef	DWORD	?
                              C readableByteChannelRef	DWORD	?
                              C readMethod	DWORD	?
                              C assetFileDescriptorRef	DWORD	?
                              C position	SDWORD	?
                              C size_	SDWORD	?
                              C offset_	SDWORD	?
                              C fd	DWORD	?
                              C ends
                              C elseif defined(__WIN32__)
                              C struct windowsio
                              C append	SDL_bool	?
                              C h	DWORD	?
                              C struct buffer
                              C data	DWORD	?
                              C size_	size_t	?
                              C left	size_t	?
                              C ends
                              C ends
                              C endif 
                              C ifdef HAVE_STDIO_H
                              C struct stdio
                              C autoclose	SDL_bool	?
                              C fp	DWORD	?
                              C ends
                              C endif 
                              C struct mem
                              C base	DWORD	?
                              C here	DWORD	?
                              C stop	DWORD	?
                              C ends
                              C struct unknown
                              C data1	DWORD	?
                              C data2	DWORD	?
                              C ends
                              C ends
                              C SDL_RWops	ends
                              C 
                              C SDL_RWFromFile proto  :ptr SBYTE, :ptr SBYTE
                              C ifdef HAVE_STDIO_H
                              C SDL_RWFromFP proto  :ptr FILE, :SDL_bool
                              C else 
                              C SDL_RWFromFP proto  :ptr , :SDL_bool
                              C endif 
                              C SDL_RWFromMem proto  :ptr , :DWORD
                              C SDL_RWFromConstMem proto  :ptr , :DWORD
                              C SDL_AllocRW proto  
                              C SDL_FreeRW proto  :ptr SDL_RWops
                              C RW_SEEK_SET	EQU	0
                              C RW_SEEK_CUR	EQU	1
                              C RW_SEEK_END	EQU	2
                              C SDL_RWsize proto  :ptr SDL_RWops
                              C SDL_RWseek proto  :ptr SDL_RWops, :Sint64, :DWORD
                              C SDL_RWtell proto  :ptr SDL_RWops
                              C SDL_RWread proto  :ptr SDL_RWops, :ptr , :size_t, :size_t
                              C SDL_RWwrite proto  :ptr SDL_RWops, :ptr , :size_t, :size_t
                              C SDL_RWclose proto  :ptr SDL_RWops
                              C SDL_LoadFile_RW proto  :ptr SDL_RWops, :ptr size_t, :DWORD
                              C SDL_LoadFile proto  :ptr SBYTE, :ptr size_t
                              C SDL_ReadU8 proto  :ptr SDL_RWops
                              C SDL_ReadLE16 proto  :ptr SDL_RWops
                              C SDL_ReadBE16 proto  :ptr SDL_RWops
                              C SDL_ReadLE32 proto  :ptr SDL_RWops
                              C SDL_ReadBE32 proto  :ptr SDL_RWops
                              C SDL_ReadLE64 proto  :ptr SDL_RWops
                              C SDL_ReadBE64 proto  :ptr SDL_RWops
                              C SDL_WriteU8 proto  :ptr SDL_RWops, :Uint8
                              C SDL_WriteLE16 proto  :ptr SDL_RWops, :Uint16
                              C SDL_WriteBE16 proto  :ptr SDL_RWops, :Uint16
                              C SDL_WriteLE32 proto  :ptr SDL_RWops, :Uint32
                              C SDL_WriteBE32 proto  :ptr SDL_RWops, :Uint32
                              C SDL_WriteLE64 proto  :ptr SDL_RWops, :Uint64
                              C SDL_WriteBE64 proto  :ptr SDL_RWops, :Uint64
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C ;	include close_code.inc
                              C endif 
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
                              C SDL_AudioFormat typedef Uint16
 = FF                         C SDL_AUDIO_MASK_BITSIZE	EQU	0FFh
 = 100                        C SDL_AUDIO_MASK_DATATYPE	EQU	( 1  shl  8 )
 = 1000                       C SDL_AUDIO_MASK_ENDIAN	EQU	( 1  shl  12 )
 = 8000                       C SDL_AUDIO_MASK_SIGNED	EQU	( 1  shl  15 )
                              C SDL_AUDIO_BITSIZE macro x
 >                            C 	exitm <( x  and  SDL_AUDIO_MASK_BITSIZE ) >
 >                            C 	endm
                              C SDL_AUDIO_ISFLOAT macro x
 >                            C 	exitm <( x  and  SDL_AUDIO_MASK_DATATYPE ) >
 >                            C 	endm
                              C SDL_AUDIO_ISBIGENDIAN macro x
 >                            C 	exitm <( x  and  SDL_AUDIO_MASK_ENDIAN ) >
 >                            C 	endm
                              C SDL_AUDIO_ISSIGNED macro x
 >                            C 	exitm <( x  and  SDL_AUDIO_MASK_SIGNED ) >
 >                            C 	endm
                              C SDL_AUDIO_ISINT macro x
 >                            C 	exitm <( ! SDL_AUDIO_ISFLOAT ( x ) ) >
 >                            C 	endm
                              C SDL_AUDIO_ISLITTLEENDIAN macro x
 >                            C 	exitm <( ! SDL_AUDIO_ISBIGENDIAN ( x ) ) >
 >                            C 	endm
                              C SDL_AUDIO_ISUNSIGNED macro x
 >                            C 	exitm <( ! SDL_AUDIO_ISSIGNED ( x ) ) >
 >                            C 	endm
 = 8                          C AUDIO_U8	EQU	0008h
 = 8008                       C AUDIO_S8	EQU	8008h
 = 10                         C AUDIO_U16LSB	EQU	0010h
 = 8010                       C AUDIO_S16LSB	EQU	8010h
 = 1010                       C AUDIO_U16MSB	EQU	1010h
 = 9010                       C AUDIO_S16MSB	EQU	9010h
 = AUDIO_U16LSB               C AUDIO_U16	EQU	<AUDIO_U16LSB>
 = AUDIO_S16LSB               C AUDIO_S16	EQU	<AUDIO_S16LSB>
 = 8020                       C AUDIO_S32LSB	EQU	8020h
 = 9020                       C AUDIO_S32MSB	EQU	9020h
 = AUDIO_S32LSB               C AUDIO_S32	EQU	<AUDIO_S32LSB>
 = 8120                       C AUDIO_F32LSB	EQU	8120h
 = 9120                       C AUDIO_F32MSB	EQU	9120h
 = AUDIO_F32LSB               C AUDIO_F32	EQU	<AUDIO_F32LSB>
                              C ;if SDL_BYTEORDER eq SDL_LIL_ENDIAN
 = AUDIO_U16LSB               C AUDIO_U16SYS	EQU	<AUDIO_U16LSB>
 = AUDIO_S16LSB               C AUDIO_S16SYS	EQU	<AUDIO_S16LSB>
 = AUDIO_S32LSB               C AUDIO_S32SYS	EQU	<AUDIO_S32LSB>
 = AUDIO_F32LSB               C AUDIO_F32SYS	EQU	<AUDIO_F32LSB>
                              C ;else 
                              C ;AUDIO_U16SYS	EQU	<AUDIO_U16MSB>
                              C ;AUDIO_S16SYS	EQU	<AUDIO_S16MSB>
                              C ;AUDIO_S32SYS	EQU	<AUDIO_S32MSB>
                              C ;AUDIO_F32SYS	EQU	<AUDIO_F32MSB>
                              C ;endif 
 = 1                          C SDL_AUDIO_ALLOW_FREQUENCY_CHANGE	EQU	00000001h
 = 2                          C SDL_AUDIO_ALLOW_FORMAT_CHANGE	EQU	00000002h
 = 4                          C SDL_AUDIO_ALLOW_CHANNELS_CHANGE	EQU	00000004h
 = 8                          C SDL_AUDIO_ALLOW_SAMPLES_CHANGE	EQU	00000008h
 = F                          C SDL_AUDIO_ALLOW_ANY_CHANGE	EQU	( SDL_AUDIO_ALLOW_FREQUENCY_CHANGE  or  SDL_AUDIO_ALLOW_FORMAT_CHANGE  or  SDL_AUDIO_ALLOW_CHANNELS_CHANGE  or  SDL_AUDIO_ALLOW_SAMPLES_CHANGE )
                              C proto_SDL_AudioCallback typedef proto  :ptr ,:ptr Uint8,:DWORD
                              C SDL_AudioCallback typedef ptr proto_SDL_AudioCallback
00000000                      C SDL_AudioSpec	struct 
00000000                      C freq	DWORD	?
00000004                      C format	SDL_AudioFormat	?
00000006                      C channels	Uint8	?
00000007                      C silence	Uint8	?
00000008                      C samples	Uint16	?
0000000A                      C padding	Uint16	?
0000000C                      C size_	Uint32	?
00000010                      C callback	SDL_AudioCallback	?
00000018                      C userdata	DWORD	?
00000020                      C SDL_AudioSpec	ends
                              C 
                              C proto_SDL_AudioFilter typedef proto  :ptr SDL_AudioCVT,:SDL_AudioFormat
                              C SDL_AudioFilter typedef ptr proto_SDL_AudioFilter
 = 9                          C SDL_AUDIOCVT_MAX_FILTERS	EQU	9
00000000                      C sSDL_AudioCVT	struct 
00000000                      C needed	DWORD	?
00000004                      C src_format	SDL_AudioFormat	?
00000006                      C dst_format	SDL_AudioFormat	?
00000008                      C rate_incr	REAL8	?
00000010                      C buf	DWORD	?
00000014                      C len	DWORD	?
00000018                      C len_cvt	DWORD	?
0000001C                      C len_mult	DWORD	?
00000020                      C len_ratio	REAL8	?
00000028                      C filters	SDL_AudioFilter SDL_AUDIOCVT_MAX_FILTERS+1 dup (?)
00000078                      C filter_index	DWORD	?
00000080                      C sSDL_AudioCVT	ends
                              C 
                              C SDL_AudioCVT typedef sSDL_AudioCVT
                              C 
                              C SDL_GetNumAudioDrivers proto  
                              C SDL_GetAudioDriver proto  :DWORD
                              C SDL_AudioInit proto  :ptr SBYTE
                              C SDL_AudioQuit proto  
                              C SDL_GetCurrentAudioDriver proto  
                              C SDL_OpenAudio proto  :ptr SDL_AudioSpec, :ptr SDL_AudioSpec
                              C SDL_AudioDeviceID typedef Uint32
                              C SDL_GetNumAudioDevices proto  :DWORD
                              C SDL_GetAudioDeviceName proto  :DWORD, :DWORD
                              C SDL_OpenAudioDevice proto  :ptr SBYTE, :DWORD, :ptr SDL_AudioSpec, :ptr SDL_AudioSpec, :DWORD
                              C SDL_AudioStatus typedef DWORD
 = 0                          C SDL_AUDIO_STOPPED = 0 
 = 1                          C SDL_AUDIO_PLAYING = 1
 = 2                          C SDL_AUDIO_PAUSED = 2
                              C 
                              C SDL_GetAudioStatus proto  
                              C SDL_GetAudioDeviceStatus proto  :SDL_AudioDeviceID
                              C SDL_PauseAudio proto  :DWORD
                              C SDL_PauseAudioDevice proto  :SDL_AudioDeviceID, :DWORD
                              C SDL_LoadWAV_RW proto  :ptr SDL_RWops, :DWORD, :ptr SDL_AudioSpec, :ptr ptr Uint8, :ptr Uint32
                              C SDL_LoadWAV macro file,spec,audio_buf,audio_len
 >                            C 	exitm <SDL_LoadWAV_RW ( SDL_RWFromFile ( file , "rb" ) , 1 , spec , audio_buf , audio_len ) >
 >                            C 	endm
                              C SDL_FreeWAV proto  :ptr Uint8
                              C SDL_BuildAudioCVT proto  :ptr SDL_AudioCVT, :SDL_AudioFormat, :Uint8, :DWORD, :SDL_AudioFormat, :Uint8, :DWORD
                              C SDL_ConvertAudio proto  :ptr SDL_AudioCVT
                              C ;SDL_AudioStream typedef _SDL_AudioStream
                              C 
                              C SDL_NewAudioStream proto  :SDL_AudioFormat, :Uint8, :DWORD, :SDL_AudioFormat, :Uint8, :DWORD
                              C SDL_AudioStreamPut proto  :ptr SDL_AudioStream, :ptr , :DWORD
                              C SDL_AudioStreamGet proto  :ptr SDL_AudioStream, :ptr , :DWORD
                              C SDL_AudioStreamAvailable proto  :ptr SDL_AudioStream
                              C SDL_AudioStreamFlush proto  :ptr SDL_AudioStream
                              C SDL_AudioStreamClear proto  :ptr SDL_AudioStream
                              C SDL_FreeAudioStream proto  :ptr SDL_AudioStream
 = 80                         C SDL_MIX_MAXVOLUME	EQU	128
                              C SDL_MixAudio proto  :ptr Uint8, :ptr Uint8, :Uint32, :DWORD
                              C SDL_MixAudioFormat proto  :ptr Uint8, :ptr Uint8, :SDL_AudioFormat, :Uint32, :DWORD
                              C SDL_QueueAudio proto  :SDL_AudioDeviceID, :ptr , :Uint32
                              C SDL_DequeueAudio proto  :SDL_AudioDeviceID, :ptr , :Uint32
                              C SDL_GetQueuedAudioSize proto  :SDL_AudioDeviceID
                              C SDL_ClearQueuedAudio proto  :SDL_AudioDeviceID
                              C SDL_LockAudio proto  
                              C SDL_LockAudioDevice proto  :SDL_AudioDeviceID
                              C SDL_UnlockAudio proto  
                              C SDL_UnlockAudioDevice proto  :SDL_AudioDeviceID
                              C SDL_CloseAudio proto  
                              C SDL_CloseAudioDevice proto  :SDL_AudioDeviceID
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C 	;include close_code.inc
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C 	;include SDL_endian.inc
                              C 	;include SDL_version.inc
                              C 	;include begin_code.inc
                              C ifdef __cplusplus
                              C ;extern "C"
                              C ;{
                              C endif 
 = 2                          C SDL_MIXER_MAJOR_VERSION	EQU	2
 = 0                          C SDL_MIXER_MINOR_VERSION	EQU	0
 = 4                          C SDL_MIXER_PATCHLEVEL	EQU	4
                              C SDL_MIXER_VERSION macro X
 >                            C 	exitm <{ ( X ) -> major = SDL_MIXER_MAJOR_VERSION ; ( X ) -> minor = SDL_MIXER_MINOR_VERSION ; ( X ) -> patch = SDL_MIXER_PATCHLEVEL ; } >
 >                            C 	endm
 = SDL_MIXER_MAJOR_VERSION    C MIX_MAJOR_VERSION	EQU	<SDL_MIXER_MAJOR_VERSION>
 = SDL_MIXER_MINOR_VERSION    C MIX_MINOR_VERSION	EQU	<SDL_MIXER_MINOR_VERSION>
 = SDL_MIXER_PATCHLEVEL       C MIX_PATCHLEVEL	EQU	<SDL_MIXER_PATCHLEVEL>
                              C MIX_VERSION macro X
 >                            C 	exitm <SDL_MIXER_VERSION ( X ) >
 >                            C 	endm
 = SDL_VERSIONNUM ( SDL_MIXE  C SDL_MIXER_COMPILEDVERSION	EQU	<SDL_VERSIONNUM ( SDL_MIXER_MAJOR_VERSION , SDL_MIXER_MINOR_VERSION , SDL_MIXER_PATCHLEVEL )>
   R_MAJOR_VERSION , SDL_MIX    
   ER_MINOR_VERSION , SDL_MI    
   XER_PATCHLEVEL )             
                              C SDL_MIXER_VERSION_ATLEAST macro X,Y,Z
 >                            C 	exitm <( SDL_MIXER_COMPILEDVERSION >= SDL_VERSIONNUM ( X , Y , Z ) ) >
 >                            C 	endm
                              C Mix_Linked_Version proto  
                              C MIX_InitFlags typedef DWORD
 = 1                          C MIX_INIT_FLAC = 00000001h 
 = 2                          C MIX_INIT_MOD = 00000002h 
 = 8                          C MIX_INIT_MP3 = 00000008h 
 = 10                         C MIX_INIT_OGG = 00000010h 
 = 20                         C MIX_INIT_MID = 00000020h 
 = 40                         C MIX_INIT_OPUS = 00000040h 
                              C 
                              C Mix_Init proto  :DWORD
                              C Mix_Quit proto  
                              C ifndef MIX_CHANNELS
 = 8                          C MIX_CHANNELS	EQU	8
                              C endif 
 = 5622                       C MIX_DEFAULT_FREQUENCY	EQU	22050
                              C ;if SDL_BYTEORDER eq SDL_LIL_ENDIAN
 = AUDIO_S16LSB               C MIX_DEFAULT_FORMAT	EQU	<AUDIO_S16LSB>
                              C ;else 
                              C ;MIX_DEFAULT_FORMAT	EQU	<AUDIO_S16MSB>
                              C ;endif 
 = 2                          C MIX_DEFAULT_CHANNELS	EQU	2
 = SDL_MIX_MAXVOLUME          C MIX_MAX_VOLUME	EQU	<SDL_MIX_MAXVOLUME>
00000000                      C Mix_Chunk	struct 
00000000                      C allocated	DWORD	?
00000004                      C abuf	DWORD	?
00000008                      C alen	Uint32	?
0000000C                      C volume	Uint8	?
00000010                      C Mix_Chunk	ends
                              C 
                              C Mix_Fading typedef DWORD
 = 0                          C MIX_NO_FADING = 0
 = 1                          C MIX_FADING_OUT = 1
 = 2                          C MIX_FADING_IN = 2
                              C 
                              C Mix_MusicType typedef DWORD
 = 0                          C MUS_NONE = 0
 = 1                          C MUS_CMD = 1
 = 2                          C MUS_WAV = 2
 = 3                          C MUS_MOD = 3
 = 4                          C MUS_MID = 4
 = 5                          C MUS_OGG = 5
 = 6                          C MUS_MP3 = 6
 = 7                          C MUS_MP3_MAD_UNUSED = 7
 = 8                          C MUS_FLAC = 8
 = 9                          C MUS_MODPLUG_UNUSED = 9
 = A                          C MUS_OPUS = 10
                              C 
                              C ;Mix_Music typedef _Mix_Music
                              C 
                              C Mix_OpenAudio proto  :DWORD, :Uint16, :DWORD, :DWORD
                              C Mix_OpenAudioDevice proto  :DWORD, :Uint16, :DWORD, :DWORD, :ptr SBYTE, :DWORD
                              C Mix_AllocateChannels proto  :DWORD
                              C Mix_QuerySpec proto  :ptr DWORD, :ptr Uint16, :ptr DWORD
                              C Mix_LoadWAV_RW proto  :ptr SDL_RWops, :DWORD
                              C Mix_LoadWAV macro file
 >                            C 	exitm <Mix_LoadWAV_RW ( SDL_RWFromFile ( file , "rb" ) , 1 ) >
 >                            C 	endm
                              C Mix_LoadMUS proto  :ptr SBYTE
                              C Mix_LoadMUS_RW proto  :ptr SDL_RWops, :DWORD
                              C Mix_LoadMUSType_RW proto  :ptr SDL_RWops, :Mix_MusicType, :DWORD
                              C Mix_QuickLoad_WAV proto  :ptr Uint8
                              C Mix_QuickLoad_RAW proto  :ptr Uint8, :Uint32
                              C Mix_FreeChunk proto  :ptr Mix_Chunk
                              C Mix_FreeMusic proto  :ptr Mix_Music
                              C Mix_GetNumChunkDecoders proto  
                              C Mix_GetChunkDecoder proto  :DWORD
                              C Mix_HasChunkDecoder proto  :ptr SBYTE
                              C Mix_GetNumMusicDecoders proto  
                              C Mix_GetMusicDecoder proto  :DWORD
                              C Mix_HasMusicDecoder proto  :ptr SBYTE
                              C Mix_GetMusicType proto  :ptr Mix_Music
                              C Mix_SetPostMix proto  :ptr , :ptr 
                              C Mix_HookMusic proto  :ptr , :ptr 
                              C Mix_HookMusicFinished proto  :ptr 
                              C Mix_GetMusicHookData proto  
                              C Mix_ChannelFinished proto  :ptr 
 = FFFFFFFE                   C MIX_CHANNEL_POST	EQU	- 2
                              C proto_Mix_EffectFunc_t typedef proto  :DWORD,:ptr ,:DWORD,:ptr 
                              C Mix_EffectFunc_t typedef ptr proto_Mix_EffectFunc_t
                              C proto_Mix_EffectDone_t typedef proto  :DWORD,:ptr 
                              C Mix_EffectDone_t typedef ptr proto_Mix_EffectDone_t
                              C Mix_RegisterEffect proto  :DWORD, :Mix_EffectFunc_t, :Mix_EffectDone_t, :ptr 
                              C Mix_UnregisterEffect proto  :DWORD, :Mix_EffectFunc_t
                              C Mix_UnregisterAllEffects proto  :DWORD
 = "MIX_EFFECTSMAXSPEED"      C MIX_EFFECTSMAXSPEED	EQU	<"MIX_EFFECTSMAXSPEED">
                              C Mix_SetPanning proto  :DWORD, :Uint8, :Uint8
                              C Mix_SetPosition proto  :DWORD, :Sint16, :Uint8
                              C Mix_SetDistance proto  :DWORD, :Uint8
                              C if 0
                              C Mix_SetReverb proto  :DWORD, :Uint8
                              C endif 
                              C Mix_SetReverseStereo proto  :DWORD, :DWORD
                              C Mix_ReserveChannels proto  :DWORD
                              C Mix_GroupChannel proto  :DWORD, :DWORD
                              C Mix_GroupChannels proto  :DWORD, :DWORD, :DWORD
                              C Mix_GroupAvailable proto  :DWORD
                              C Mix_GroupCount proto  :DWORD
                              C Mix_GroupOldest proto  :DWORD
                              C Mix_GroupNewer proto  :DWORD
                              C Mix_PlayChannel macro channel,chunk,loops
 >                            C 	exitm <Mix_PlayChannelTimed ( channel , chunk , loops , - 1 ) >
 >                            C 	endm
                              C Mix_PlayChannelTimed proto  :DWORD, :ptr Mix_Chunk, :DWORD, :DWORD
                              C Mix_PlayMusic proto  :ptr Mix_Music, :DWORD
                              C Mix_FadeInMusic proto  :ptr Mix_Music, :DWORD, :DWORD
                              C Mix_FadeInMusicPos proto  :ptr Mix_Music, :DWORD, :DWORD, :REAL8
                              C Mix_FadeInChannel macro channel,chunk,loops,ms
 >                            C 	exitm <Mix_FadeInChannelTimed ( channel , chunk , loops , ms , - 1 ) >
 >                            C 	endm
                              C Mix_FadeInChannelTimed proto  :DWORD, :ptr Mix_Chunk, :DWORD, :DWORD, :DWORD
                              C Mix_Volume proto  :DWORD, :DWORD
                              C Mix_VolumeChunk proto  :ptr Mix_Chunk, :DWORD
                              C Mix_VolumeMusic proto  :DWORD
                              C Mix_HaltChannel proto  :DWORD
                              C Mix_HaltGroup proto  :DWORD
                              C Mix_HaltMusic proto  
                              C Mix_ExpireChannel proto  :DWORD, :DWORD
                              C Mix_FadeOutChannel proto  :DWORD, :DWORD
                              C Mix_FadeOutGroup proto  :DWORD, :DWORD
                              C Mix_FadeOutMusic proto  :DWORD
                              C Mix_FadingMusic proto  
                              C Mix_FadingChannel proto  :DWORD
                              C Mix_Pause proto  :DWORD
                              C Mix_Resume proto  :DWORD
                              C Mix_Paused proto  :DWORD
                              C Mix_PauseMusic proto  
                              C Mix_ResumeMusic proto  
                              C Mix_RewindMusic proto  
                              C Mix_PausedMusic proto  
                              C Mix_SetMusicPosition proto  :REAL8
                              C Mix_Playing proto  :DWORD
                              C Mix_PlayingMusic proto  
                              C Mix_SetMusicCMD proto  :ptr SBYTE
                              C Mix_SetSynchroValue proto  :DWORD
                              C Mix_GetSynchroValue proto  
                              C Mix_SetSoundFonts proto  :ptr SBYTE
                              C Mix_GetSoundFonts proto  
                              C Mix_EachSoundFont proto  :ptr , :ptr 
                              C Mix_GetChunk proto  :DWORD
                              C Mix_CloseAudio proto  
 = SDL_SetError               C Mix_SetError	EQU	<SDL_SetError>
 = SDL_GetError               C Mix_GetError	EQU	<SDL_GetError>
 = SDL_ClearError             C Mix_ClearError	EQU	<SDL_ClearError>
                              C ifdef __cplusplus
                              C ;}
                              C endif 
                              C 	;include close_code.inc
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                                ; include Code files
                                include LTexture.asm
                              C 
                              C include LTexture.inc
                              C 
                              C ifndef LTexture_INC_
 =                            C LTexture_INC_ EQU <>
                              C 
00000000                      C LTexture struct
00000000                      C 	m_Width		DWORD ?
00000004                      C 	m_Height 	DWORD ?
00000008                      C 	m_Texture	QWORD ?
00000010                      C LTexture ends
                              C 
                              C endif 
                              C include SDL.inc
                              C ; SDL.h
                              C 
                              C ifndef SDL_h_
                              C SDL_h_	EQU	<>
                              C Uint16	typedef WORD
                              C Sint16	typedef SWORD
                              C Sint32	typedef SDWORD
                              C Uint32 	typedef DWORD
                              C Uint8	typedef BYTE
                              C Sint8	typedef SBYTE
                              C SDL_Bool typedef BYTE
                              C Sint64 	typedef QWORD
                              C Uint64 	typedef QWORD
                              C size_t 	typedef QWORD
                              C ;include SDL_main.inc
                              C ;include SDL_stdinc.inc
                              C ;include SDL_assert.inc
                              C ;include SDL_atomic.inc
                              C ;include SDL_audio.inc
                              C ;include SDL_clipboard.inc
                              C ;include SDL_cpuinfo.inc
                              C ;include SDL_endian.inc
                              C include SDL_error.inc
                              C include SDL_events.inc
                              C ;include SDL_filesystem.inc
                              C ;include SDL_gamecontroller.inc
                              C ;include SDL_haptic.inc
                              C ;include SDL_hints.inc
                              C ;include SDL_joystick.inc
                              C ;include SDL_loadso.inc
                              C ;include SDL_log.inc
                              C ;include SDL_messagebox.inc
                              C ;include SDL_metal.inc
                              C ;include SDL_mutex.inc
                              C ;include SDL_power.inc
                              C include SDL_render.inc
                              C ;include SDL_rwops.inc
                              C ;include SDL_sensor.inc
                              C ;include SDL_shape.inc
                              C ;include SDL_system.inc
                              C ;include SDL_thread.inc
                              C include SDL_timer.inc
                              C ;include SDL_version.inc
                              C include SDL_video.inc
                              C 
                              C SDL_INIT_TIMER				EQU	00000001h
                              C SDL_INIT_AUDIO				EQU	00000010h
                              C SDL_INIT_VIDEO				EQU	00000020h
                              C SDL_INIT_JOYSTICK			EQU	00000200h
                              C SDL_INIT_HAPTIC				EQU	00001000h
                              C SDL_INIT_GAMECONTROLLER		EQU	00002000h
                              C SDL_INIT_EVENTS				EQU	00004000h
                              C SDL_INIT_SENSOR				EQU	00008000h
                              C SDL_INIT_NOPARACHUTE		EQU	00100000h
                              C SDL_INIT_EVERYTHING			EQU	( SDL_INIT_TIMER  or  SDL_INIT_AUDIO  or  SDL_INIT_VIDEO  or  SDL_INIT_EVENTS  or  SDL_INIT_JOYSTICK  or  SDL_INIT_HAPTIC  or  SDL_INIT_GAMECONTROLLER  or  SDL_INIT_SENSOR )
                              C 
                              C SDL_Init proto 	:DWORD
                              C SDL_InitSubSystem proto	:DWORD
                              C SDL_QuitSubSystem proto	:DWORD
                              C SDL_WasInit proto	:DWORD
                              C SDL_Quit proto  
                              C 
                              C endif 
                              C include SDL_pixels.INC
                              C ;--- include file created by h2incx v0.99.20 (copyright 2005-2009 japheth)
                              C ;--- source file: C:\Users\debugg\My Projects\Librerias\SDL2-devel-2.0.12-VC\include\SDL_pixels.h, last modified: 3/11/2020 3:39
                              C ;--- cmdline used for creation:  SDL_pixels.h
                              C 
                              C ifndef SDL_pixels_h_
                              C SDL_pixels_h_	EQU	<>
                              C 	;include SDL_endian.inc
                              C 
                              C SDL_ALPHA_OPAQUE	EQU	255
                              C SDL_ALPHA_TRANSPARENT	EQU	0
                              C SDL_PixelType typedef DWORD
                              C SDL_PIXELTYPE_UNKNOWN = 0
                              C SDL_PIXELTYPE_INDEX1 = 1
                              C SDL_PIXELTYPE_INDEX4 = 2
                              C SDL_PIXELTYPE_INDEX8 = 3
                              C SDL_PIXELTYPE_PACKED8 = 4
                              C SDL_PIXELTYPE_PACKED16 = 5
                              C SDL_PIXELTYPE_PACKED32 = 6
                              C SDL_PIXELTYPE_ARRAYU8 = 7
                              C SDL_PIXELTYPE_ARRAYU16 = 8
                              C SDL_PIXELTYPE_ARRAYU32 = 9
                              C SDL_PIXELTYPE_ARRAYF16 = 10
                              C SDL_PIXELTYPE_ARRAYF32 = 11
                              C 
                              C SDL_BitmapOrder typedef DWORD
                              C SDL_BITMAPORDER_NONE = 0
                              C SDL_BITMAPORDER_4321 = 1
                              C SDL_BITMAPORDER_1234 = 2
                              C 
                              C SDL_PackedOrder typedef DWORD
                              C SDL_PACKEDORDER_NONE = 0
                              C SDL_PACKEDORDER_XRGB = 1
                              C SDL_PACKEDORDER_RGBX = 2
                              C SDL_PACKEDORDER_ARGB = 3
                              C SDL_PACKEDORDER_RGBA = 4
                              C SDL_PACKEDORDER_XBGR = 5
                              C SDL_PACKEDORDER_BGRX = 6
                              C SDL_PACKEDORDER_ABGR = 7
                              C SDL_PACKEDORDER_BGRA = 8
                              C 
                              C SDL_ArrayOrder typedef DWORD
                              C SDL_ARRAYORDER_NONE = 0
                              C SDL_ARRAYORDER_RGB = 1
                              C SDL_ARRAYORDER_RGBA = 2
                              C SDL_ARRAYORDER_ARGB = 3
                              C SDL_ARRAYORDER_BGR = 4
                              C SDL_ARRAYORDER_BGRA = 5
                              C SDL_ARRAYORDER_ABGR = 6
                              C 
                              C SDL_PackedLayout typedef DWORD
                              C SDL_PACKEDLAYOUT_NONE = 0
                              C SDL_PACKEDLAYOUT_332 = 1
                              C SDL_PACKEDLAYOUT_4444 = 2
                              C SDL_PACKEDLAYOUT_1555 = 3
                              C SDL_PACKEDLAYOUT_5551 = 4
                              C SDL_PACKEDLAYOUT_565 = 5
                              C SDL_PACKEDLAYOUT_8888 = 6
                              C SDL_PACKEDLAYOUT_2101010 = 7
                              C SDL_PACKEDLAYOUT_1010102 = 8
                              C 
                              C SDL_DEFINE_PIXELFOURCC macro A,B,C,D
                              C 	exitm <SDL_FOURCC ( A , B , C , D ) >
                              C 	endm
                              C SDL_DEFINE_PIXELFORMAT macro type,order,layout,bits,bytes
                              C 	exitm <( ( 1  shl  28 )  or  ( ( type )  shl  24 )  or  ( ( order )  shl  20 )  or  ( ( layout )  shl  16 )  or  ( ( bits )  shl  8 )  or  ( ( bytes )  shl  0 ) ) >
                              C 	endm
                              C SDL_PIXELFLAG macro X
                              C 	exitm <( ( ( X )  shr  28 )  and  0Fh ) >
                              C 	endm
                              C mSDL_PIXELTYPE macro X
                              C 	exitm <( ( ( X )  shr  24 )  and  0Fh ) >
                              C 	endm
                              C SDL_PIXELORDER macro X
                              C 	exitm <( ( ( X )  shr  20 )  and  0Fh ) >
                              C 	endm
                              C SDL_PIXELLAYOUT macro X
                              C 	exitm <( ( ( X )  shr  16 )  and  0Fh ) >
                              C 	endm
                              C SDL_BITSPERPIXEL macro X
                              C 	exitm <( ( ( X )  shr  8 )  and  0FFh ) >
                              C 	endm
                              C SDL_BYTESPERPIXEL macro X
                              C 	exitm <( SDL_ISPIXELFORMAT_FOURCC ( X ) ? ( ( ( ( X ) == SDL_PIXELFORMAT_YUY2 ) || ( ( X ) == SDL_PIXELFORMAT_UYVY ) || ( ( X ) == SDL_PIXELFORMAT_YVYU ) ) ? 2 : 1 ) : ( ( ( X )  shr  0 )  and  0FFh ) ) >
                              C 	endm
                              C SDL_ISPIXELFORMAT_INDEXED macro format
                              C 	exitm <( ! SDL_ISPIXELFORMAT_FOURCC ( format ) && ( ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_INDEX1 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_INDEX4 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_INDEX8 ) ) ) >
                              C 	endm
                              C SDL_ISPIXELFORMAT_PACKED macro format
                              C 	exitm <( ! SDL_ISPIXELFORMAT_FOURCC ( format ) && ( ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_PACKED8 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_PACKED16 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_PACKED32 ) ) ) >
                              C 	endm
                              C SDL_ISPIXELFORMAT_ARRAY macro format
                              C 	exitm <( ! SDL_ISPIXELFORMAT_FOURCC ( format ) && ( ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYU8 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYU16 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYU32 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYF16 ) || ( SDL_PIXELTYPE ( format ) == SDL_PIXELTYPE_ARRAYF32 ) ) ) >
                              C 	endm
                              C SDL_ISPIXELFORMAT_ALPHA macro format
                              C 	exitm <( ( SDL_ISPIXELFORMAT_PACKED ( format ) && ( ( SDL_PIXELORDER ( format ) == SDL_PACKEDORDER_ARGB ) || ( SDL_PIXELORDER ( format ) == SDL_PACKEDORDER_RGBA ) || ( SDL_PIXELORDER ( format ) == SDL_PACKEDORDER_ABGR ) || ( SDL_PIXELORDER ( format ) == SDL_PACKEDORDER_BGRA ) ) ) || ( SDL_ISPIXELFORMAT_ARRAY ( format ) && ( ( SDL_PIXELORDER ( format ) == SDL_ARRAYORDER_ARGB ) || ( SDL_PIXELORDER ( format ) == SDL_ARRAYORDER_RGBA ) || ( SDL_PIXELORDER ( format ) == SDL_ARRAYORDER_ABGR ) || ( SDL_PIXELORDER ( format ) == SDL_ARRAYORDER_BGRA ) ) ) ) >
                              C 	endm
                              C SDL_ISPIXELFORMAT_FOURCC macro format
                              C 	exitm <( ( format ) && ( SDL_PIXELFLAG ( format ) != 1 ) ) >
                              C 	endm
                              C SDL_PixelFormatEnum typedef DWORD
                              C SDL_PIXELFORMAT_UNKNOWN = 0
                              C SDL_PIXELFORMAT_INDEX1LSB = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX1 , SDL_BITMAPORDER_4321 , 0 , 1 , 0)
                              C SDL_PIXELFORMAT_INDEX1MSB = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX1 , SDL_BITMAPORDER_1234 , 0 , 1 , 0)
                              C SDL_PIXELFORMAT_INDEX4LSB = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX4 , SDL_BITMAPORDER_4321 , 0 , 4 , 0)
                              C SDL_PIXELFORMAT_INDEX4MSB = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX4 , SDL_BITMAPORDER_1234 , 0 , 4 , 0)
                              C SDL_PIXELFORMAT_INDEX8 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX8 , 0 , 0 , 8 , 1)
                              C SDL_PIXELFORMAT_RGB332 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED8 , SDL_PACKEDORDER_XRGB , SDL_PACKEDLAYOUT_332 , 8 , 1)
                              C SDL_PIXELFORMAT_RGB444 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_XRGB , SDL_PACKEDLAYOUT_4444 , 12 , 2)
                              C SDL_PIXELFORMAT_BGR444 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_XBGR , SDL_PACKEDLAYOUT_4444 , 12 , 2)
                              C SDL_PIXELFORMAT_RGB555 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_XRGB , SDL_PACKEDLAYOUT_1555 , 15 , 2)
                              C SDL_PIXELFORMAT_BGR555 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_XBGR , SDL_PACKEDLAYOUT_1555 , 15 , 2)
                              C SDL_PIXELFORMAT_ARGB4444 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_ARGB , SDL_PACKEDLAYOUT_4444 , 16 , 2)
                              C SDL_PIXELFORMAT_RGBA4444 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_RGBA , SDL_PACKEDLAYOUT_4444 , 16 , 2)
                              C SDL_PIXELFORMAT_ABGR4444 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_ABGR , SDL_PACKEDLAYOUT_4444 , 16 , 2)
                              C SDL_PIXELFORMAT_BGRA4444 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_BGRA , SDL_PACKEDLAYOUT_4444 , 16 , 2)
                              C SDL_PIXELFORMAT_ARGB1555 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_ARGB , SDL_PACKEDLAYOUT_1555 , 16 , 2)
                              C SDL_PIXELFORMAT_RGBA5551 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_RGBA , SDL_PACKEDLAYOUT_5551 , 16 , 2)
                              C SDL_PIXELFORMAT_ABGR1555 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_ABGR , SDL_PACKEDLAYOUT_1555 , 16 , 2)
                              C SDL_PIXELFORMAT_BGRA5551 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_BGRA , SDL_PACKEDLAYOUT_5551 , 16 , 2)
                              C SDL_PIXELFORMAT_RGB565 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_XRGB , SDL_PACKEDLAYOUT_565 , 16 , 2)
                              C SDL_PIXELFORMAT_BGR565 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16 , SDL_PACKEDORDER_XBGR , SDL_PACKEDLAYOUT_565 , 16 , 2)
                              C SDL_PIXELFORMAT_RGB24 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_ARRAYU8 , SDL_ARRAYORDER_RGB , 0 , 24 , 3)
                              C SDL_PIXELFORMAT_BGR24 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_ARRAYU8 , SDL_ARRAYORDER_BGR , 0 , 24 , 3)
                              C SDL_PIXELFORMAT_RGB888 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_XRGB , SDL_PACKEDLAYOUT_8888 , 24 , 4)
                              C SDL_PIXELFORMAT_RGBX8888 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_RGBX , SDL_PACKEDLAYOUT_8888 , 24 , 4)
                              C SDL_PIXELFORMAT_BGR888 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_XBGR , SDL_PACKEDLAYOUT_8888 , 24 , 4)
                              C SDL_PIXELFORMAT_BGRX8888 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_BGRX , SDL_PACKEDLAYOUT_8888 , 24 , 4)
                              C SDL_PIXELFORMAT_ARGB8888 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_ARGB , SDL_PACKEDLAYOUT_8888 , 32 , 4)
                              C SDL_PIXELFORMAT_RGBA8888 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_RGBA , SDL_PACKEDLAYOUT_8888 , 32 , 4)
                              C SDL_PIXELFORMAT_ABGR8888 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_ABGR , SDL_PACKEDLAYOUT_8888 , 32 , 4)
                              C SDL_PIXELFORMAT_BGRA8888 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_BGRA , SDL_PACKEDLAYOUT_8888 , 32 , 4)
                              C SDL_PIXELFORMAT_ARGB2101010 = SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32 , SDL_PACKEDORDER_ARGB , SDL_PACKEDLAYOUT_2101010 , 32 , 4)
                              C ;if SDL_BYTEORDER eq SDL_BIG_ENDIAN
                              C ;SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA8888 
                              C ;SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB8888 
                              C ;SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA8888 
                              C ;SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR8888 
                              C ;else 
                              C SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888 
                              C SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888 
                              C SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888 
                              C SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888 
                              C ;endif 
                              C ;SDL_PIXELFORMAT_YV12 = SDL_DEFINE_PIXELFOURCC( 'Y' , 'V' , '1' , '2')
                              C ;SDL_PIXELFORMAT_IYUV = SDL_DEFINE_PIXELFOURCC( 'I' , 'Y' , 'U' , 'V')
                              C ;SDL_PIXELFORMAT_YUY2 = SDL_DEFINE_PIXELFOURCC( 'Y' , 'U' , 'Y' , '2')
                              C ;SDL_PIXELFORMAT_UYVY = SDL_DEFINE_PIXELFOURCC( 'U' , 'Y' , 'V' , 'Y')
                              C ;SDL_PIXELFORMAT_YVYU = SDL_DEFINE_PIXELFOURCC( 'Y' , 'V' , 'Y' , 'U')
                              C ;SDL_PIXELFORMAT_NV12 = SDL_DEFINE_PIXELFOURCC( 'N' , 'V' , '1' , '2')
                              C ;SDL_PIXELFORMAT_NV21 = SDL_DEFINE_PIXELFOURCC( 'N' , 'V' , '2' , '1')
                              C ;SDL_PIXELFORMAT_EXTERNAL_OES = SDL_DEFINE_PIXELFOURCC( 'O' , 'E' , 'S' , ' ')
                              C 
                              C SDL_Color	struct 
                              C r	Uint8	?
                              C g	Uint8	?
                              C b	Uint8	?
                              C a	Uint8	?
                              C SDL_Color	ends
                              C 
                              C SDL_Colour	EQU	<SDL_Color>
                              C SDL_Palette	struct 
                              C ncolors	DWORD	?
                              C colors	DWORD	?
                              C version	DWORD	?
                              C refcount	DWORD	?
                              C SDL_Palette	ends
                              C 
                              C SDL_PixelFormat	struct 
                              C format	DWORD	?
                              C palette	DWORD	?
                              C BitsPerPixel	Uint8	?
                              C BytesPerPixel	Uint8	?
                              C padding	Uint8 2 dup (?)
                              C Rmask	DWORD	?
                              C Gmask	DWORD	?
                              C Bmask	DWORD	?
                              C Amask	DWORD	?
                              C Rloss	Uint8	?
                              C Gloss	Uint8	?
                              C Bloss	Uint8	?
                              C Aloss	Uint8	?
                              C Rshift	Uint8	?
                              C Gshift	Uint8	?
                              C Bshift	Uint8	?
                              C Ashift	Uint8	?
                              C refcount	DWORD	?
                              C next DWORD ?
                              C SDL_PixelFormat	ends
                              C 
                              C SDL_GetPixelFormatName proto  :Uint32
                              C SDL_PixelFormatEnumToMasks proto  :Uint32, :ptr DWORD, :ptr Uint32, :ptr Uint32, :ptr Uint32, :ptr Uint32
                              C SDL_MasksToPixelFormatEnum proto  :DWORD, :Uint32, :Uint32, :Uint32, :Uint32
                              C SDL_AllocFormat proto  :Uint32
                              C SDL_FreeFormat proto  :ptr SDL_PixelFormat
                              C SDL_AllocPalette proto  :DWORD
                              C SDL_SetPixelFormatPalette proto  :ptr SDL_PixelFormat, :ptr SDL_Palette
                              C SDL_SetPaletteColors proto  :ptr SDL_Palette, :ptr SDL_Color, :DWORD, :DWORD
                              C SDL_FreePalette proto  :ptr SDL_Palette
                              C SDL_MapRGB proto  :ptr SDL_PixelFormat, :Uint8, :Uint8, :Uint8
                              C SDL_MapRGBA proto  :ptr SDL_PixelFormat, :Uint8, :Uint8, :Uint8, :Uint8
                              C SDL_GetRGB proto  :Uint32, :ptr SDL_PixelFormat, :ptr Uint8, :ptr Uint8, :ptr Uint8
                              C SDL_GetRGBA proto  :Uint32, :ptr SDL_PixelFormat, :ptr Uint8, :ptr Uint8, :ptr Uint8, :ptr Uint8
                              C SDL_CalculateGammaRamp proto  :REAL4, :ptr Uint16
                              C endif 
                              C 
                              C ;--- errors: 0
                              C ;--- end of file ---
                              C 
                              C .const 
00000000                    * C CONST segment PARA FLAT PUBLIC 'CONST'
                            * C assume cs:ERROR
                              C 
00000000                      C .data?
                            * C CONST ends
00000000                    * C _BSS segment PARA FLAT PUBLIC 'BSS'
                            * C assume cs:ERROR
                              C 
00000000                      C .data
                            * C _BSS ends
00000000                    * C _DATA segment
                            * C assume cs:ERROR
                              C 
00000000                      C .code
                            * C _DATA ends
00000000                    * C _TEXT segment
                            * C assume cs:FLAT
                              C 
00000000                      C initTexture proc uses rdi, pTexture:QWORD
                              C 	
00000000  48894C2408        * C mov [rsp+8], rcx
00000005  57                * C push rdi
                            * C .pushreg rdi
                            * C .endprolog
00000006  488B7C2410          C 	mov rdi, pTexture
0000000B  48C7470800000000    C 	mov (LTexture PTR[rdi]).m_Texture, 0
00000013  C70700000000        C 	mov (LTexture PTR[rdi]).m_Width, 0
00000019  C7470400000000      C 	mov (LTexture PTR[rdi]).m_Height, 0
                              C 		
00000020                      C 	ret
00000020  5F                * C pop rdi
00000021  C3                * C retn 
00000000                    * C .xdata segment align(8) flat read 'DATA'
00000000                    * C $xdatasym label near
00000000  01060100          * C db 1t + (00h shl 3), 6t, 1t, 00h + (00h shl 4)
00000004  0670              * C dw 07006h
00000006  0000              * C align 4
00000008                    * C .xdata ends
00000000                    * C .pdata segment align(4) flat read 'DATA'
00000000  000000002200000000* C dd imagerel initTexture, imagerel initTexture+022h, imagerel $xdatasym+00h
0000000C                    * C .pdata ends
00000022                      C initTexture endp
                              C 
00000022                      C freeTexture proc uses rdi, pTexture:QWORD
00000022  48894C2408        * C mov [rsp+8], rcx
00000027  57                * C push rdi
                            * C .pushreg rdi
00000028  4883EC20          * C .endprolog
00000028                                     xture
00000031                                                 m_Texture!=0
00000031  48837F0800          C cmp (LTexture PTR[rdi]).m_Texture, 0
00000036  741E              * C jz  @C0001
00000038                      C 		invoke SDL_DestroyTexture, (LTexture PTR[rdi]).m_Texture
00000038  488B4F08          * C  mov rcx, (LTexture PTR[rdi]).m_Texture
0000003C  E800000000        * C  call SDL_DestroyTexture
00000041  48C7470800000000    C 		mov (LTexture PTR[rdi]).m_Texture, 0
00000049  C70700000000        C 		mov (LTexture PTR[rdi]).m_Width, 0
0000004F  C7470400000000      C 		mov (LTexture PTR[rdi]).m_Height, 0
00000056                      C 	.endif
00000056                    * C @C0001:
00000056                      C 	ret
00000056  4883C420          * C add rsp, 0 + @ReservedStack
0000005A  5F                * C pop rdi
0000005B  C3                * C retn 
00000008                    * C .xdata segment
00000008  010A0200          * C db 1t + (00h shl 3), 6t, 1t, 00h + (00h shl 4)
 0000000C  0A320670           C dw 07006h
         00000010                     4
         00000010                    a ends
0000000C 0000000C                    a segment
         0000000C  000000003A00000008agerel freeTexture, imagerel freeTexture+036h, imagerel $xdatasym+08h
         00000018                    a ends
00000058 0000005C                    exture endp
                              C 
                              C ; -----------------------------------------------------------------------------
                              C ;
                              C ; Brief:
                              C ;	- This function draw a texture or portion of it.
                              C ;
                              C ; Input:
                              C ;	- gRenderer: Pointer to the renderer
                              C ; 	- pTexture: Pointer to the LTexture data structure
                              C ;	- x: X position
                              C ;	- y: Y position
                              C ;	- clip: Pointer to the portion of the texture to show.
                              C ;
                              C ; Output:
                              C ;	- N/A
                              C ;
0000005C                      C renderTexture proc uses rsi rax rbx rcx rdx, gRenderer:QWORD, pTexture:QWORD, x:DWORD, y:DWORD, clip:PTR SDL_Rect,angle:REAL8,center:QWORD,flip:SDL_RendererFlip
                              C 	
                              C 	LOCAL renderQuad:SDL_Rect
                              C 	
0000005C  48894C2408        * C mov [rsp+16], rdx00000061  4889542410         * C mov [rsp+24], rsi00000066  4C89442418         * C .savereg rsi, 240000006B  4C894C2420         * C mov [rsp+32], rax00000070  56                  * C .savereg                                      * C push00000071  50                      * C .pus00000072  53                          * C                                       * C push00000073  51                      * C sub 00000074  52                         * C .00000075  4883EC60                         * C .endprolog
000                             	mov rsi, pTexture
00000081  8B8424A0000000                    
00000088  8B9C24A8000000    BB42498000000  
0000008F  8B0E                C 	mov ecx, (LTexture PTR[rsi]).m_Width
00000091  8B5604              C 	mov edx, (LTexture PTR[rsi]).m_Height
00000094  89442440            C 	mov renderQuad.x, eax
00000098  895C2444            C 	mov renderQuad.y, ebx
0000009C  894C2448            C 	mov renderQuad.w, ecx
000000A0  8954244C            C 	mov renderQuad.h, edx
                              C 	
000000A4  488B5E08            C 	mov rbx, (LTexture PTR [rsi]).m_Texture
                              C 	
000000A8                      C 	.if clip!=0
000000A8  4883BC24B000000000* C cmp clip, 0
000000B1  7416              * C jz  @C0002
000000B3  488BB424B0000000    C 		mov rsi, clip
000000BB  8B4E08              C 		mov ecx, (SDL_Rect PTR[rsi]).w
000000BE  8B560C              C 		mov edx, (SDL_Rect PTR[rsi]).h
000000C1  894C2448            C 		mov renderQuad.w, ecx
000000C5  8954244C            C 		mov renderQuad.h, edx
000000C9                      C 	.endif
000000C9                    * C @C0002:
                              C 	
000000C9                      C     invoke SDL_RenderCopyEx, gRenderer, rbx, clip, addr renderQuad, angle, center, flip
000000C9  488B8C2490000000  * C  mov rcx, gRenderer
000000D1  488BD3            * C  mov rdx, rbx
000000D4  4C8B8424B0000000  * C  mov r8, clip
000000DC  4C8D4C2440        * C  lea r9, renderQuad
000000E1  488B8424B8000000  * C  mov rax, angle
000000E9  4889442420        * C  mov [rsp+32], rax
000000EE  488B8424C0000000  * C  mov rax, center
000000F6  4889442428        * C  mov [rsp+40], rax
000000FB  8B8424C8000000    * C  mov eax, flip
00000102  89442430          * C  mov [rsp+48], eax
00000106  E800000000        * C  call SDL_RenderCopyEx
0000010B                      C    	ret
0000010B  4883C460          * C add rsp, 32 + @ReservedStack
0000010F  5A                * C pop rdx
00000110  59                * C pop rcx
00000111  5B                * C pop rbx
00000112  58                * C mov rsi, 00000113  5E                          * C00000114  C3                                    * C retn 
00000010                    * C .xdata segment
00000010  011D0300          * C db 1t + (00h shl 3), 22t, 6t, 00h + (00h shl 4)
00000014  1DB217301560      * C dw 03216h, 03010h, 040fh, 00000001A  0000                           0000001C                                     00000018                                     * C00000018  00000000B900000010                 * C dd imagerel renderTexture, imagerel renderTexture+09Ah, imagerel00000024                                     00000115                                       C renderTexture endp
                              C 
00000115                      C loadTextureFromFile proc uses rsi rbx, gRenderer:QWORD, pTexture:QWORD, pathToTexture:QWORD
                              C 	LOCAL bSuccess:BYTE
                              C 	LOCAL loadedSurface:QWORD
                              C 	LOCAL newTexture:QWORD
                              C 	
00000115  48894C2408        * C mov [rsp+8], rsi
0000011A  4889542410        * C .savereg rsi, 8
000000011F  4C89442418        C push rbx
          00000124  4889742420        eg rbx
000000F8                                   
                    00000129  53                                                          
000000FC        0000012A  4883EC40          s, 1
00000133  48C744243000000000                                                      C 	
0000013C  488B742458              ov rsi, pTexture0000012E  C644242001            C 	
                              C 	; First we should clean existing texture from pTexture data structure
00000141                      C 	invoke freeTexture, pTexture
00000141  488B4C2458        * C  mov rcx, pTexture
00000146  E8D7FEFFFF        * C  call freeTexture
                              C 	
0000014B                      C 	invoke IMG_Load, pathToTexture
0000014B  488B4C2460        * C  mov rcx, pathToTexture
00000150  E800000000        * C  call IMG_Load
00000155                      C 	.if rax==0
00000155  4885C0            * C test rax, rax
00000158  7507              * C jnz @C0003
0000015A  C644242000          C 		mov bSuccess, 0
0000015F  EB70                C 		jmp ERROR
00000161                      C 	.endif
00000161                    * C @C0003:
                              C 	
00000161  4889442428          C 	mov loadedSurface, rax
00000166                      C 	invoke SDL_MapRGB, (SDL_Surface PTR [rax]).format,0,0FFh, 0FFh
00000166  488B4808          * C  mov rcx, (SDL_Surface PTR [rax]).format
0000016A  32D2              * C  xor dl, dl
0000016C  41B0FF            * C  mov r8b, 0FFh
0000016F  41B1FF            * C  mov r9b, 0FFh
00000172  E800000000        * C  call SDL_MapRGB
00000177                      C 	invoke SDL_SetColorKey, loadedSurface, 1, eax
00000177  488B4C2428        * C  mov rcx, loadedSurface
0000017C  BA01000000        * C  mov edx, 1
00000181  448BC0            * C  mov r8d, eax
00000184  E800000000        * C  call SDL_SetColorKey
                              C 	
                              C 	; Create texture from surface pixels
00000189                      C 	invoke SDL_CreateTextureFromSurface, gRenderer, loadedSurface
00000189  488B4C2450        * C  mov rcx, gRenderer
0000018E  488B542428        * C  mov rdx, loadedSurface
00000193  E800000000        * C  call SDL_CreateTextureFromSurface
00000198                      C 	.if rax==0
00000198  4885C0            * C test rax, rax
0000019B  7507              * C jnz @C0004
0000019D  C644242000          C 		mov bSuccess, 0
000001A2  EB2D                C 		jmp ERROR
000001A4                      C 	.endif
000001A4                    * C @C0004:
000001A4  4889442430          C 	mov newTexture, rax
                              C 	
                              C 	; Get image dimensions
000001A9  488B742428          C 	mov rsi, loadedSurface
000001AE  8B4610              C 	mov eax, (SDL_Surface PTR [rsi]).w
000001B1  8B5E14              C 	mov ebx, (SDL_Surface PTR [rsi]).h
                              C 	
000001B4  488B742458          C 	mov rsi, pTexture
000001B9  8906                C 	mov (LTexture PTR[rsi]).m_Width, eax
000001BB  895E04              C 	mov (LTexture PTR[rsi]).m_Height, ebx
                              C 	
                              C 	; Set texture
000001BE  488B442430          C 	mov rax, newTexture
000001C3  48894608            C 	mov (LTexture PTR[rsi]).m_Texture,rax
                              C 	 
                              C 	; Delete old loaded surface
000001C7                      C 	invoke SDL_FreeSurface, loadedSurface
000001C7  488B4C2428        * C  mov rcx, loadedSurface
000001CC  E800000000        * C  call SDL_FreeSurface
                              C 	
000001D1                      C ERROR:
000001D1  8A442420            C 	mov al, bSuccess
000001D5                      C 	ret
000001D5  4883C440          * C add rsp, 32 + @ReservedStack
000001D9  5B                * C pop rbx
000001DA  488B742420        * C mov rsi, [rsp+8]
0000001DF  C3                 C retn 
0000001C                    * C .xdata segment
0000001C  01190400          * C db 1t + (00h shl 3), 10t, 4t, 00h + (00h shl 4)
00000020  1972153014640400  * C dw 0320ah, 03006h, 06405h, 01h
00000028                    * C align 4
00000028                    * C .xdata ends
00000024                    * C .pdata segment
00000024  00000000CB0000001C* C dd imagerel loadTextureFromFile, imagerel loadTextureFromFile+0B8h, imagerel $xdatasym+020h
00000030                    * C .pdata ends
000001E0                      C loadTextureFromFile endp
                              C 
000001E0                      C setTextureColor proc pTexture:QWORD, red:BYTE, green:BYTE, blue:BYTE
000001E0  48894C2408        * C mov [rsp+8], rcx
000001E5  4889542410        * C .endprolog
000001A000001EA  4C89442418        v rsi, pTexture
000001FD  488B5E08               mov rbx, (LTexture PTR000001F4  4883EC28                               C 	
00000201                           voke SDL_SetTextureColorMod, rbx, re                00000201  488BCB            000001F8  488B7424300000204  8A542438          * C  mov dl, red
00000208  448A442440        * C  mov r8b, green
0000020D  448A4C2448        * C  mov r9b, blue
00000212  E800000000        * C  call SDL_SetTextureColorMod
                              C 	
00000217                      C 	ret
00000217  4883C428          * C add rsp, 0 + @ReservedStack
0000021B  C3                * C retn 
00000028                    * C .xdata segment
00000028  01180100          * C db 1t + (00h shl 3), 5t, 0t, 00h + (00h shl 4)
 0000002C  1842               C align 4
   0000002E  0000               .xdata ends00000030                     * C .pdata segme00000030                        * C dd imagerel 00000030  000000003C00000028tTextureColor+029h, imagerel $xdatasym+02Ch
                            * C .pdata ends0000003C                       C setTextureCo0000021C                                C 
0000021C                      C setTextureBlendMode proc pTexture:QWORD, blendingMode:SDL_BlendMode
                              C 	
0000021C  48894C2408        * C mov [rsp+8], rcx
00000221  4889542410        * C .endprolog
000001D00000226  4883EC28          v rsi, pTexture
0000022F  488B5E08                          Texture PTR [rsi]).m_Texture
00000233  8B542438                ov edx, blending00000200000237                      C 	invoke SDL_SetTextureBlendMode, rbx, edx
00000237  488BCB            * C  mov rcx, rbx
0000023A  E800000000        * C  call SDL_SetTextureBlendMode
0000023F                      C 	ret
0000023F  4883C428          * C add rsp, 0 + @ReservedStack
00000243  C3                * C retn 
00000030                    * C .xdata segment
00000030  010E0100          * C db 1t + (00h shl 3), 5t, 0t, 00h + (00h shl 4)
 00000034  0E42               C align 4
   00000036  0000               .xdata ends00000038                     * C .pdata segme0000003C                        * C dd imagerel 0000003C  000000002800000030l setTextureBlendMode+01Fh, imagerel $xdatasym+030h
                            * C .pdata ends00000048                       C setTextureBl00000244                                    C 
00000244                      C setTextureAlphaBlend proc pTexture:QWORD, alpha:BYTE
                              C 	
00000244  48894C2408        * C mov [rsp+8], rcx
00000249  4889542410        * C .endprolog
000001F0000024E  4883EC28          v rsi, pTexture
00000257  488B5E08                          Texture PTR [rsi]).m_Texture
0000025B  8A542438                ov dl, alpha
  00000252  488B742430        C 	
0000025F                      C 	invoke SDL_SetTextureAlphaMod, rbx, dl
0000025F  488BCB            * C  mov rcx, rbx
00000262  E800000000        * C  call SDL_SetTextureAlphaMod
00000267                      C 	ret
00000267  4883C428          * C add rsp, 0 + @ReservedStack
0000026B  C3                * C retn 
00000038                    * C .xdata segment
00000038  010E0100          * C db 1t + (00h shl 3), 5t, 0t, 00h + (00h shl 4)
 0000003C  0E42               C align 4
   0000003E  0000               .xdata ends00000040                     * C .pdata segme00000048                        * C dd imagerel 00000048  000000002800000038el setTextureAlphaBlend+01Fh, imagerel $xdatasym+034h
                            * C .pdata ends00000054                       C setTextureAl0000026C                                     C 
                              C ifdef SDL_TTF_MAJOR_VERSION
0000026C                      C loadTextureFromRenderedText proc pRenderer:ptr, pTexture:ptr LTexture, pFont:ptr, pTextureText:ptr, textColor:SDL_Color
                              C 	LOCAL textSurface:QWORD
                              C 	
0000026C  48894C2408        * C mov [rsp+16], rdx00000271  4889542410         * C sub rsp, 8
      00000276  4C89442418        llocstack 8
         0000027B  4C894C2420        rolog
0000021A       00000280  4883EC28          eTexture, pTexture
0000021A                                  pTexture
0000021F                                                             00000284                                       C 	; Render text00000284  0000028E                      C 	invoke TT00000289  E894FDFFFF        pTextureText, textColor
0000028E  488B4C2440        * C  mov rcx, pFont
00000293  488B542448        * C  mov rdx, pTextureText
00000298  448B442450        * C  mov r8d, textColor
0000029D  E800000000        * C  call TTF_RenderText_Solid
000002A2                      C 	.if rax==0
000002A2  4885C0            * C test rax, rax
000002A5  7502              * C jnz @C0005
000002A7  EB43                C 		jmp EXIT	
000002A9                      C 	.endif
000002A9                    * C @C0005:
                              C 	
000002A9  4889442420          C 	mov textSurface, rax
                              C 	
                              C 	; Create texture from surface pixels
000002AE                      C 	invoke SDL_CreateTextureFromSurface, pRenderer, rax
000002AE  488B4C2430        * C  mov rcx, pRenderer
000002B3  488BD0            * C  mov rdx, rax
000002B6  E800000000        * C  call SDL_CreateTextureFromSurface
000002BB                      C 	.if rax==0
000002BB  4885C0            * C test rax, rax
000002BE  7502              * C jnz @C0006
000002C0  EB2A                C 		jmp EXIT
000002C2                      C 	.endif
000002C2                    * C @C0006:
                              C 	
                              C 	; Copy data to our variables.
000002C2  488B7C2438          C 	mov rdi, pTexture
000002C7  48894708            C 	mov (LTexture PTR[rdi]).m_Texture, rax
000002CB  488B742420          C 	mov rsi, textSurface
000002D0  8B4610              C 	mov eax, (SDL_Surface PTR [rsi]).w
000002D3  8B5E14              C 	mov ebx, (SDL_Surface PTR [rsi]).h
000002D6  8907                C 	mov (LTexture PTR[rdi]).m_Width, eax
000002D8  895F04              C 	mov (LTexture PTR[rdi]).m_Height, ebx
                              C 	
                              C 	; Get rid of old surface
000002DB                      C 	invoke SDL_FreeSurface, textSurface
000002DB  488B4C2420        * C  mov rcx, textSurface
000002E0  E800000000        * C  call SDL_FreeSurface
                              C 	
                              C 	; Everything OK
000002E5  48C7C001000000      C 	mov rax, 1
000002EC                      C EXIT:
000002EC                      C 	ret
000002EC  4883C428          * C add rsp, 8 + @ReservedStack
000002F0  C3                * C retn 
00000040                    * C .xdata segment
00000040  01180100          * C db 1t + (00h shl 3), 9t, 1t, 00h + (00h shl 4)
 00000044  1842               C dw 0209h
  00000046  0000              C align 4
  00000048                    C .xdata ends
0000000054                    C .pdata segment
  00000054  000000008500000040C dd imagerel loadTextureFromRenderedText, imagerel loadTextureFromRenderedText+073h, imagerel $xdatasym+038h
  00000060                    C .pdata ends
00000002F1                    C loadTextureFromRenderedText endp
                              C endif
                                include LButton.asm
                              C include LButton.inc
                              C 
                              C ifndef LButton_INC_
 =                            C LButton_INC_ EQU <>
                              C 
 = 12C                        C BUTTON_WIDTH = 300
 = C8                         C BUTTON_HEIGHT = 200
 = 4                          C TOTAL_BUTTONS = 4
                              C 
                              C LButtonSprite TYPEDEF DWORD
 = 0                          C BUTTON_SPRITE_MOUSE_OUT = 0
 = 1                          C BUTTON_SPRITE_MOUSE_OVER_MOTION = 1
 = 2                          C BUTTON_SPRITE_MOUSE_DOWN = 2
 = 3                          C BUTTON_SPRITE_MOUSE_UP = 3
 = 4                          C BUTTON_SPRITE_TOTAL = 4
                              C 
00000000                      C LButton struct
00000000                      C 	m_Position 		SDL_Point 		<>		; 8 Bytes
00000008                      C 	m_Spare			DWORD 			?		; 4 bytes
0000000C                      C 	m_CurrentSprite LButtonSprite 	?		; 4 Bytes
00000010                      C LButton ends
                              C 
                              C endif 
                              C 
00000000                      C .const 
000002F1                    * C _TEXT ends
00000000                    * C CONST segment
                            * C assume cs:ERROR
                              C 
00000000                      C .data?
00000000                    * C CONST ends
00000000                    * C _BSS segment
                            * C assume cs:ERROR
                              C 
                              C externdef gRenderer:QWORD
                              C ;externdef gButtonSpriteSheetTexture:LTexture
                              C ;externdef gSpriteClips:SDL_Rect 
00000000                      C .data
00000000                    * C _BSS ends
00000000                    * C _DATA segment
                            * C assume cs:ERROR
                              C 
00000000                      C .code
00000000                    * C _DATA ends
000002F1                    * C _TEXT segment
                            * C assume cs:FLAT
                              C 
000002F1                      C LButton_init proc uses rax rcx rdi, pLButton:ptr
                              C 	
000002F1  48894C2408        * C mov [rsp+8], rcx
000002F6  4889442410        * C mov [rsp+16], rax
                            * C .savereg rax, 16
000002FB  48894C2418        * C mov [rsp+24], rcx
                            * C .savereg rcx, 24
00000300  57                * C push rdi
                            * C .pushreg rdi
                            * C .endprolog
00000301  488B7C2410          C 	mov rdi, pLButton
00000306  48C7C110000000      C 	mov rcx, SIZEOF LButton
0000030D  48C7C000000000      C 	mov rax, 0
00000314  F3AA                C 	rep stosb
                              C 	
00000316                      C 	ret
00000316  5F                * C pop rdi
00000317  488B442410        * C mov rax, [rsp+16]
0000031C  488B4C2418        * C mov rcx, [rsp+24]
00000321  C3                * C retn 
00000048                    * C .xdata segment
00000048  01100500          * C db 1t + (00h shl 3), 16t, 5t, 00h + (00h shl 4)
0000004C  10700F1403000A0402* C dw 07010h, 0140fh, 03h, 040ah, 02h
00000056  0000              * C align 4
00000058                    * C .xdata ends
00000060                    * C .pdata segment
00000060  000000003100000048* C dd imagerel LButton_init, imagerel LButton_init+031h, imagerel $xdatasym+040h
0000006C                    * C .pdata ends
00000322                      C LButton_init endp
                              C 
                              C 
00000322                      C LButton_setPosition proc uses rax rbx rcx rdi, pLButton:ptr LButton, x:DWORD, y:DWORD
                              C 	
00000322  48894C2408        * C mov [rsp+8], rcx
00000327  4889542410        * C mov [rsp+16], rax
0000032C  4C89442418        * C .savereg rax, 16
00000331  4889442420        * C mov [rsp+24], rbx
                            * C .savereg rbx, 24
00000336  53                * C mov [rsp+3                                     * C .save00000337  51                             *00000338  57                             *                                             *                                            00000339  488B7C2420   0000033E  8B442428            C 	mov eax, x
00000342  8B5C2430            C 	mov ebx, y
                              C 	
00000346  8907                C 	mov (LButton PTR [rdi]).m_Position.x, eax
00000348  895F04              C 	mov (LButton PTR [rdi]).m_Position.y, ebx
                              C 	
0000034B                      C 	ret
0000034B  5F                * C pop rdi
0000034C  59                * C mov rax, 0000034D  5B                          * C0000034E  488B442420                            * C00000353  C3                                    * C retn 
00000058                    * C .xdata segment
00000058  01170400          * C db 1t + (00h shl 3), 21t, 7t, 00h + (00h shl 4)
0000005C  1770153014040400  * C dw 07015h, 01414h, 04h, 0340fh,00000064                                 00000064                                     0000006C                                      * 0000006C  000000003200000058                  * C dd imagerel LButton_setPosition, imagerel LButton_setPosition+038h, imagere00000078                                     00000354                                        C LButton_setPosition endp
                              C 
00000354                      C LButton_handleEvent proc uses rax rbx rcx rdx rsi, pLButton:ptr LButton, e:ptr SDL_Event
                              C 	LOCAL xCoord:DWORD
                              C 	LOCAL yCoord:DWORD
                              C 	LOCAL inside:BYTE
                              C 	
00000354  48894C2408        * C mov [rsp+16], rdx00000359  4889542410         * C mov [rsp+24], rax0000035E  4889442418         * C .savereg rax, 24
                            * C mov [rsp+32], rbx00000363  48895C2420         * C .savereg rbx, 32
                            * C push rcx
000002FD00000368  51                 rdx
000002FE00000369  52                 rsi
        0000036A  56                hreg rsi
0000                            sub rsp, 16
     0000036B  4883EC30          allocstack 16
                                               00303                      C 	mov rsi                                   C 	
00000374                        	.if (SDL_Event PTR[rsi]).type_ == SDL_MOUSEMOTION || (SDL_Event PTR[rsi]).type_ == SDL_MOUSEBUTTONDOWN || (SDL_Event PTR[rsi]).type_ == SDL_MOUSEBUTTONUP
00000374  813E00040000      * C cmp (SDL_Event PTR[rsi]).type_ , SDL_MOUSEMOTION 
0000037A  7414              * C jz  @C0008
0000037C                    * C @C0009:
0000037C  813E01040000      * C cmp (SDL_Event PTR[rsi]).type_ , SDL_MOUSEBUTTONDOWN 
00000382  740C              * C jz  @C0008
00000384                    * C @C000A:
00000384  813E02040000      * C cmp (SDL_Event PTR[rsi]).type_ , SDL_MOUSEBUTTONUP
0000038A  0F85B5000000      * C jnz @C0007
00000390                    * C @C0008:
                              C 				
00000390                      C 		invoke SDL_GetMouseState, addr xCoord, addr yCoord	
00000390  488D4C2420        * C  lea rcx, xCoord
00000395  488D542424        * C  lea rdx, yCoord	
0000039A  E800000000        * C  call SDL_GetMouseState
                              C 		
0000039F  C644242801          C 		mov inside, 1
000003A4  488B742450          C 		mov rsi, pLButton
000003A9  8B5C2420            C 		mov ebx, xCoord
000003AD  8B4C2424            C 		mov ecx, yCoord
                              C 		
000003B1  448B16              C 		mov r10d, (LButton PTR [rsi]).m_Position.x
000003B4  448B5E04            C 		mov r11d, (LButton PTR [rsi]).m_Position.y
000003B8  458BE2              C 		mov r12d, r10d
000003BB  458BEB              C 		mov r13d, r11d
000003BE  4181C42C010000      C 		add r12d, BUTTON_WIDTH
000003C5  4181C5C8000000      C 		add r13d, BUTTON_HEIGHT
                              C 		
000003CC                      C 		.if ebx < r10d 		; x < mPosition.x
000003CC  413BDA            * C cmp ebx , r10d
000003CF  7307              * C jnb @C000B
000003D1  C644242800          C 			mov inside, 0
000003D6                      C 		.elseif	ebx > r12d 	; x > mPosition.x + BUTTON_WIDTH
000003D6  EB22              * C jmp @C000C
000003D8                    * C @C000B:
000003D8  413BDC            * C cmp ebx , r12d
000003DB  7607              * C jna @C000D
000003DD  C644242800          C 			mov inside, 0
000003E2                      C 		.elseif ecx < r11d 	; y < mPosition.y
000003E2  EB16              * C jmp @C000C
000003E4                    * C @C000D:
000003E4  413BCB            * C cmp ecx , r11d
000003E7  7307              * C jnb @C000E
000003E9  C644242800          C 			mov inside, 0		
000003EE                      C 		.elseif ecx > r13d 	; y > mPosition.y + BUTTON_HEIGHT
000003EE  EB0A              * C jmp @C000C
000003F0                    * C @C000E:
000003F0  413BCD            * C cmp ecx , r13d
000003F3  7605              * C jna @C000F
000003F5  C644242800          C 			mov inside, 0
000003FA                      C 		.endif
000003FA                    * C @C000F:
000003FA                    * C @C000C:
                              C 			
000003FA                      C 		.if !inside
000003FA  807C242800        * C cmp inside, 0
000003FF  7509              * C jnz @C0010
00000401  C7460C00000000      C 			mov (LButton PTR [rsi]).m_CurrentSprite, BUTTON_SPRITE_MOUSE_OUT
00000408                      C 		.else
00000408  EB3B              * C jmp @C0011
0000040A                    * C @C0010:
0000040A  488B742458          C 			mov rsi, e
0000040F  488B7C2450          C 			mov rdi, pLButton
00000414                      C 			.if (SDL_Event PTR[rsi]).type_ == SDL_MOUSEMOTION
00000414  813E00040000      * C cmp (SDL_Event PTR[rsi]).type_ , SDL_MOUSEMOTION
0000041A  7509              * C jnz @C0012
0000041C  C7470C01000000      C 				mov (LButton PTR [rdi]).m_CurrentSprite, BUTTON_SPRITE_MOUSE_OVER_MOTION
00000423                      C 			.elseif (SDL_Event PTR[rsi]).type_ == SDL_MOUSEBUTTONDOWN	
00000423  EB20              * C jmp @C0013
00000425                    * C @C0012:
00000425  813E01040000      * C cmp (SDL_Event PTR[rsi]).type_ , SDL_MOUSEBUTTONDOWN	
0000042B  7509              * C jnz @C0014
0000042D  C7470C02000000      C 				mov (LButton PTR [rdi]).m_CurrentSprite, BUTTON_SPRITE_MOUSE_DOWN
00000434                      C 			.elseif (SDL_Event PTR[rsi]).type_ == SDL_MOUSEBUTTONUP	
00000434  EB0F              * C jmp @C0013
00000436                    * C @C0014:
00000436  813E02040000      * C cmp (SDL_Event PTR[rsi]).type_ , SDL_MOUSEBUTTONUP	
0000043C  7507              * C jnz @C0015
0000043E  C7470C03000000      C 				mov (LButton PTR [rdi]).m_CurrentSprite, BUTTON_SPRITE_MOUSE_UP
00000445                      C 			.endif 
00000445                    * C @C0015:
00000445                    * C @C0013:
00000445                      C 		.endif
00000445                    * C @C0011:
00000445                      C 	.endif
00000445                    * C @C0007:
                              C 	
00000445                      C 	ret
00000445  4883C430          * C add rsp, 16 + @ReservedStack
00000449  5E                * C pop rsi
0000044A  5A                * C pop rdx
0000044B  59                * C pop rcx
0000044C  488B442418        * C mov rax, [rsp+24]
00000451  488B5C2420        * C mov rbx, [rsp+32]
00000456  C3                * C retn 
00000064                    * C .xdata segment
00000064  011B0600          * C db 1t + (00h shl 3), 22t, 6t, 00h + (00h shl 4)
00000068  1B521760143404000F* C dw 01216h, 06012h, 0340fh, 04h, 040ah, 03h
00000074                    * C align 4
00000074                    * C .xdata ends
00000078                    * C .pdata segment
00000078  000000000301000064* C dd imagerel LButton_handleEvent, imagerel LButton_handleEvent+0FCh, imagerel $xdatasym+064h
000000084                     C .pdata ends
000000457                     C LButton_handleEvent endp
                              C 
                              C ;LButton_render proc uses rax rcx rsi rdi, pLButton:ptr LButton
                              C ;	mov rsi, pLButton
                              C ;	mov rdi, offset gSpriteClips
                              C ;	
                              C ;	mov eax, (LButton PTR[rsi]).m_CurrentSprite
                              C ;	mov ecx, SIZEOF SDL_Rect
                              C ;	mul ecx
                              C ;	add rdi, rax
                              C ;		
                              C ;	invoke renderTexture, gRenderer, addr gButtonSpriteSheetTexture, (LButton PTR [rsi]).m_Position.x, (LButton PTR [rsi]).m_Position.y, rdi, 0, 0, 0
                              C ;	ret
                              C ;LButton_render endp

                                Init 		proto 
                                Shutdown 	proto
                                LoadMedia	proto
                                LoadTexture proto	:QWORD

00000000                        .const
00000457                    *   _TEXT ends
00000000                    *   CONST segment
                            *   assume cs:ERROR
 = 280                          SCREEN_WIDTH = 640
 = 1E0                          SCREEN_HEIGHT = 480

                                ; Values to rotate the sprite
00000000  53444C205475746F72    WINDOW_TITLE 	BYTE "SDL Tutorial",0
0000000D  7262                  FILE_ATTRS 		BYTE "rb"
0000000F  5265732F70726F6D70    IMAGE_PROMPT	BYTE "Res/prompt.png",0

                                ; Audios 
0000001E  5265732F626561742E    MUSIC_BEAT 		BYTE "Res/beat.wav",0
0000002B  5265732F7363726174    MUSIC_SCRATCH	BYTE "Res/scratch.wav",0
0000003B  5265732F686967682E    MUSIC_HIGH 		BYTE "Res/high.wav",0
00000048  5265732F6D65646975    MUSIC_MEDIUM	BYTE "Res/medium.wav",0
00000057  5265732F6C6F772E77    MUSIC_LOW 		BYTE "Res/low.wav",0


00000000                        .data
00000063                    *   CONST ends
00000000                    *   _DATA segment
                            *   assume cs:ERROR
00000000  00                    quit			BYTE 0

00000000                        .data?
00000001                    *   _DATA ends
00000000                    *   _BSS segment
                            *   assume cs:ERROR
00000000  0000000000000000      pWindow 			QWORD ?
00000008  000000000000000000    eventHandler		SDL_Event <>
00000040  0000000000000000      gRenderer			QWORD ?
00000048  0000000000000000      currentTexture 		QWORD ?	
00000050  000000000000000000    gPromptTexture		LTexture <>

                                ; Audios
00000060  0000000000000000      gMusic				QWORD ?
00000068  0000000000000000      gScratch			QWORD ?
00000070  0000000000000000      gHigh				QWORD ?
00000078  0000000000000000      gMedium				QWORD ?
00000080  0000000000000000      gLow				QWORD ?

00000000                        .code
00000088                    *   _BSS ends
00000457                    *   _TEXT segment
                            *   assume cs:FLAT

00000457                        main proc 
                                	local i:dword
                                	local poll:qword
                                	
                                	; Alloc our memory for our objects, starts SDL, ...
00000457  4883EC58          *   sub rsp, 24
                                             4
                            *   .e                                          	i0000045B                                *    c0000045B  00000460                        	.if rax==0
00000460  4885C0            *   test rax, rax
00000463  750A              *   jnz @C0016
00000465                        		invoke ExitProcess, EXIT_FAILURE
00000465  B9FFFFFFFF        *    mov ecx, EXIT_FAILURE
0000046A  E800000000        *    call ExitProcess
0000046F                        	.endif
0000046F                    *   @C0016:
                                	
0000046F                        	invoke LoadMedia
0000046F  E83A030000        *    call LoadMedia
                                	; Gameloop
00000474                        	.while quit!=1
00000474  E9A2010000        *   jmp @C0018
00000479                    *   @C0017:
                                		
00000479                        		invoke SDL_PollEvent, addr eventHandler
00000479  488D0D00000000    *    lea rcx, eventHandler
00000480  E800000000        *    call SDL_PollEvent
00000485                        		.while rax!=0
00000485  E91B010000        *   jmp @C001A
0000048A                    *   @C0019:
0000048A                        			.if eventHandler.type_ == SDL_EVENTQUIT
0000048A  813D00000000000100*   cmp eventHandler.type_ , SDL_EVENTQUIT
00000494  750C              *   jnz @C001B
00000496  C6050000000001        				mov quit, 1
0000049D                        			.elseif eventHandler.type_ == SDL_KEYDOWN
0000049D  E9F7000000        *   jmp @C001C
000004A2                    *   @C001B:
000004A2  813D00000000000300*   cmp eventHandler.type_ , SDL_KEYDOWN
000004AC  0F85E7000000      *   jnz @C001D
000004B2                        				.if eventHandler.key.keysym.sym == SDLK_1
000004B2  833D1400000031    *   cmp eventHandler.key.keysym.sym , SDLK_1
000004B9  751F              *   jnz @C001E
000004BB                        					invoke Mix_PlayChannelTimed, -1, gHigh, 0, -1
000004BB  B9FFFFFFFF        *    mov ecx, -1
000004C0  488B1500000000    *    mov rdx, gHigh
000004C7  4533C0            *    xor r8d, r8d
000004CA  41B9FFFFFFFF      *    mov r9d, -1
000004D0  E800000000        *    call Mix_PlayChannelTimed
000004D5                        				.elseif eventHandler.key.keysym.sym == SDLK_2
000004D5  E9BF000000        *   jmp @C001F
000004DA                    *   @C001E:
000004DA  833D1400000032    *   cmp eventHandler.key.keysym.sym , SDLK_2
000004E1  751F              *   jnz @C0020
000004E3                        					invoke Mix_PlayChannelTimed, -1, gMedium, 0, -1
000004E3  B9FFFFFFFF        *    mov ecx, -1
000004E8  488B1500000000    *    mov rdx, gMedium
000004EF  4533C0            *    xor r8d, r8d
000004F2  41B9FFFFFFFF      *    mov r9d, -1
000004F8  E800000000        *    call Mix_PlayChannelTimed
000004FD                        				.elseif eventHandler.key.keysym.sym == SDLK_3
000004FD  E997000000        *   jmp @C001F
00000502                    *   @C0020:
00000502  833D1400000033    *   cmp eventHandler.key.keysym.sym , SDLK_3
00000509  751C              *   jnz @C0021
0000050B                        					invoke Mix_PlayChannelTimed, -1, gLow, 0, -1
0000050B  B9FFFFFFFF        *    mov ecx, -1
00000510  488B1500000000    *    mov rdx, gLow
00000517  4533C0            *    xor r8d, r8d
0000051A  41B9FFFFFFFF      *    mov r9d, -1
00000520  E800000000        *    call Mix_PlayChannelTimed
00000525                        				.elseif eventHandler.key.keysym.sym == SDLK_4
00000525  EB72              *   jmp @C001F
00000527                    *   @C0021:
00000527  833D1400000034    *   cmp eventHandler.key.keysym.sym , SDLK_4
0000052E  751C              *   jnz @C0022
00000530                        					invoke Mix_PlayChannelTimed, -1, gScratch, 0, -1
00000530  B9FFFFFFFF        *    mov ecx, -1
00000535  488B1500000000    *    mov rdx, gScratch
0000053C  4533C0            *    xor r8d, r8d
0000053F  41B9FFFFFFFF      *    mov r9d, -1
00000545  E800000000        *    call Mix_PlayChannelTimed
0000054A                        				.elseif eventHandler.key.keysym.sym == SDLK_9
0000054A  EB4D              *   jmp @C001F
0000054C                    *   @C0022:
0000054C  833D1400000039    *   cmp eventHandler.key.keysym.sym , SDLK_9
00000553  7536              *   jnz @C0023
00000555                        					invoke Mix_PlayingMusic
00000555  E800000000        *    call Mix_PlayingMusic
0000055A                        					.if rax==0
0000055A  4885C0            *   test rax, rax
0000055D  7513              *   jnz @C0024
0000055F                        						invoke Mix_PlayMusic, gMusic, -1
0000055F  488B0D00000000    *    mov rcx, gMusic
00000566  BAFFFFFFFF        *    mov edx, -1
0000056B  E800000000        *    call Mix_PlayMusic
00000570                        					.else
00000570  EB17              *   jmp @C0025
00000572                    *   @C0024:
00000572                        						invoke Mix_PauseMusic
00000572  E800000000        *    call Mix_PauseMusic
00000577                        						.if rax==1
00000577  4883F801          *   cmp rax, 1
0000057B  7507              *   jnz @C0026
0000057D                        							invoke Mix_ResumeMusic
0000057D  E800000000        *    call Mix_ResumeMusic
00000582                        						.else
00000582  EB05              *   jmp @C0027
00000584                    *   @C0026:
00000584                        							invoke Mix_PauseMusic
00000584  E800000000        *    call Mix_PauseMusic
00000589                        						.endif
00000589                    *   @C0027:
00000589                        					.endif
00000589                    *   @C0025:
00000589                        				.elseif eventHandler.key.keysym.sym == SDLK_0
00000589  EB0E              *   jmp @C001F
0000058B                    *   @C0023:
0000058B  833D1400000030    *   cmp eventHandler.key.keysym.sym , SDLK_0
00000592  7505              *   jnz @C0028
00000594                        					invoke Mix_HaltMusic
00000594  E800000000        *    call Mix_HaltMusic
00000599                        				.endif
00000599                    *   @C0028:
00000599                    *   @C001F:
00000599                        			.endif
00000599                    *   @C001D:
00000599                    *   @C001C:

00000599                        			invoke SDL_PollEvent, addr eventHandler
00000599  488D0D00000000    *    lea rcx, eventHandler
000005A0  E800000000        *    call SDL_PollEvent
000005A5                        		.endw
000005A5                    *   @C001A:
000005A5  4885C0            *   test rax, rax
000005A8  0F85DCFEFFFF      *   jnz @C0019
                                		
                                		
                                		; Clear screen
000005AE                        		invoke SDL_SetRenderDrawColor, gRenderer, 0FFh, 0FFh, 0FFh, 0FFh
000005AE  488B0D00000000    *    mov rcx, gRenderer
000005B5  B2FF              *    mov dl, 0FFh
000005B7  41B0FF            *    mov r8b, 0FFh
000005BA  41B1FF            *    mov r9b, 0FFh
000005BD  C6442420FF        *    mov byte ptr [rsp+32], 0FFh
000005C2  E800000000        *    call SDL_SetRenderDrawColor
000005C7                        		invoke SDL_RenderClear, gRenderer
000005C7  488B0D00000000    *    mov rcx, gRenderer
000005CE  E800000000        *    call SDL_RenderClear
                                		
                                		; Render texture
000005D3                        		invoke renderTexture, gRenderer, addr gPromptTexture, 0, 0, 0, 0, 0, 0
000005D3  488B0D00000000    *    mov rcx, gRenderer
000005DA  488D1500000000    *    lea rdx, gPromptTexture
000005E1  4533C0            *    xor r8d, r8d
000005E4  4533C9            *    xor r9d, r9d
000005E7  48C744242000000000*    mov qword ptr [rsp+32], 0
000005F0  48C744242800000000*    mov qword ptr [rsp+40], 0
000005F9  48C744243000000000*    mov qword ptr [rsp+48], 0
00000602  C744243800000000  *    mov dword ptr [rsp+56], 0
0000060A  E84DFAFFFF        *    call renderTexture
                                		
                                		; Update the window
0000060F                        		invoke SDL_RenderPresent,gRenderer
0000060F  488B0D00000000    *    mov rcx, gRenderer
00000616  E800000000        *    call SDL_RenderPresent
0000061B                        	.endw
0000061B                    *   @C0018:
0000061B  803D0000000001    *   cmp quit, 1
00000622  0F8551FEFFFF      *   jnz @C0017
                                	
00000628                        	invoke SDL_DestroyWindow, pWindow
00000628  488B0D00000000    *    mov rcx, pWindow
0000062F  E800000000        *    call SDL_DestroyWindow
                                	
                                	; Clean our allocated memory, shutdown SDL, ...
00000634                        	invoke Shutdown
00000634  E8FD000000        *    call Shutdown
00000639                        	invoke ExitProcess, EXIT_SUCCESS
00000639  33C9              *    xor ecx, ecx
0000063B  E800000000        *    call ExitProcess
00000640                        	ret
00000640  4883C458          *   add rsp, 24 + @ReservedStack
00000644  C3                *   retn
00000074                    *   .xdata segment
00000074  01040100          *   db 1t + (00h shl 3), 4t, 1t, 00h + (00h shl 4)
00000078  04A2              *   dw 02204h
0000007A  0000              *   align 4
0000007C                    *   .xdata ends
00000084                    *   .pdata segment
00000084  00000000EE01000074*   dd imagerel main, imagerel main+01EEh, imagerel $xdatasym+074h
00000090                    *   .pdata ends
00000645                        main endp

00000645                        Init proc
00000645  4883EC38          *   .endprolog
000005D7                                     ts the FPU
                                   0000064C                        	00000649  9BDBE3            DEO OR SDL_INIT_AUDIO 
0000064C  B930000000        *    mov ecx, SDL_INIT_VIDEO OR SDL_INIT_AUDIO 
00000651  E800000000        *    call SDL_Init
00000656                        	.if rax<0
00000656  4883F800          *   cmp rax, 0
0000065A  7308              *   jnb @C0029
0000065C  4833C0                		xor rax, rax
0000065F  E9CD000000            		jmp EXIT
00000664                        	.endif
00000664                    *   @C0029:

                             1  	exitm <( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( 0 ) ) >
                             1  	exitm <( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( 0 ) ) >
00000664                        	invoke SDL_CreateWindow, addr WINDOW_TITLE, ( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( 0 ) ) , ( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( 0 ) ) , SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN
00000664  488D0D00000000    *    lea rcx, WINDOW_TITLE
0000066B  BA0000FF1F        *    mov edx, ( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( 0 ) ) 
00000670  41B80000FF1F      *    mov r8d, ( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( 0 ) ) 
00000676  41B980020000      *    mov r9d, SCREEN_WIDTH
0000067C  C7442420E0010000  *    mov dword ptr [rsp+32], SCREEN_HEIGHT
00000684  C744242804000000  *    mov dword ptr [rsp+40], SDL_WINDOW_SHOWN
0000068C  E800000000        *    call SDL_CreateWindow
                                		
00000691                        	.if rax==0
00000691  4885C0            *   test rax, rax
00000694  7505              *   jnz @C002A
00000696  E996000000            		jmp EXIT
0000069B                        	.endif
0000069B                    *   @C002A:
0000069B  48890500000000        	mov pWindow, rax
                                	
                                	; Create the renderer
000006A2                        	invoke SDL_CreateRenderer, rax, -1, SDL_RENDERER_ACCELERATED OR SDL_RENDERER_PRESENTVSYNC
000006A2  488BC8            *    mov rcx, rax
000006A5  BAFFFFFFFF        *    mov edx, -1
000006AA  41B806000000      *    mov r8d, SDL_RENDERER_ACCELERATED OR SDL_RENDERER_PRESENTVSYNC
000006B0  E800000000        *    call SDL_CreateRenderer
000006B5                        	.if rax==0
000006B5  4885C0            *   test rax, rax
000006B8  7502              *   jnz @C002B
000006BA  EB75                  		jmp EXIT
000006BC                        	.endif
000006BC                    *   @C002B:
000006BC  48890500000000        	mov gRenderer, rax
                                	
                                	; Initialize renderer color
000006C3                        	invoke SDL_SetRenderDrawColor, gRenderer, 0FFh, 0FFH, 0FFH, 0FFH
000006C3  488B0D00000000    *    mov rcx, gRenderer
000006CA  B2FF              *    mov dl, 0FFh
000006CC  41B0FF            *    mov r8b, 0FFH
000006CF  41B1FF            *    mov r9b, 0FFH
000006D2  C6442420FF        *    mov byte ptr [rsp+32], 0FFH
000006D7  E800000000        *    call SDL_SetRenderDrawColor
                                	
                                	; Init PNG image format
000006DC                        	invoke IMG_Init, IMG_INIT_PNG
000006DC  B902000000        *    mov ecx, IMG_INIT_PNG
000006E1  E800000000        *    call IMG_Init
000006E6  4883E002              	and rax, IMG_INIT_PNG
000006EA                        	.if rax!=IMG_INIT_PNG
000006EA  4883F802          *   cmp rax, IMG_INIT_PNG
000006EE  7405              *   jz  @C002C
000006F0  4833C0                		xor rax, rax
000006F3  EB3C                  		jmp EXIT
000006F5                        	.endif
000006F5                    *   @C002C:
                                	
                                	; Init Font module
000006F5                            invoke TTF_Init
000006F5  E800000000        *    call TTF_Init
000006FA                            .if rax==-1
000006FA  4883F8FF          *   cmp rax, -1
000006FE  7505              *   jnz @C002D
00000700  4833C0                    	xor rax, rax
00000703  EB2C                      	jmp EXIT
00000705                            .endif
00000705                    *   @C002D:
                                    
                                    ; Init Mixer module
00000705                            invoke Mix_OpenAudio, 44100, AUDIO_S16LSB, 2, 2048
00000705  B944AC0000        *    mov ecx, 44100
0000070A  66BA1080          *    mov dx, AUDIO_S16LSB
0000070E  41B802000000      *    mov r8d, 2
00000714  41B900080000      *    mov r9d, 2048
0000071A  E800000000        *    call Mix_OpenAudio
0000071F                            .if rax<0
0000071F  4883F800          *   cmp rax, 0
00000723  7305              *   jnb @C002E
00000725  4833C0                		xor rax, rax
00000728  EB07                  		jmp EXIT
0000072A                        	.endif
0000072A                    *   @C002E:
                                    
0000072A  48C7C001000000        	mov rax, 1
00000731                        EXIT:	
00000731                        	ret
00000731  4883C438          *   add rsp, 0 + @ReservedStack
00000735  C3                *   retn
0000007C                    *   .xdata segment
0000007C  01040100          *   db 1t + (00h shl 3), 0t, 0t, 00h + (00h shl 4)
00000080  0462              *   align 4
  00000082  0000                .xdata ends00000084                      *   .pdata segm00000090                         *   dd imagerel00000090  00000000F10000007Cmagerel $xdatasym+07Ch
                            *   .pdata ends0000009C                          Init endp
0000000736                        Shutdown proc
                                	
00000736  4883EC28          *   .endprolog
000006C4                                     exture, addr gPromptTexture
000006C                            a rcx, gPromptTe0000073A                           *    call freeTexture
                0000073A  488D0D00000000746                        	invoke00000741  E8DCF8FFFF      00000746  488B0D00000000    *    mov rcx, gScratch
0000074D  E800000000        *    call Mix_FreeChunk
00000752                        	invoke Mix_FreeChunk, gHigh
00000752  488B0D00000000    *    mov rcx, gHigh
00000759  E800000000        *    call Mix_FreeChunk
0000075E                        	invoke Mix_FreeChunk, gMedium
0000075E  488B0D00000000    *    mov rcx, gMedium
00000765  E800000000        *    call Mix_FreeChunk
0000076A                        	invoke Mix_FreeChunk, gLow
0000076A  488B0D00000000    *    mov rcx, gLow
00000771  E800000000        *    call Mix_FreeChunk
                                	
00000776                        	invoke Mix_FreeMusic, gMusic
00000776  488B0D00000000    *    mov rcx, gMusic
0000077D  E800000000        *    call Mix_FreeMusic
                                	
00000782                        	invoke SDL_DestroyRenderer, gRenderer 
00000782  488B0D00000000    *    mov rcx, gRenderer 
00000789  E800000000        *    call SDL_DestroyRenderer
0000078E                        	invoke SDL_DestroyWindow, pWindow
0000078E  488B0D00000000    *    mov rcx, pWindow
00000795  E800000000        *    call SDL_DestroyWindow
                                	
0000079A                        	invoke TTF_Quit
0000079A  E800000000        *    call TTF_Quit
0000079F                        	invoke IMG_Quit
0000079F  E800000000        *    call IMG_Quit
000007A4                        	invoke SDL_Quit
000007A4  E800000000        *    call SDL_Quit
000007A9                        	ret
000007A9  4883C428          *   add rsp, 0 + @ReservedStack
000007AD  C3                *   retn
00000084                    *   .xdata segment
00000084  01040100          *   db 1t + (00h shl 3), 0t, 0t, 00h + (00h shl 4)
00000088  0442              *   align 4
  0000008A  0000                .xdata ends0000008C                      *   .pdata segm0000009C                         *   dd imagerel0000009C  000000007800000084+074h, imagerel $xdatasym+080h
                            *   .pdata ends000000A8                          Shutdown en000007000007AE                        LoadMedia PROC
                                	LOCAL success:BYTE
000007AE  4883EC28          *   sub rsp, 8
                                             
                            *   .e                                          	m000007B2  C644242001                           	
000007B7                        	invoke loadTextureFromFile, gRenderer, addr gPromptTexture, addr IMAGE_PROMPT
000007B7  488B0D00000000    *    mov rcx, gRenderer
000007BE  488D1500000000    *    lea rdx, gPromptTexture
000007C5  4C8D0500000000    *    lea r8, IMAGE_PROMPT
000007CC  E844F9FFFF        *    call loadTextureFromFile
000007D1                        	.if eax==0
000007D1  85C0              *   test eax, eax
000007D3  7505              *   jnz @C002F
000007D5  E9D8000000            		jmp EXIT
000007DA                        	.endif
000007DA                    *   @C002F:

000007DA                        	invoke Mix_LoadMUS, addr MUSIC_BEAT
000007DA  488D0D00000000    *    lea rcx, MUSIC_BEAT
000007E1  E800000000        *    call Mix_LoadMUS
000007E6                        	.if rax==0
000007E6  4885C0            *   test rax, rax
000007E9  7505              *   jnz @C0030
000007EB  E9C2000000            		jmp EXIT
000007F0                        	.endif
000007F0                    *   @C0030:
000007F0  48890500000000        	mov gMusic, rax
                                	
000007F7                        	invoke SDL_RWFromFile, addr MUSIC_SCRATCH, addr FILE_ATTRS
000007F7  488D0D00000000    *    lea rcx, MUSIC_SCRATCH
000007FE  488D1500000000    *    lea rdx, FILE_ATTRS
00000805  E800000000        *    call SDL_RWFromFile
0000080A                        	invoke Mix_LoadWAV_RW, rax, 1
0000080A  488BC8            *    mov rcx, rax
0000080D  BA01000000        *    mov edx, 1
00000812  E800000000        *    call Mix_LoadWAV_RW
00000817                        	.if rax==0
00000817  4885C0            *   test rax, rax
0000081A  7505              *   jnz @C0031
0000081C  E991000000            		jmp EXIT
00000821                        	.endif
00000821                    *   @C0031:
00000821  48890500000000        	mov gScratch, rax
                                	
00000828                        	invoke SDL_RWFromFile, addr MUSIC_HIGH, addr FILE_ATTRS
00000828  488D0D00000000    *    lea rcx, MUSIC_HIGH
0000082F  488D1500000000    *    lea rdx, FILE_ATTRS
00000836  E800000000        *    call SDL_RWFromFile
0000083B                        	invoke Mix_LoadWAV_RW, rax, 1
0000083B  488BC8            *    mov rcx, rax
0000083E  BA01000000        *    mov edx, 1
00000843  E800000000        *    call Mix_LoadWAV_RW
00000848                        	.if rax==0
00000848  4885C0            *   test rax, rax
0000084B  7502              *   jnz @C0032
0000084D  EB63                  		jmp EXIT
0000084F                        	.endif
0000084F                    *   @C0032:
0000084F  48890500000000        	mov gHigh, rax
                                	
00000856                        	invoke SDL_RWFromFile, addr MUSIC_MEDIUM, addr FILE_ATTRS
00000856  488D0D00000000    *    lea rcx, MUSIC_MEDIUM
0000085D  488D1500000000    *    lea rdx, FILE_ATTRS
00000864  E800000000        *    call SDL_RWFromFile
00000869                        	invoke Mix_LoadWAV_RW, rax, 1
00000869  488BC8            *    mov rcx, rax
0000086C  BA01000000        *    mov edx, 1
00000871  E800000000        *    call Mix_LoadWAV_RW
00000876                        	.if rax==0
00000876  4885C0            *   test rax, rax
00000879  7502              *   jnz @C0033
0000087B  EB35                  		jmp EXIT
0000087D                        	.endif
0000087D                    *   @C0033:
0000087D  48890500000000        	mov gMedium, rax
                                	
00000884                        	invoke SDL_RWFromFile, addr MUSIC_LOW, addr FILE_ATTRS
00000884  488D0D00000000    *    lea rcx, MUSIC_LOW
0000088B  488D1500000000    *    lea rdx, FILE_ATTRS
00000892  E800000000        *    call SDL_RWFromFile
00000897                        	invoke Mix_LoadWAV_RW, rax, 1
00000897  488BC8            *    mov rcx, rax
0000089A  BA01000000        *    mov edx, 1
0000089F  E800000000        *    call Mix_LoadWAV_RW
000008A4                        	.if rax==0
000008A4  4885C0            *   test rax, rax
000008A7  7502              *   jnz @C0034
000008A9  EB07                  		jmp EXIT
000008AB                        	.endif
000008AB                    *   @C0034:
000008AB  48890500000000        	mov gLow, rax
                                	
000008B2                        EXIT:
000008B2                        	ret
000008B2  4883C428          *   add rsp, 8 + @ReservedStack
000008B6  C3                *   retn
0000008C                    *   .xdata segment
0000008C  01040100          *   db 1t + (00h shl 3), 4t, 1t, 00h + (00h shl 4)
00000090  0442              *   dw 0204h
 00000092  0000                 align 4
 00000094                       .xdata ends
0000000A8                       .pdata segment
 000000A8  00000000090100008C   dd imagerel LoadMedia, imagerel LoadMedia+0108h, imagerel $xdatasym+084h
 000000B4                       .pdata ends
0000008B7                       LoadMedia endp

000008B7                        LoadTexture PROC pFile:QWORD
                                	LOCAL loadedSurface:QWORD
                                	LOCAL newTexture:QWORD
                                	
000008B7  48894C2408        *   mov [rsp+8], rcx
000008BC  4883EC38          *   sub rsp, 24
                                             4
                            *   .e                                          	i000008C0                    849                    *    m000008C0  488B4C2440                       *    c000008C5  E800000008CA                        	.if rax==0
000008CA  4885C0            *   test rax, rax
000008CD  7502              *   jnz @C0035
000008CF  EB2F                  		jmp ERROR
000008D1                        	.endif
000008D1                    *   @C0035:
000008D1  4889442420            	mov loadedSurface, rax
000008D6                        	invoke SDL_CreateTextureFromSurface, gRenderer, rax
000008D6  488B0D00000000    *    mov rcx, gRenderer
000008DD  488BD0            *    mov rdx, rax
000008E0  E800000000        *    call SDL_CreateTextureFromSurface
000008E5                        	.if rax==0
000008E5  4885C0            *   test rax, rax
000008E8  7502              *   jnz @C0036
000008EA  EB14                  		jmp ERROR
000008EC                        	.endif
000008EC                    *   @C0036:
000008EC  4889442428            	mov newTexture, rax
000008F1                        	invoke SDL_FreeSurface, loadedSurface
000008F1  488B4C2420        *    mov rcx, loadedSurface
000008F6  E800000000        *    call SDL_FreeSurface
000008FB  488B442428            	mov rax, newTexture
00000900                        ERROR:	
00000900                        	ret
00000900  4883C438          *   add rsp, 24 + @ReservedStack
00000904  C3                *   retn 
00000094                    *   .xdata segment
00000094  01090100          *   db 1t + (00h shl 3), 9t, 1t, 00h + (00h shl 4)
00000098  0962              *   dw 02209h
0000009A  0000              *   align 4
0000009C                    *   .xdata ends
000000B4                    *   .pdata segment
000000B4  000000004E00000094*   dd imagerel LoadTexture, imagerel LoadTexture+04Ch, imagerel $xdatasym+08Ch
000000C0                    *   .pdata ends
00000905                        LoadTexture endp
                                	
                                END
00000905                    *   _TEXT ends


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func
ALIGNADDR  . . . . . . . . . . .        Proc
ASDOUBLE . . . . . . . . . . . .        Func
ASFLOAT  . . . . . . . . . . . .        Func
CLASS  . . . . . . . . . . . . .        Proc
CMETHOD  . . . . . . . . . . . .        Proc
COMINTERFACE . . . . . . . . . .        Proc
CSTATIC  . . . . . . . . . . . .        Proc
CSTR . . . . . . . . . . . . . .        Func
CVIRTUAL . . . . . . . . . . . .        Proc
ENDCLASS . . . . . . . . . . . .        Proc
ENDCOMINTERFACE  . . . . . . . .        Proc
ENDMETHOD  . . . . . . . . . . .        Proc
ENDMETHODS . . . . . . . . . . .        Proc
ENDOINTERFACE  . . . . . . . . .        Proc
ENDRAWINTERFACE  . . . . . . . .        Proc
EXPAND_PREFIX  . . . . . . . . .        Func
FP10 . . . . . . . . . . . . . .        Func
FP4  . . . . . . . . . . . . . .        Func
FP8  . . . . . . . . . . . . . .        Func
GETMASK128 . . . . . . . . . . .        Proc
LOADMSD  . . . . . . . . . . . .        Proc
LOADMSS  . . . . . . . . . . . .        Proc
LOADPS . . . . . . . . . . . . .        Proc
LOADSD . . . . . . . . . . . . .        Proc
LOADSS . . . . . . . . . . . . .        Proc
MEMALLOC . . . . . . . . . . . .        Proc
MEMFREE  . . . . . . . . . . . .        Proc
METHOD . . . . . . . . . . . . .        Proc
MIX_VERSION  . . . . . . . . . .        Func
MOV128 . . . . . . . . . . . . .        Proc
MOV64  . . . . . . . . . . . . .        Proc
MOVXMMR128 . . . . . . . . . . .        Proc
Mix_FadeInChannel  . . . . . . .        Func
Mix_LoadWAV  . . . . . . . . . .        Func
Mix_PlayChannel  . . . . . . . .        Func
NOTMASK128 . . . . . . . . . . .        Proc
OINTERFACE . . . . . . . . . . .        Proc
R4P  . . . . . . . . . . . . . .        Func
R8P  . . . . . . . . . . . . . .        Func
RAWINTERFACE . . . . . . . . . .        Proc
REGS15STORAGE  . . . . . . . . .        Proc
REPARG . . . . . . . . . . . . .        Func
RV . . . . . . . . . . . . . . .        Func
SDL_AUDIO_BITSIZE  . . . . . . .        Func
SDL_AUDIO_ISBIGENDIAN  . . . . .        Func
SDL_AUDIO_ISFLOAT  . . . . . . .        Func
SDL_AUDIO_ISINT  . . . . . . . .        Func
SDL_AUDIO_ISLITTLEENDIAN . . . .        Func
SDL_AUDIO_ISSIGNED . . . . . . .        Func
SDL_AUDIO_ISUNSIGNED . . . . . .        Func
SDL_BITSPERPIXEL . . . . . . . .        Func
SDL_BUTTON . . . . . . . . . . .        Func
SDL_BYTESPERPIXEL  . . . . . . .        Func
SDL_DEFINE_PIXELFORMAT . . . . .        Func
SDL_DEFINE_PIXELFOURCC . . . . .        Func
SDL_GetEventState  . . . . . . .        Func
SDL_IMAGE_VERSION  . . . . . . .        Func
SDL_IMAGE_VERSION_ATLEAST  . . .        Func
SDL_ISPIXELFORMAT_ALPHA  . . . .        Func
SDL_ISPIXELFORMAT_ARRAY  . . . .        Func
SDL_ISPIXELFORMAT_FOURCC . . . .        Func
SDL_ISPIXELFORMAT_INDEXED  . . .        Func
SDL_ISPIXELFORMAT_PACKED . . . .        Func
SDL_LoadBMP  . . . . . . . . . .        Func
SDL_LoadWAV  . . . . . . . . . .        Func
SDL_MIXER_VERSION  . . . . . . .        Func
SDL_MIXER_VERSION_ATLEAST  . . .        Func
SDL_PIXELFLAG  . . . . . . . . .        Func
SDL_PIXELLAYOUT  . . . . . . . .        Func
SDL_PIXELORDER . . . . . . . . .        Func
SDL_SCANCODE_TO_KEYCODE  . . . .        Func
SDL_SaveBMP  . . . . . . . . . .        Func
SDL_TICKS_PASSED . . . . . . . .        Func
SDL_TTF_VERSION  . . . . . . . .        Func
SDL_TTF_VERSION_ATLEAST  . . . .        Func
SDL_WINDOWPOS_CENTERED_DISPLAY .        Func
SDL_WINDOWPOS_ISCENTERED . . . .        Func
SDL_WINDOWPOS_ISUNDEFINED  . . .        Func
SDL_WINDOWPOS_UNDEFINED_DISPLAY         Func
SHIFTLEFT128 . . . . . . . . . .        Proc
SHIFTRIGHT128  . . . . . . . . .        Proc
SLXMMR . . . . . . . . . . . . .        Proc
SRXMMR . . . . . . . . . . . . .        Proc
STATICMETHOD . . . . . . . . . .        Proc
STATICVECMETHOD  . . . . . . . .        Proc
STDFUNC  . . . . . . . . . . . .        Proc
TTF_RenderText . . . . . . . . .        Func
TTF_RenderUNICODE  . . . . . . .        Func
TTF_RenderUTF8 . . . . . . . . .        Func
TTF_VERSION  . . . . . . . . . .        Func
UINVOKE  . . . . . . . . . . . .        Func
VECMETHOD  . . . . . . . . . . .        Proc
WSTR . . . . . . . . . . . . . .        Func
_ARRAY . . . . . . . . . . . . .        Func
_DECLARE . . . . . . . . . . . .        Proc
_DELETE  . . . . . . . . . . . .        Proc
_DELETEARRAY . . . . . . . . . .        Proc
_DEREF . . . . . . . . . . . . .        Proc
_DEREFI  . . . . . . . . . . . .        Func
_DEREFR  . . . . . . . . . . . .        Proc
_DEREFRR . . . . . . . . . . . .        Proc
_I . . . . . . . . . . . . . . .        Func
_INVOKE  . . . . . . . . . . . .        Proc
_ITEM  . . . . . . . . . . . . .        Func
_ITEMR . . . . . . . . . . . . .        Func
_NEW . . . . . . . . . . . . . .        Func
_RBXNEW  . . . . . . . . . . . .        Func
_SINVOKE . . . . . . . . . . . .        Proc
_STATIC  . . . . . . . . . . . .        Func
_STATICREF . . . . . . . . . . .        Proc
_V . . . . . . . . . . . . . . .        Func
_VINVOKE . . . . . . . . . . . .        Proc
arginvoke  . . . . . . . . . . .        Func
defined  . . . . . . . . . . . .        Func
mSDL_InvalidParamError . . . . .        Func
mSDL_OutOfMemory . . . . . . . .        Func
mSDL_PIXELTYPE . . . . . . . . .        Func
mSDL_Unsupported . . . . . . . .        Func


Structures and Unions:

                N a m e                 Size/Ofs   Type

LButton  . . . . . . . . . . . .              10 (8)
  m_Position . . . . . . . . . .               0   SDL_Point
  m_Spare  . . . . . . . . . . .               8   DWord
  m_CurrentSprite  . . . . . . .               C   LButtonSprite
LTexture . . . . . . . . . . . .              10 (8)
  m_Width  . . . . . . . . . . .               0   DWord
  m_Height . . . . . . . . . . .               4   DWord
  m_Texture  . . . . . . . . . .               8   QWord
Mix_Chunk  . . . . . . . . . . .              10 (8)
  allocated  . . . . . . . . . .               0   DWord
  abuf . . . . . . . . . . . . .               4   DWord
  alen . . . . . . . . . . . . .               8   Uint32
  volume . . . . . . . . . . . .               C   Uint8
SDL_AudioDeviceEvent . . . . . .              10 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  which  . . . . . . . . . . . .               8   Uint32
  iscapture  . . . . . . . . . .               C   Uint8
  padding1 . . . . . . . . . . .               D   Uint8
  padding2 . . . . . . . . . . .               E   Uint8
  padding3 . . . . . . . . . . .               F   Uint8
SDL_AudioSpec  . . . . . . . . .              20 (8)
  freq . . . . . . . . . . . . .               0   DWord
  format . . . . . . . . . . . .               4   SDL_AudioFormat
  channels . . . . . . . . . . .               6   Uint8
  silence  . . . . . . . . . . .               7   Uint8
  samples  . . . . . . . . . . .               8   Uint16
  padding  . . . . . . . . . . .               A   Uint16
  size_  . . . . . . . . . . . .               C   Uint32
  callback . . . . . . . . . . .              10   SDL_AudioCallback
  userdata . . . . . . . . . . .              18   DWord
SDL_Color  . . . . . . . . . . .               4 (8)
  r  . . . . . . . . . . . . . .               0   Uint8
  g  . . . . . . . . . . . . . .               1   Uint8
  b  . . . . . . . . . . . . . .               2   Uint8
  a  . . . . . . . . . . . . . .               3   Uint8
SDL_CommonEvent  . . . . . . . .               8 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
SDL_DisplayMode  . . . . . . . .              14 (8)
  format . . . . . . . . . . . .               0   Uint32
  w  . . . . . . . . . . . . . .               4   DWord
  h  . . . . . . . . . . . . . .               8   DWord
  refresh_rate . . . . . . . . .               C   DWord
  driverdata . . . . . . . . . .              10   DWord
SDL_DropEvent  . . . . . . . . .              10 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  file . . . . . . . . . . . . .               8   DWord
  windowID . . . . . . . . . . .               C   Uint32
SDL_Event  . . . . . . . . . . .              38 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  common . . . . . . . . . . . .               0   SDL_CommonEvent
  display  . . . . . . . . . . .               0   SDL_SDisplayEvent
  window . . . . . . . . . . . .               0   SDL_SWindowEvent
  key  . . . . . . . . . . . . .               0   SDL_KeyboardEvent
  edit . . . . . . . . . . . . .               0   SDL_TextEditingEvent
  text . . . . . . . . . . . . .               0   SDL_TextInputEvent
  motion . . . . . . . . . . . .               0   SDL_MouseMotionEvent
  button . . . . . . . . . . . .               0   SDL_MouseButtonEvent
  wheel  . . . . . . . . . . . .               0   SDL_MouseWheelEvent
  adevice  . . . . . . . . . . .               0   SDL_AudioDeviceEvent
  sensor . . . . . . . . . . . .               0   SDL_SensorEvent
  quit . . . . . . . . . . . . .               0   SDL_QuitEvent
  user . . . . . . . . . . . . .               0   SDL_SUserEvent
  syswm  . . . . . . . . . . . .               0   SDL_SSysWMEvent
  drop . . . . . . . . . . . . .               0   SDL_DropEvent
  padding  . . . . . . . . . . .               0   Uint8[56]
SDL_FPoint . . . . . . . . . . .               8 (8)
  x  . . . . . . . . . . . . . .               0   
  y  . . . . . . . . . . . . . .               4   
SDL_FRect  . . . . . . . . . . .              10 (8)
  x  . . . . . . . . . . . . . .               0   
  y  . . . . . . . . . . . . . .               4   
  w  . . . . . . . . . . . . . .               8   
  h  . . . . . . . . . . . . . .               C   
SDL_KeyboardEvent  . . . . . . .              20 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  windowID . . . . . . . . . . .               8   Uint32
  state  . . . . . . . . . . . .               C   Uint8
  repeat_  . . . . . . . . . . .               D   Uint8
  padding2 . . . . . . . . . . .               E   Uint8
  padding3 . . . . . . . . . . .               F   Uint8
  keysym . . . . . . . . . . . .              10   SDL_Keysym
SDL_Keysym . . . . . . . . . . .              10 (8)
  scancode . . . . . . . . . . .               0   SDL_Scancode
  sym  . . . . . . . . . . . . .               4   SDL_Keycode
  mode . . . . . . . . . . . . .               8   Word
  unused . . . . . . . . . . . .               C   DWord
SDL_MouseButtonEvent . . . . . .              1C (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  windowID . . . . . . . . . . .               8   Uint32
  which  . . . . . . . . . . . .               C   Uint32
  button . . . . . . . . . . . .              10   Uint8
  state  . . . . . . . . . . . .              11   Uint8
  clicks . . . . . . . . . . . .              12   Uint8
  padding1 . . . . . . . . . . .              13   Uint8
  x  . . . . . . . . . . . . . .              14   Sint32
  y  . . . . . . . . . . . . . .              18   Sint32
SDL_MouseMotionEvent . . . . . .              24 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  windowID . . . . . . . . . . .               8   Uint32
  which  . . . . . . . . . . . .               C   Uint32
  state  . . . . . . . . . . . .              10   Uint32
  x  . . . . . . . . . . . . . .              14   Sint32
  y  . . . . . . . . . . . . . .              18   Sint32
  xrel . . . . . . . . . . . . .              1C   Sint32
  yrel . . . . . . . . . . . . .              20   Sint32
SDL_MouseWheelEvent  . . . . . .              1C (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  windowID . . . . . . . . . . .               8   Uint32
  which  . . . . . . . . . . . .               C   Uint32
  x  . . . . . . . . . . . . . .              10   Sint32
  y  . . . . . . . . . . . . . .              14   Sint32
  direction  . . . . . . . . . .              18   Uint32
SDL_OSEvent  . . . . . . . . . .               8 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
SDL_Palette  . . . . . . . . . .              10 (8)
  ncolors  . . . . . . . . . . .               0   DWord
  colors . . . . . . . . . . . .               4   DWord
  version  . . . . . . . . . . .               8   DWord
  refcount . . . . . . . . . . .               C   DWord
SDL_PixelFormat  . . . . . . . .              2C (8)
  format . . . . . . . . . . . .               0   DWord
  palette  . . . . . . . . . . .               4   DWord
  BitsPerPixel . . . . . . . . .               8   Uint8
  BytesPerPixel  . . . . . . . .               9   Uint8
  padding  . . . . . . . . . . .               A   Uint8[2]
  Rmask  . . . . . . . . . . . .               C   DWord
  Gmask  . . . . . . . . . . . .              10   DWord
  Bmask  . . . . . . . . . . . .              14   DWord
  Amask  . . . . . . . . . . . .              18   DWord
  Rloss  . . . . . . . . . . . .              1C   Uint8
  Gloss  . . . . . . . . . . . .              1D   Uint8
  Bloss  . . . . . . . . . . . .              1E   Uint8
  Aloss  . . . . . . . . . . . .              1F   Uint8
  Rshift . . . . . . . . . . . .              20   Uint8
  Gshift . . . . . . . . . . . .              21   Uint8
  Bshift . . . . . . . . . . . .              22   Uint8
  Ashift . . . . . . . . . . . .              23   Uint8
  refcount . . . . . . . . . . .              24   DWord
  next . . . . . . . . . . . . .              28   DWord
SDL_Point  . . . . . . . . . . .               8 (8)
  x  . . . . . . . . . . . . . .               0   DWord
  y  . . . . . . . . . . . . . .               4   DWord
SDL_QuitEvent  . . . . . . . . .               8 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
SDL_RWops  . . . . . . . . . . .              38 (8)
  size_  . . . . . . . . . . . .               0   pSDL_RWops_size
  seek . . . . . . . . . . . . .               8   pSDL_RWops_seek
  read . . . . . . . . . . . . .              10   pSDL_RWops_read
  write  . . . . . . . . . . . .              18   pSDL_RWops_write
  close  . . . . . . . . . . . .              20   pSDL_RWops_close
  type_  . . . . . . . . . . . .              28   Uint32
  hidden . . . . . . . . . . . .              2C
    mem  . . . . . . . . . . . .              2C
      base . . . . . . . . . . .              2C   DWord
      here . . . . . . . . . . .              30   DWord
      stop . . . . . . . . . . .              34   DWord
    unknown  . . . . . . . . . .              2C
      data1  . . . . . . . . . .              2C   DWord
      data2  . . . . . . . . . .              30   DWord
SDL_Rect . . . . . . . . . . . .              10 (8)
  x  . . . . . . . . . . . . . .               0   DWord
  y  . . . . . . . . . . . . . .               4   DWord
  w  . . . . . . . . . . . . . .               8   DWord
  h  . . . . . . . . . . . . . .               C   DWord
SDL_RendererInfo . . . . . . . .              54 (8)
  name_  . . . . . . . . . . . .               0   DWord
  flags  . . . . . . . . . . . .               4   Uint32
  num_texture_formats  . . . . .               8   Uint32
  texture_formats  . . . . . . .               C   Uint32[16]
  max_texture_width  . . . . . .              4C   DWord
  max_texture_height . . . . . .              50   DWord
SDL_SDisplayEvent  . . . . . . .              14 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  display  . . . . . . . . . . .               8   Uint32
  event  . . . . . . . . . . . .               C   Uint8
  padding1 . . . . . . . . . . .               D   Uint8
  padding2 . . . . . . . . . . .               E   Uint8
  padding3 . . . . . . . . . . .               F   Uint8
  dwData1  . . . . . . . . . . .              10   Sint32
SDL_SSysWMEvent  . . . . . . . .               C (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  msg  . . . . . . . . . . . . .               8   DWord
SDL_SUserEvent . . . . . . . . .              18 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  windowID . . . . . . . . . . .               8   Uint32
  sCode  . . . . . . . . . . . .               C   Sint32
  dwData1  . . . . . . . . . . .              10   DWord
  dwData2  . . . . . . . . . . .              14   DWord
SDL_SWindowEvent . . . . . . . .              18 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  windowID . . . . . . . . . . .               8   Uint32
  event  . . . . . . . . . . . .               C   Uint8
  padding1 . . . . . . . . . . .               D   Uint8
  padding2 . . . . . . . . . . .               E   Uint8
  padding3 . . . . . . . . . . .               F   Uint8
  data1  . . . . . . . . . . . .              10   Sint32
  data2  . . . . . . . . . . . .              14   Sint32
SDL_SensorEvent  . . . . . . . .              24 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  which  . . . . . . . . . . . .               8   Sint32
  data . . . . . . . . . . . . .               C   [6]
SDL_Surface  . . . . . . . . . .              60 (8)
  flags  . . . . . . . . . . . .               0   Uint32
  format . . . . . . . . . . . .               8   QWord
  w  . . . . . . . . . . . . . .              10   DWord
  h  . . . . . . . . . . . . . .              14   DWord
  pitch  . . . . . . . . . . . .              18   DWord
  pixels . . . . . . . . . . . .              20   QWord
  userdata . . . . . . . . . . .              28   QWord
  locked . . . . . . . . . . . .              30   DWord
  lock_data  . . . . . . . . . .              38   QWord
  clip_rect  . . . . . . . . . .              40   SDL_Rect
  map  . . . . . . . . . . . . .              50   QWord
  refcount . . . . . . . . . . .              58   DWord
SDL_TextEditingEvent . . . . . .              34 (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  windowID . . . . . . . . . . .               8   Uint32
  text . . . . . . . . . . . . .               C   Byte[32]
  start  . . . . . . . . . . . .              2C   Sint32
  length_  . . . . . . . . . . .              30   Sint32
SDL_TextInputEvent . . . . . . .              2C (8)
  type_  . . . . . . . . . . . .               0   Uint32
  timestamp  . . . . . . . . . .               4   Uint32
  windowID . . . . . . . . . . .               8   Uint32
  text . . . . . . . . . . . . .               C   Byte[32]
__m128 . . . . . . . . . . . . .              10 (8)
  f32  . . . . . . . . . . . . .               0   __m128f
  i8 . . . . . . . . . . . . . .               0   __m128b
  i16  . . . . . . . . . . . . .               0   __m128w
  i32  . . . . . . . . . . . . .               0   __m128i
  d64  . . . . . . . . . . . . .               0   __m128d
  q64  . . . . . . . . . . . . .               0   __m128q
__m128b  . . . . . . . . . . . .              10 (8)
  b0 . . . . . . . . . . . . . .               0   Byte
  b1 . . . . . . . . . . . . . .               1   Byte
  b2 . . . . . . . . . . . . . .               2   Byte
  b3 . . . . . . . . . . . . . .               3   Byte
  b4 . . . . . . . . . . . . . .               4   Byte
  b5 . . . . . . . . . . . . . .               5   Byte
  b6 . . . . . . . . . . . . . .               6   Byte
  b7 . . . . . . . . . . . . . .               7   Byte
  b8 . . . . . . . . . . . . . .               8   Byte
  b9 . . . . . . . . . . . . . .               9   Byte
  b10  . . . . . . . . . . . . .               A   Byte
  b11  . . . . . . . . . . . . .               B   Byte
  b12  . . . . . . . . . . . . .               C   Byte
  b13  . . . . . . . . . . . . .               D   Byte
  b14  . . . . . . . . . . . . .               E   Byte
  b15  . . . . . . . . . . . . .               F   Byte
__m128d  . . . . . . . . . . . .              10 (8)
  d0 . . . . . . . . . . . . . .               0   
  d1 . . . . . . . . . . . . . .               8   
__m128f  . . . . . . . . . . . .              10 (8)
  f0 . . . . . . . . . . . . . .               0   
  f1 . . . . . . . . . . . . . .               4   
  f2 . . . . . . . . . . . . . .               8   
  f3 . . . . . . . . . . . . . .               C   
__m128i  . . . . . . . . . . . .              10 (8)
  i0 . . . . . . . . . . . . . .               0   DWord
  i1 . . . . . . . . . . . . . .               4   DWord
  i2 . . . . . . . . . . . . . .               8   DWord
  i3 . . . . . . . . . . . . . .               C   DWord
__m128q  . . . . . . . . . . . .              10 (8)
  q0 . . . . . . . . . . . . . .               0   QWord
  q1 . . . . . . . . . . . . . .               8   QWord
__m128w  . . . . . . . . . . . .              10 (8)
  w0 . . . . . . . . . . . . . .               0   Word
  w1 . . . . . . . . . . . . . .               2   Word
  w2 . . . . . . . . . . . . . .               4   Word
  w3 . . . . . . . . . . . . . .               6   Word
  w4 . . . . . . . . . . . . . .               8   Word
  w5 . . . . . . . . . . . . . .               A   Word
  w6 . . . . . . . . . . . . . .               C   Word
  w7 . . . . . . . . . . . . . .               E   Word
__m256 . . . . . . . . . . . . .              20 (8)
  f32  . . . . . . . . . . . . .               0   __m256f
  i8 . . . . . . . . . . . . . .               0   __m256b
  i16  . . . . . . . . . . . . .               0   __m256w
  i32  . . . . . . . . . . . . .               0   __m256i
  d64  . . . . . . . . . . . . .               0   __m256d
  q64  . . . . . . . . . . . . .               0   __m256q
__m256b  . . . . . . . . . . . .              20 (8)
  b0 . . . . . . . . . . . . . .               0   Byte
  b1 . . . . . . . . . . . . . .               1   Byte
  b2 . . . . . . . . . . . . . .               2   Byte
  b3 . . . . . . . . . . . . . .               3   Byte
  b4 . . . . . . . . . . . . . .               4   Byte
  b5 . . . . . . . . . . . . . .               5   Byte
  b6 . . . . . . . . . . . . . .               6   Byte
  b7 . . . . . . . . . . . . . .               7   Byte
  b8 . . . . . . . . . . . . . .               8   Byte
  b9 . . . . . . . . . . . . . .               9   Byte
  b10  . . . . . . . . . . . . .               A   Byte
  b11  . . . . . . . . . . . . .               B   Byte
  b12  . . . . . . . . . . . . .               C   Byte
  b13  . . . . . . . . . . . . .               D   Byte
  b14  . . . . . . . . . . . . .               E   Byte
  b15  . . . . . . . . . . . . .               F   Byte
  b16  . . . . . . . . . . . . .              10   Byte
  b17  . . . . . . . . . . . . .              11   Byte
  b18  . . . . . . . . . . . . .              12   Byte
  b19  . . . . . . . . . . . . .              13   Byte
  b20  . . . . . . . . . . . . .              14   Byte
  b21  . . . . . . . . . . . . .              15   Byte
  b22  . . . . . . . . . . . . .              16   Byte
  b23  . . . . . . . . . . . . .              17   Byte
  b24  . . . . . . . . . . . . .              18   Byte
  b25  . . . . . . . . . . . . .              19   Byte
  b26  . . . . . . . . . . . . .              1A   Byte
  b27  . . . . . . . . . . . . .              1B   Byte
  b28  . . . . . . . . . . . . .              1C   Byte
  b29  . . . . . . . . . . . . .              1D   Byte
  b30  . . . . . . . . . . . . .              1E   Byte
  b31  . . . . . . . . . . . . .              1F   Byte
__m256d  . . . . . . . . . . . .              20 (8)
  d0 . . . . . . . . . . . . . .               0   
  d1 . . . . . . . . . . . . . .               8   
  d2 . . . . . . . . . . . . . .              10   
  d3 . . . . . . . . . . . . . .              18   
__m256f  . . . . . . . . . . . .              20 (8)
  f0 . . . . . . . . . . . . . .               0   
  f1 . . . . . . . . . . . . . .               4   
  f2 . . . . . . . . . . . . . .               8   
  f3 . . . . . . . . . . . . . .               C   
  f4 . . . . . . . . . . . . . .              10   
  f5 . . . . . . . . . . . . . .              14   
  f6 . . . . . . . . . . . . . .              18   
  f7 . . . . . . . . . . . . . .              1C   
__m256i  . . . . . . . . . . . .              20 (8)
  i0 . . . . . . . . . . . . . .               0   DWord
  i1 . . . . . . . . . . . . . .               4   DWord
  i2 . . . . . . . . . . . . . .               8   DWord
  i3 . . . . . . . . . . . . . .               C   DWord
  i4 . . . . . . . . . . . . . .              10   DWord
  i5 . . . . . . . . . . . . . .              14   DWord
  i6 . . . . . . . . . . . . . .              18   DWord
  i7 . . . . . . . . . . . . . .              1C   DWord
__m256q  . . . . . . . . . . . .              20 (8)
  q0 . . . . . . . . . . . . . .               0   QWord
  q1 . . . . . . . . . . . . . .               8   QWord
  q2 . . . . . . . . . . . . . .              10   QWord
  q3 . . . . . . . . . . . . . .              18   QWord
__m256w  . . . . . . . . . . . .              20 (8)
  w0 . . . . . . . . . . . . . .               0   Word
  w1 . . . . . . . . . . . . . .               2   Word
  w2 . . . . . . . . . . . . . .               4   Word
  w3 . . . . . . . . . . . . . .               6   Word
  w4 . . . . . . . . . . . . . .               8   Word
  w5 . . . . . . . . . . . . . .               A   Word
  w6 . . . . . . . . . . . . . .               C   Word
  w7 . . . . . . . . . . . . . .               E   Word
  w8 . . . . . . . . . . . . . .              10   Word
  w9 . . . . . . . . . . . . . .              12   Word
  w10  . . . . . . . . . . . . .              14   Word
  w11  . . . . . . . . . . . . .              16   Word
  w12  . . . . . . . . . . . . .              18   Word
  w13  . . . . . . . . . . . . .              1A   Word
  w14  . . . . . . . . . . . . .              1C   Word
  w15  . . . . . . . . . . . . .              1E   Word
__m512 . . . . . . . . . . . . .              40 (8)
  f32  . . . . . . . . . . . . .               0   __m512f
  i8 . . . . . . . . . . . . . .               0   __m512b
  i16  . . . . . . . . . . . . .               0   __m512w
  i32  . . . . . . . . . . . . .               0   __m512i
  d64  . . . . . . . . . . . . .               0   __m512d
  q64  . . . . . . . . . . . . .               0   __m512q
__m512b  . . . . . . . . . . . .              40 (8)
  b0 . . . . . . . . . . . . . .               0   Byte
  b1 . . . . . . . . . . . . . .               1   Byte
  b2 . . . . . . . . . . . . . .               2   Byte
  b3 . . . . . . . . . . . . . .               3   Byte
  b4 . . . . . . . . . . . . . .               4   Byte
  b5 . . . . . . . . . . . . . .               5   Byte
  b6 . . . . . . . . . . . . . .               6   Byte
  b7 . . . . . . . . . . . . . .               7   Byte
  b8 . . . . . . . . . . . . . .               8   Byte
  b9 . . . . . . . . . . . . . .               9   Byte
  b10  . . . . . . . . . . . . .               A   Byte
  b11  . . . . . . . . . . . . .               B   Byte
  b12  . . . . . . . . . . . . .               C   Byte
  b13  . . . . . . . . . . . . .               D   Byte
  b14  . . . . . . . . . . . . .               E   Byte
  b15  . . . . . . . . . . . . .               F   Byte
  b16  . . . . . . . . . . . . .              10   Byte
  b17  . . . . . . . . . . . . .              11   Byte
  b18  . . . . . . . . . . . . .              12   Byte
  b19  . . . . . . . . . . . . .              13   Byte
  b20  . . . . . . . . . . . . .              14   Byte
  b21  . . . . . . . . . . . . .              15   Byte
  b22  . . . . . . . . . . . . .              16   Byte
  b23  . . . . . . . . . . . . .              17   Byte
  b24  . . . . . . . . . . . . .              18   Byte
  b25  . . . . . . . . . . . . .              19   Byte
  b26  . . . . . . . . . . . . .              1A   Byte
  b27  . . . . . . . . . . . . .              1B   Byte
  b28  . . . . . . . . . . . . .              1C   Byte
  b29  . . . . . . . . . . . . .              1D   Byte
  b30  . . . . . . . . . . . . .              1E   Byte
  b31  . . . . . . . . . . . . .              1F   Byte
  b32  . . . . . . . . . . . . .              20   Byte
  b33  . . . . . . . . . . . . .              21   Byte
  b34  . . . . . . . . . . . . .              22   Byte
  b35  . . . . . . . . . . . . .              23   Byte
  b36  . . . . . . . . . . . . .              24   Byte
  b37  . . . . . . . . . . . . .              25   Byte
  b38  . . . . . . . . . . . . .              26   Byte
  b39  . . . . . . . . . . . . .              27   Byte
  b40  . . . . . . . . . . . . .              28   Byte
  b41  . . . . . . . . . . . . .              29   Byte
  b42  . . . . . . . . . . . . .              2A   Byte
  b43  . . . . . . . . . . . . .              2B   Byte
  b44  . . . . . . . . . . . . .              2C   Byte
  b45  . . . . . . . . . . . . .              2D   Byte
  b46  . . . . . . . . . . . . .              2E   Byte
  b47  . . . . . . . . . . . . .              2F   Byte
  b48  . . . . . . . . . . . . .              30   Byte
  b49  . . . . . . . . . . . . .              31   Byte
  b50  . . . . . . . . . . . . .              32   Byte
  b51  . . . . . . . . . . . . .              33   Byte
  b52  . . . . . . . . . . . . .              34   Byte
  b53  . . . . . . . . . . . . .              35   Byte
  b54  . . . . . . . . . . . . .              36   Byte
  b55  . . . . . . . . . . . . .              37   Byte
  b56  . . . . . . . . . . . . .              38   Byte
  b57  . . . . . . . . . . . . .              39   Byte
  b58  . . . . . . . . . . . . .              3A   Byte
  b59  . . . . . . . . . . . . .              3B   Byte
  b60  . . . . . . . . . . . . .              3C   Byte
  b61  . . . . . . . . . . . . .              3D   Byte
  b62  . . . . . . . . . . . . .              3E   Byte
  b63  . . . . . . . . . . . . .              3F   Byte
__m512d  . . . . . . . . . . . .              40 (8)
  d0 . . . . . . . . . . . . . .               0   
  d1 . . . . . . . . . . . . . .               8   
  d2 . . . . . . . . . . . . . .              10   
  d3 . . . . . . . . . . . . . .              18   
  d4 . . . . . . . . . . . . . .              20   
  d5 . . . . . . . . . . . . . .              28   
  d6 . . . . . . . . . . . . . .              30   
  d7 . . . . . . . . . . . . . .              38   
__m512f  . . . . . . . . . . . .              40 (8)
  f0 . . . . . . . . . . . . . .               0   
  f1 . . . . . . . . . . . . . .               4   
  f2 . . . . . . . . . . . . . .               8   
  f3 . . . . . . . . . . . . . .               C   
  f4 . . . . . . . . . . . . . .              10   
  f5 . . . . . . . . . . . . . .              14   
  f6 . . . . . . . . . . . . . .              18   
  f7 . . . . . . . . . . . . . .              1C   
  f8 . . . . . . . . . . . . . .              20   
  f9 . . . . . . . . . . . . . .              24   
  f10  . . . . . . . . . . . . .              28   
  f11  . . . . . . . . . . . . .              2C   
  f12  . . . . . . . . . . . . .              30   
  f13  . . . . . . . . . . . . .              34   
  f14  . . . . . . . . . . . . .              38   
  f15  . . . . . . . . . . . . .              3C   
__m512i  . . . . . . . . . . . .              40 (8)
  i0 . . . . . . . . . . . . . .               0   DWord
  i1 . . . . . . . . . . . . . .               4   DWord
  i2 . . . . . . . . . . . . . .               8   DWord
  i3 . . . . . . . . . . . . . .               C   DWord
  i4 . . . . . . . . . . . . . .              10   DWord
  i5 . . . . . . . . . . . . . .              14   DWord
  i6 . . . . . . . . . . . . . .              18   DWord
  i7 . . . . . . . . . . . . . .              1C   DWord
  i8 . . . . . . . . . . . . . .              20   DWord
  i9 . . . . . . . . . . . . . .              24   DWord
  i10  . . . . . . . . . . . . .              28   DWord
  i11  . . . . . . . . . . . . .              2C   DWord
  i12  . . . . . . . . . . . . .              30   DWord
  i13  . . . . . . . . . . . . .              34   DWord
  i14  . . . . . . . . . . . . .              38   DWord
  i15  . . . . . . . . . . . . .              3C   DWord
__m512q  . . . . . . . . . . . .              40 (8)
  q0 . . . . . . . . . . . . . .               0   QWord
  q1 . . . . . . . . . . . . . .               8   QWord
  q2 . . . . . . . . . . . . . .              10   QWord
  q3 . . . . . . . . . . . . . .              18   QWord
  q4 . . . . . . . . . . . . . .              20   QWord
  q5 . . . . . . . . . . . . . .              28   QWord
  q6 . . . . . . . . . . . . . .              30   QWord
  q7 . . . . . . . . . . . . . .              38   QWord
__m512w  . . . . . . . . . . . .              40 (8)
  w0 . . . . . . . . . . . . . .               0   Word
  w1 . . . . . . . . . . . . . .               2   Word
  w2 . . . . . . . . . . . . . .               4   Word
  w3 . . . . . . . . . . . . . .               6   Word
  w4 . . . . . . . . . . . . . .               8   Word
  w5 . . . . . . . . . . . . . .               A   Word
  w6 . . . . . . . . . . . . . .               C   Word
  w7 . . . . . . . . . . . . . .               E   Word
  w8 . . . . . . . . . . . . . .              10   Word
  w9 . . . . . . . . . . . . . .              12   Word
  w10  . . . . . . . . . . . . .              14   Word
  w11  . . . . . . . . . . . . .              16   Word
  w12  . . . . . . . . . . . . .              18   Word
  w13  . . . . . . . . . . . . .              1A   Word
  w14  . . . . . . . . . . . . .              1C   Word
  w15  . . . . . . . . . . . . .              1E   Word
  w16  . . . . . . . . . . . . .              20   Word
  w17  . . . . . . . . . . . . .              22   Word
  w18  . . . . . . . . . . . . .              24   Word
  w19  . . . . . . . . . . . . .              26   Word
  w20  . . . . . . . . . . . . .              28   Word
  w21  . . . . . . . . . . . . .              2A   Word
  w22  . . . . . . . . . . . . .              2C   Word
  w23  . . . . . . . . . . . . .              2E   Word
  w24  . . . . . . . . . . . . .              30   Word
  w25  . . . . . . . . . . . . .              32   Word
  w26  . . . . . . . . . . . . .              34   Word
  w27  . . . . . . . . . . . . .              36   Word
  w28  . . . . . . . . . . . . .              38   Word
  w29  . . . . . . . . . . . . .              3A   Word
  w30  . . . . . . . . . . . . .              3C   Word
  w31  . . . . . . . . . . . . .              3E   Word
sSDL_AudioCVT  . . . . . . . . .              80 (8)
  needed . . . . . . . . . . . .               0   DWord
  src_format . . . . . . . . . .               4   SDL_AudioFormat
  dst_format . . . . . . . . . .               6   SDL_AudioFormat
  rate_incr  . . . . . . . . . .               8   
  buf  . . . . . . . . . . . . .              10   DWord
  len  . . . . . . . . . . . . .              14   DWord
  len_cvt  . . . . . . . . . . .              18   DWord
  len_mult . . . . . . . . . . .              1C   DWord
  len_ratio  . . . . . . . . . .              20   
  filters  . . . . . . . . . . .              28   SDL_AudioFilter[10]
  filter_index . . . . . . . . .              78   DWord


Types:

                N a m e                 Size    Attr

IMG_InitFlags  . . . . . . . . .           4  DWord
LButtonSprite  . . . . . . . . .           4  DWord
MIX_InitFlags  . . . . . . . . .           4  DWord
Mix_EffectDone_t . . . . . . . .           8  Near Ptr 
Mix_EffectFunc_t . . . . . . . .           8  Near Ptr 
Mix_Fading . . . . . . . . . . .           4  DWord
Mix_MusicType  . . . . . . . . .           4  DWord
SDL_ArrayOrder . . . . . . . . .           4  DWord
SDL_AudioCVT . . . . . . . . . .         128  sSDL_AudioCVT
SDL_AudioCallback  . . . . . . .           8  Near Ptr 
SDL_AudioDeviceID  . . . . . . .           4  DWord
SDL_AudioFilter  . . . . . . . .           8  Near Ptr 
SDL_AudioFormat  . . . . . . . .           2  Word
SDL_AudioStatus  . . . . . . . .           4  DWord
SDL_BitmapOrder  . . . . . . . .           4  DWord
SDL_BlendFactor  . . . . . . . .           4  DWord
SDL_BlendMode  . . . . . . . . .           4  DWord
SDL_BlendOperation . . . . . . .           4  DWord
SDL_Bool . . . . . . . . . . . .           1  Byte
SDL_DisplayEventID . . . . . . .           4  DWord
SDL_DisplayOrientation . . . . .           4  DWord
SDL_EventFilter  . . . . . . . .           8  Near Ptr 
SDL_EventType  . . . . . . . . .           4  DWord
SDL_GLContext  . . . . . . . . .           8  Near Ptr 
SDL_GLContextResetNotification .           4  DWord
SDL_GLattr . . . . . . . . . . .           4  DWord
SDL_GLcontextFlag  . . . . . . .           4  DWord
SDL_GLcontextReleaseFlag . . . .           4  DWord
SDL_GLprofile  . . . . . . . . .           4  DWord
SDL_HitTest  . . . . . . . . . .           8  Near Ptr 
SDL_HitTestResult  . . . . . . .           4  DWord
SDL_Keycode  . . . . . . . . . .           4  DWord
SDL_Keymod . . . . . . . . . . .           4  DWord
SDL_MouseWheelDirection  . . . .           4  DWord
SDL_PackedLayout . . . . . . . .           4  DWord
SDL_PackedOrder  . . . . . . . .           4  DWord
SDL_PixelFormatEnum  . . . . . .           4  DWord
SDL_PixelType  . . . . . . . . .           4  DWord
SDL_RendererFlags  . . . . . . .           4  DWord
SDL_RendererFlip . . . . . . . .           4  DWord
SDL_ScaleMode  . . . . . . . . .           4  DWord
SDL_Scancode . . . . . . . . . .           4  DWord
SDL_SystemCursor . . . . . . . .           4  DWord
SDL_TextureAccess  . . . . . . .           4  DWord
SDL_TextureModulate  . . . . . .           4  DWord
SDL_TimerID  . . . . . . . . . .           4  DWord
SDL_WindowEventID  . . . . . . .           4  DWord
SDL_WindowFlags  . . . . . . . .           4  DWord
SDL_YUV_CONVERSION_MODE  . . . .           4  DWord
SDL_blit . . . . . . . . . . . .           8  Near Ptr 
SDL_errorcode  . . . . . . . . .           4  DWord
SDL_eventaction  . . . . . . . .           4  DWord
Sint16 . . . . . . . . . . . . .           2  Word
Sint32 . . . . . . . . . . . . .           4  DWord
Sint64 . . . . . . . . . . . . .           8  QWord
Sint8  . . . . . . . . . . . . .           1  Byte
Uint16 . . . . . . . . . . . . .           2  Word
Uint32 . . . . . . . . . . . . .           4  DWord
Uint64 . . . . . . . . . . . . .           8  QWord
Uint8  . . . . . . . . . . . . .           1  Byte
pSDL_RWops_close . . . . . . . .           8  Near Ptr 
pSDL_RWops_read  . . . . . . . .           8  Near Ptr 
pSDL_RWops_seek  . . . . . . . .           8  Near Ptr 
pSDL_RWops_size  . . . . . . . .           8  Near Ptr 
pSDL_RWops_write . . . . . . . .           8  Near Ptr 
protoSDL_RWops_close . . . . . .           8  Proc L Near64 FASTCALL
protoSDL_RWops_read  . . . . . .           8  Proc L Near64 FASTCALL
protoSDL_RWops_seek  . . . . . .           8  Proc L Near64 FASTCALL
protoSDL_RWops_size  . . . . . .           8  Proc L Near64 FASTCALL
protoSDL_RWops_write . . . . . .           8  Proc L Near64 FASTCALL
proto_Mix_EffectDone_t . . . . .           8  Proc L Near64 FASTCALL
proto_Mix_EffectFunc_t . . . . .           8  Proc L Near64 FASTCALL
proto_SDL_AudioCallback  . . . .           8  Proc L Near64 FASTCALL
proto_SDL_AudioFilter  . . . . .           8  Proc L Near64 FASTCALL
proto_SDL_EventFilter  . . . . .           8  Proc L Near64 FASTCALL
proto_SDL_HitTest  . . . . . . .           8  Proc L Near64 FASTCALL
proto_SDL_blit . . . . . . . . .           8  Proc L Near64 FASTCALL
size_t . . . . . . . . . . . . .           8  QWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

.debug$S . . . . . . . . . . . .        32 Bit   00001232 Byte    Private 'CODE'
.debug$T . . . . . . . . . . . .        32 Bit   000024F2 Byte    Private 'CODE'
FLAT . . . . . . . . . . . . . .        GROUP
.pdata . . . . . . . . . . . . .        64 Bit   000000C0 DWord   Private 'DATA'
.xdata . . . . . . . . . . . . .        64 Bit   0000009C QWord   Private 'DATA'
CONST  . . . . . . . . . . . . .        64 Bit   00000063 Para    Public  'CONST'
_BSS . . . . . . . . . . . . . .        64 Bit   00000088 Para    Public  'BSS'
_DATA  . . . . . . . . . . . . .        64 Bit   00000001 Para    Public  'DATA'
_TEXT  . . . . . . . . . . . . .        64 Bit   00000905 Para    Public  'CODE'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

ExitProcess  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
GetStdHandle . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_Init . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
IMG_Linked_Version . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_Load . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
IMG_LoadBMP_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadCUR_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadGIF_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadICO_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadJPG_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadLBM_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadPCX_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadPNG_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadPNM_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadSVG_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadTGA_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadTIF_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadTexture  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadTextureTyped_RW  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadTexture_RW . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadTyped_RW . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadWEBP_RW  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadXCF_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadXPM_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_LoadXV_RW  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_Load_RW  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_Quit . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
IMG_ReadXPMFromArray . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_SaveJPG  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_SaveJPG_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_SavePNG  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_SavePNG_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isBMP  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isCUR  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isGIF  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isICO  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isJPG  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isLBM  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isPCX  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isPNG  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isPNM  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isSVG  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isTIF  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isWEBP . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isXCF  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isXPM  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
IMG_isXV . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Init . . . . . . . . . . . . . .        P Near   00000645 _TEXT    000000F1 Public   FASTCALL
  @C0029 . . . . . . . . . . . .        L Near   00000664 _TEXT
  @C002B . . . . . . . . . . . .        L Near   000006BC _TEXT
  @C002E . . . . . . . . . . . .        L Near   0000072A _TEXT
  @C002D . . . . . . . . . . . .        L Near   00000705 _TEXT
  @C002C . . . . . . . . . . . .        L Near   000006F5 _TEXT
  EXIT . . . . . . . . . . . . .        L Near   00000731 _TEXT
  @C002A . . . . . . . . . . . .        L Near   0000069B _TEXT
LButton_handleEvent  . . . . . .        P Near   00000354 _TEXT    00000103 Public   FASTCALL
  e  . . . . . . . . . . . . . .        Near              rsp + 0038
  pLButton . . . . . . . . . . .        Near              rsp + 0030
  xCoord . . . . . . . . . . . .        DWord             rsp + 0020
  yCoord . . . . . . . . . . . .        DWord             rsp + 0024
  inside . . . . . . . . . . . .        Byte              rsp + 0028
  @C000A . . . . . . . . . . . .        L Near   00000384 _TEXT
  @C0015 . . . . . . . . . . . .        L Near   00000445 _TEXT
  @C0012 . . . . . . . . . . . .        L Near   00000425 _TEXT
  @C000E . . . . . . . . . . . .        L Near   000003F0 _TEXT
  @C000F . . . . . . . . . . . .        L Near   000003FA _TEXT
  @C0007 . . . . . . . . . . . .        L Near   00000445 _TEXT
  @C0009 . . . . . . . . . . . .        L Near   0000037C _TEXT
  @C0010 . . . . . . . . . . . .        L Near   0000040A _TEXT
  @C0014 . . . . . . . . . . . .        L Near   00000436 _TEXT
  @C0011 . . . . . . . . . . . .        L Near   00000445 _TEXT
  @C000B . . . . . . . . . . . .        L Near   000003D8 _TEXT
  @C000D . . . . . . . . . . . .        L Near   000003E4 _TEXT
  @C000C . . . . . . . . . . . .        L Near   000003FA _TEXT
  @C0008 . . . . . . . . . . . .        L Near   00000390 _TEXT
  @C0013 . . . . . . . . . . . .        L Near   00000445 _TEXT
LButton_init . . . . . . . . . .        P Near   000002F1 _TEXT    00000031 Public   FASTCALL
  pLButton . . . . . . . . . . .        Near              rsp + 0010
LButton_setPosition  . . . . . .        P Near   00000322 _TEXT    00000032 Public   FASTCALL
  y  . . . . . . . . . . . . . .        DWord             rsp + 0020
  x  . . . . . . . . . . . . . .        DWord             rsp + 0018
  pLButton . . . . . . . . . . .        Near              rsp + 0010
LoadMedia  . . . . . . . . . . .        P Near   000007AE _TEXT    00000109 Public   FASTCALL
  success  . . . . . . . . . . .        Byte              rsp + 0020
  @C0032 . . . . . . . . . . . .        L Near   0000084F _TEXT
  @C0033 . . . . . . . . . . . .        L Near   0000087D _TEXT
  @C002F . . . . . . . . . . . .        L Near   000007DA _TEXT
  EXIT . . . . . . . . . . . . .        L Near   000008B2 _TEXT
  @C0030 . . . . . . . . . . . .        L Near   000007F0 _TEXT
  @C0034 . . . . . . . . . . . .        L Near   000008AB _TEXT
  @C0031 . . . . . . . . . . . .        L Near   00000821 _TEXT
LoadTexture  . . . . . . . . . .        P Near   000008B7 _TEXT    0000004E Public   FASTCALL
  pFile  . . . . . . . . . . . .        QWord             rsp + 0030
  loadedSurface  . . . . . . . .        QWord             rsp + 0020
  newTexture . . . . . . . . . .        QWord             rsp + 0028
  @C0036 . . . . . . . . . . . .        L Near   000008EC _TEXT
  @C0035 . . . . . . . . . . . .        L Near   000008D1 _TEXT
  ERROR  . . . . . . . . . . . .        L Near   00000900 _TEXT
Mix_AllocateChannels . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_ChannelFinished  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_CloseAudio . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_EachSoundFont  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_ExpireChannel  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FadeInChannelTimed . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FadeInMusic  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FadeInMusicPos . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FadeOutChannel . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FadeOutGroup . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FadeOutMusic . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FadingChannel  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FadingMusic  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_FreeChunk  . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_FreeMusic  . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_GetChunk . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GetChunkDecoder  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GetMusicDecoder  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GetMusicHookData . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GetMusicType . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GetNumChunkDecoders  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GetNumMusicDecoders  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GetSoundFonts  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GetSynchroValue  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GroupAvailable . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GroupChannel . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GroupChannels  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GroupCount . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GroupNewer . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_GroupOldest  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_HaltChannel  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_HaltGroup  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_HaltMusic  . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_HasChunkDecoder  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_HasMusicDecoder  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_HookMusic  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_HookMusicFinished  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_Init . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_Linked_Version . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_LoadMUS  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_LoadMUSType_RW . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_LoadMUS_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_LoadWAV_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_OpenAudio  . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_OpenAudioDevice  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_Pause  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_PauseMusic . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_Paused . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_PausedMusic  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_PlayChannelTimed . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_PlayMusic  . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_Playing  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_PlayingMusic . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_QuerySpec  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_QuickLoad_RAW  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_QuickLoad_WAV  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_Quit . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_RegisterEffect . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_ReserveChannels  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_Resume . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_ResumeMusic  . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
Mix_RewindMusic  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetDistance  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetMusicCMD  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetMusicPosition . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetPanning . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetPosition  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetPostMix . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetReverseStereo . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetSoundFonts  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_SetSynchroValue  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_UnregisterAllEffects . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_UnregisterEffect . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_Volume . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_VolumeChunk  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Mix_VolumeMusic  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AddEventWatch  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AddTimer . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AllocFormat  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AllocPalette . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AllocRW  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AudioInit  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AudioQuit  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AudioStreamAvailable . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AudioStreamClear . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AudioStreamFlush . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AudioStreamGet . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_AudioStreamPut . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_BuildAudioCVT  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CalculateGammaRamp . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CaptureMouse . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ClearError . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ClearQueuedAudio . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CloseAudio . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CloseAudioDevice . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ComposeCustomBlendMode . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ConvertAudio . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ConvertPixels  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ConvertSurface . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ConvertSurfaceFormat . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateColorCursor  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateCursor . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateRGBSurface . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateRGBSurfaceFrom . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateRGBSurfaceWithFormat .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateRGBSurfaceWithFormatFrom         P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateRenderer . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_CreateSoftwareRenderer . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateSystemCursor . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateTexture  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateTextureFromSurface . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_CreateWindow . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_CreateWindowAndRenderer  . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_CreateWindowFrom . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_DelEventWatch  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_Delay  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_DequeueAudio . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_DestroyRenderer  . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_DestroyTexture . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_DestroyWindow  . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_DisableScreenSaver . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_DuplicateSurface . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_EnableScreenSaver  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_EnclosePoints  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_Error  . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_EventState . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FillRect . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FillRects  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FilterEvents . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FlushEvent . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FlushEvents  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FreeAudioStream  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FreeCursor . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FreeFormat . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FreePalette  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FreeRW . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_FreeSurface  . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_FreeWAV  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_BindTexture . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_CreateContext . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_DeleteContext . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_ExtensionSupported  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_GetAttribute  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_GetCurrentContext . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_GetCurrentWindow  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_GetDrawableSize . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_GetProcAddress  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_GetSwapInterval . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_LoadLibrary . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_MakeCurrent . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_ResetAttributes . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_SetAttribute  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_SetSwapInterval . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_SwapWindow  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_UnbindTexture . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GL_UnloadLibrary . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetAudioDeviceName . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetAudioDeviceStatus . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetAudioDriver . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetAudioStatus . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetClipRect  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetClosestDisplayMode  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetColorKey  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetCurrentAudioDriver  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetCurrentDisplayMode  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetCurrentVideoDriver  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetCursor  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetDefaultCursor . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetDesktopDisplayMode  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetDisplayBounds . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetDisplayDPI  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetDisplayMode . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetDisplayName . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetDisplayOrientation  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetDisplayUsableBounds . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetError . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetEventFilter . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetGlobalMouseState  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetGrabbedWindow . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetKeyFromName . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetKeyFromScancode . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetKeyName . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetKeyboardFocus . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetKeyboardState . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetModState  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetMouseFocus  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetMouseState  . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_GetNumAudioDevices . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetNumAudioDrivers . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetNumDisplayModes . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetNumRenderDrivers  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetNumVideoDisplays  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetNumVideoDrivers . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetPerformanceCounter  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetPerformanceFrequency  . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetPixelFormatName . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetQueuedAudioSize . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRGB . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRGBA  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRelativeMouseMode . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRelativeMouseState  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRenderDrawBlendMode . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRenderDrawColor . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRenderDriverInfo  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRenderTarget  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRenderer  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRendererInfo  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetRendererOutputSize  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetScancodeFromKey . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetScancodeFromName  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetScancodeName  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetSurfaceAlphaMod . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetSurfaceBlendMode  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetSurfaceColorMod . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetTextureAlphaMod . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetTextureBlendMode  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetTextureColorMod . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetTextureScaleMode  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetTicks . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetVideoDriver . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowBordersSize . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowBrightness  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowData  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowDisplayIndex  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowDisplayMode . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowFlags . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowFromID  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowGammaRamp . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowGrab  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowID  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowMaximumSize . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowMinimumSize . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowOpacity . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowPixelFormat . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowPosition  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowSize  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowSurface . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetWindowTitle . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetYUVConversionMode . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_GetYUVConversionModeForResolution         P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_HasColorKey  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_HasEvent . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_HasEvents  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_HasIntersection  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_HasScreenKeyboardSupport . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_HideWindow . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_Init . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_InitSubSystem  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_IntersectRect  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_IntersectRectAndLine . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_IsScreenKeyboardShown  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_IsScreenSaverEnabled . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_IsTextInputActive  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LoadBMP_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LoadFile . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LoadFile_RW  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LoadWAV_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LockAudio  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LockAudioDevice  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LockSurface  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LockTexture  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LockTextureToSurface . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LowerBlit  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_LowerBlitScaled  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_MapRGB . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_MapRGBA  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_MasksToPixelFormatEnum . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_MaximizeWindow . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_MinimizeWindow . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_MixAudio . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_MixAudioFormat . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_NewAudioStream . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_OpenAudio  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_OpenAudioDevice  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_PauseAudio . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_PauseAudioDevice . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_PeepEvents . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_PixelFormatEnumToMasks . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_PollEvent  . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_PumpEvents . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_PushEvent  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_QueryTexture . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_QueueAudio . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_Quit . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_QuitSubSystem  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWFromConstMem . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWFromFP . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWFromFile . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_RWFromMem  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWclose  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWread . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWseek . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWsize . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWtell . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RWwrite  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RaiseWindow  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ReadBE16 . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ReadBE32 . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ReadBE64 . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ReadLE16 . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ReadLE32 . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ReadLE64 . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ReadU8 . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RegisterEvents . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RemoveTimer  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderClear  . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_RenderCopy . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderCopyEx . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_RenderCopyExF  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderCopyF  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawLine . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawLineF  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawLines  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawLinesF . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawPoint  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawPointF . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawPoints . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawPointsF  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawRect . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawRectF  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawRects  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderDrawRectsF . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderFillRect . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderFillRectF  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderFillRects  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderFillRectsF . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderFlush  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderGetClipRect  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderGetIntegerScale  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderGetLogicalSize . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderGetMetalCommandEncoder         P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderGetMetalLayer  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderGetScale . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderGetViewport  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderIsClipEnabled  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderPresent  . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_RenderReadPixels . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderSetClipRect  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderSetIntegerScale  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderSetLogicalSize . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderSetScale . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderSetViewport  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RenderTargetSupported  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_RestoreWindow  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SaveBMP_RW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetClipRect  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetColorKey  . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_SetCursor  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetError . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetEventFilter . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetModState  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetPaletteColors . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetPixelFormatPalette  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetRelativeMouseMode . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetRenderDrawBlendMode . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetRenderDrawColor . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_SetRenderTarget  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetSurfaceAlphaMod . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetSurfaceBlendMode  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetSurfaceColorMod . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetSurfacePalette  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetSurfaceRLE  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetTextInputRect . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetTextureAlphaMod . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_SetTextureBlendMode  . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_SetTextureColorMod . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
SDL_SetTextureScaleMode  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowBordered  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowBrightness  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowData  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowDisplayMode . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowFullscreen  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowGammaRamp . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowGrab  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowHitTest . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowIcon  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowInputFocus  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowMaximumSize . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowMinimumSize . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowModalFor  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowOpacity . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowPosition  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowResizable . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowSize  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetWindowTitle . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SetYUVConversionMode . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ShowCursor . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_ShowWindow . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_SoftStretch  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_StartTextInput . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_StopTextInput  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UnionRect  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UnlockAudio  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UnlockAudioDevice  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UnlockSurface  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UnlockTexture  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UpdateTexture  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UpdateWindowSurface  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UpdateWindowSurfaceRects . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UpdateYUVTexture . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UpperBlit  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_UpperBlitScaled  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_VideoInit  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_VideoQuit  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WaitEvent  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WaitEventTimeout . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WarpMouseGlobal  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WarpMouseInWindow  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WasInit  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WriteBE16  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WriteBE32  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WriteBE64  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WriteLE16  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WriteLE32  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WriteLE64  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
SDL_WriteU8  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
Shutdown . . . . . . . . . . . .        P Near   00000736 _TEXT    00000078 Public   FASTCALL
TTF_ByteSwappedUNICODE . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_CloseFont  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_FontAscent . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_FontDescent  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_FontFaceFamilyName . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_FontFaceIsFixedWidth . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_FontFaceStyleName  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_FontFaces  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_FontHeight . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_FontLineSkip . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_GetFontHinting . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_GetFontKerning . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_GetFontKerningSize . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_GetFontKerningSizeGlyphs . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_GetFontOutline . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_GetFontStyle . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_GlyphIsProvided  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_GlyphMetrics . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_Init . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
TTF_Linked_Version . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_OpenFont . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_OpenFontIndex  . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_OpenFontIndexRW  . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_OpenFontRW . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_Quit . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
TTF_RenderGlyph_Blended  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderGlyph_Shaded . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderGlyph_Solid  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderText_Blended . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderText_Blended_Wrapped .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderText_Shaded  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderText_Solid . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
TTF_RenderUNICODE_Blended  . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderUNICODE_Blended_Wrapped         P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderUNICODE_Shaded . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderUNICODE_Solid  . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderUTF8_Blended . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderUTF8_Blended_Wrapped .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderUTF8_Shaded  . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_RenderUTF8_Solid . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_SetFontHinting . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_SetFontKerning . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_SetFontOutline . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_SetFontStyle . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_SizeText . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_SizeUNICODE  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_SizeUTF8 . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TTF_WasInit  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TestFunction . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
TestFunction2  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
WriteConsoleA  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
freeTexture  . . . . . . . . . .        P Near   00000022 _TEXT    0000003A Public   FASTCALL
  pTexture . . . . . . . . . . .        QWord             rsp + 0030
  @C0001 . . . . . . . . . . . .        L Near   00000056 _TEXT
initTexture  . . . . . . . . . .        P Near   00000000 _TEXT    00000022 Public   FASTCALL
  pTexture . . . . . . . . . . .        QWord             rsp + 0010
loadTextureFromFile  . . . . . .        P Near   00000115 _TEXT    000000CB Public   FASTCALL
  pathToTexture  . . . . . . . .        QWord             rsp + 0040
  pTexture . . . . . . . . . . .        QWord             rsp + 0038
  gRenderer  . . . . . . . . . .        QWord             rsp + 0030
  bSuccess . . . . . . . . . . .        Byte              rsp + 0020
  loadedSurface  . . . . . . . .        QWord             rsp + 0028
  newTexture . . . . . . . . . .        QWord             rsp + 0030
  @C0004 . . . . . . . . . . . .        L Near   000001A4 _TEXT
  @C0003 . . . . . . . . . . . .        L Near   00000161 _TEXT
  ERROR  . . . . . . . . . . . .        L Near   000001D1 _TEXT
loadTextureFromRenderedText  . .        P Near   0000026C _TEXT    00000085 Public   FASTCALL
  textColor  . . . . . . . . . .        SDL_Color         rsp + 0050
  pTextureText . . . . . . . . .        Near              rsp + 0048
  pFont  . . . . . . . . . . . .        Near              rsp + 0040
  pTexture . . . . . . . . . . .        Near              rsp + 0038
  pRenderer  . . . . . . . . . .        Near              rsp + 0030
  textSurface  . . . . . . . . .        QWord             rsp + 0020
  @C0005 . . . . . . . . . . . .        L Near   000002A9 _TEXT
  EXIT . . . . . . . . . . . . .        L Near   000002EC _TEXT
  @C0006 . . . . . . . . . . . .        L Near   000002C2 _TEXT
main . . . . . . . . . . . . . .        P Near   00000457 _TEXT    000001EE Public   FASTCALL
  i  . . . . . . . . . . . . . .        DWord             rsp + 0040
  poll . . . . . . . . . . . . .        QWord             rsp + 0048
  @C0021 . . . . . . . . . . . .        L Near   00000527 _TEXT
  @C0020 . . . . . . . . . . . .        L Near   00000502 _TEXT
  @C0016 . . . . . . . . . . . .        L Near   0000046F _TEXT
  @C0027 . . . . . . . . . . . .        L Near   00000589 _TEXT
  @C001E . . . . . . . . . . . .        L Near   000004DA _TEXT
  @C0026 . . . . . . . . . . . .        L Near   00000584 _TEXT
  @C0025 . . . . . . . . . . . .        L Near   00000589 _TEXT
  @C0019 . . . . . . . . . . . .        L Near   0000048A _TEXT
  @C001C . . . . . . . . . . . .        L Near   00000599 _TEXT
  @C0028 . . . . . . . . . . . .        L Near   00000599 _TEXT
  @C0024 . . . . . . . . . . . .        L Near   00000572 _TEXT
  @C001D . . . . . . . . . . . .        L Near   00000599 _TEXT
  @C0017 . . . . . . . . . . . .        L Near   00000479 _TEXT
  @C0023 . . . . . . . . . . . .        L Near   0000058B _TEXT
  @C001A . . . . . . . . . . . .        L Near   000005A5 _TEXT
  @C001F . . . . . . . . . . . .        L Near   00000599 _TEXT
  @C001B . . . . . . . . . . . .        L Near   000004A2 _TEXT
  @C0022 . . . . . . . . . . . .        L Near   0000054C _TEXT
  @C0018 . . . . . . . . . . . .        L Near   0000061B _TEXT
renderTexture  . . . . . . . . .        P Near   0000005C _TEXT    000000B9 Public   FASTCALL
  flip . . . . . . . . . . . . .        DWord             rsp + 0088
  center . . . . . . . . . . . .        QWord             rsp + 0080
  angle  . . . . . . . . . . . .                          rsp + 0078
  clip . . . . . . . . . . . . .        Near              rsp + 0070
  y  . . . . . . . . . . . . . .        DWord             rsp + 0068
  x  . . . . . . . . . . . . . .        DWord             rsp + 0060
  pTexture . . . . . . . . . . .        QWord             rsp + 0058
  gRenderer  . . . . . . . . . .        QWord             rsp + 0050
  renderQuad . . . . . . . . . .        SDL_Rect          rsp + 0040
  @C0002 . . . . . . . . . . . .        L Near   000000C9 _TEXT
setTextureAlphaBlend . . . . . .        P Near   00000244 _TEXT    00000028 Public   FASTCALL
  alpha  . . . . . . . . . . . .        Byte              rsp + 0038
  pTexture . . . . . . . . . . .        QWord             rsp + 0030
setTextureBlendMode  . . . . . .        P Near   0000021C _TEXT    00000028 Public   FASTCALL
  blendingMode . . . . . . . . .        DWord             rsp + 0038
  pTexture . . . . . . . . . . .        QWord             rsp + 0030
setTextureColor  . . . . . . . .        P Near   000001E0 _TEXT    0000003C Public   FASTCALL
  blue . . . . . . . . . . . . .        Byte              rsp + 0048
  green  . . . . . . . . . . . .        Byte              rsp + 0040
  red  . . . . . . . . . . . . .        Byte              rsp + 0038
  pTexture . . . . . . . . . . .        QWord             rsp + 0030


Symbols:

                N a m e                 Type       Value     Attr

$xdatasym  . . . . . . . . . . .        L Near             0h .xdata FASTCALL
( SDL_WINDOWPOS_UNDEFINED_MASK  or  ( 0 ) )          Number             0h Undefined 
(LTexture PTR[rdi]).m_Texture  .        Number             0h Undefined 
(SDL_Surface PTR [rax]).format .        Number             0h Undefined 
-1 . . . . . . . . . . . . . . .        Number             0h Undefined 
0  . . . . . . . . . . . . . . .        Number             0h Undefined 
0FFh . . . . . . . . . . . . . .        Number             0h Undefined 
1  . . . . . . . . . . . . . . .        Number             0h Undefined 
2  . . . . . . . . . . . . . . .        Number             0h Undefined 
2048 . . . . . . . . . . . . . .        Number             0h Undefined 
44100  . . . . . . . . . . . . .        Number             0h Undefined 
@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@Interface . . . . . . . . . . .        Number             7h 
@Model . . . . . . . . . . . . .        Number             7h 
@ProcStatus  . . . . . . . . . .        Number             0h 
@ReservedStack . . . . . . . . .        Number             0h 
@StackBase . . . . . . . . . . .        Number             0h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   FLAT
@stack . . . . . . . . . . . . .        Text   FLAT
AUDIO_F32  . . . . . . . . . . .        Text   AUDIO_F32LSB
AUDIO_F32LSB . . . . . . . . . .        Number          8120h 
AUDIO_F32MSB . . . . . . . . . .        Number          9120h 
AUDIO_F32SYS . . . . . . . . . .        Text   AUDIO_F32LSB
AUDIO_S16  . . . . . . . . . . .        Text   AUDIO_S16LSB
AUDIO_S16LSB . . . . . . . . . .        Number          8010h 
AUDIO_S16MSB . . . . . . . . . .        Number          9010h 
AUDIO_S16SYS . . . . . . . . . .        Text   AUDIO_S16LSB
AUDIO_S32  . . . . . . . . . . .        Text   AUDIO_S32LSB
AUDIO_S32LSB . . . . . . . . . .        Number          8020h 
AUDIO_S32MSB . . . . . . . . . .        Number          9020h 
AUDIO_S32SYS . . . . . . . . . .        Text   AUDIO_S32LSB
AUDIO_S8 . . . . . . . . . . . .        Number          8008h 
AUDIO_U16  . . . . . . . . . . .        Text   AUDIO_U16LSB
AUDIO_U16LSB . . . . . . . . . .        Number            10h 
AUDIO_U16MSB . . . . . . . . . .        Number          1010h 
AUDIO_U16SYS . . . . . . . . . .        Text   AUDIO_U16LSB
AUDIO_U8 . . . . . . . . . . . .        Number             8h 
BUTTON_HEIGHT  . . . . . . . . .        Number            C8h 
BUTTON_SPRITE_MOUSE_DOWN . . . .        Number             2h 
BUTTON_SPRITE_MOUSE_OUT  . . . .        Number             0h 
BUTTON_SPRITE_MOUSE_OVER_MOTION         Number             1h 
BUTTON_SPRITE_MOUSE_UP . . . . .        Number             3h 
BUTTON_SPRITE_TOTAL  . . . . . .        Number             4h 
BUTTON_WIDTH . . . . . . . . . .        Number           12Ch 
EXIT_FAILURE . . . . . . . . . .        Number     -00000001h 
EXIT_SUCCESS . . . . . . . . . .        Number             0h 
FILE_ATTRS . . . . . . . . . . .        Byte[2]            Dh CONST FASTCALL
GENERIC_READ . . . . . . . . . .        Number      80000000h 
GENERIC_WRITE  . . . . . . . . .        Number      40000000h 
IMAGE_PROMPT . . . . . . . . . .        Byte[15]           Fh CONST FASTCALL
IMG_GetError . . . . . . . . . .        Text   SDL_GetError
IMG_INIT_JPG . . . . . . . . . .        Number             1h 
IMG_INIT_PNG . . . . . . . . . .        Number             2h 
IMG_INIT_TIF . . . . . . . . . .        Number             4h 
IMG_INIT_WEBP  . . . . . . . . .        Number             8h 
IMG_SetError . . . . . . . . . .        Text   SDL_SetError
KMOD_ALT . . . . . . . . . . . .        Number           300h 
KMOD_CAPS  . . . . . . . . . . .        Number          2000h 
KMOD_CTRL  . . . . . . . . . . .        Number            C0h 
KMOD_GUI . . . . . . . . . . . .        Number           C00h 
KMOD_LALT  . . . . . . . . . . .        Number           100h 
KMOD_LCTRL . . . . . . . . . . .        Number            40h 
KMOD_LGUI  . . . . . . . . . . .        Number           400h 
KMOD_LSHIFT  . . . . . . . . . .        Number             1h 
KMOD_MODE  . . . . . . . . . . .        Number          4000h 
KMOD_NONE  . . . . . . . . . . .        Number             0h 
KMOD_NUM . . . . . . . . . . . .        Number          1000h 
KMOD_RALT  . . . . . . . . . . .        Number           200h 
KMOD_RCTRL . . . . . . . . . . .        Number            80h 
KMOD_RESERVED  . . . . . . . . .        Number          8000h 
KMOD_RGUI  . . . . . . . . . . .        Number           800h 
KMOD_RSHIFT  . . . . . . . . . .        Number             2h 
KMOD_SHIFT . . . . . . . . . . .        Number             3h 
LButton_INC_ . . . . . . . . . .        Text   
LTexture_INC_  . . . . . . . . .        Text   
MIX_CHANNELS . . . . . . . . . .        Number             8h 
MIX_CHANNEL_POST . . . . . . . .        Number     -00000002h 
MIX_DEFAULT_CHANNELS . . . . . .        Number             2h 
MIX_DEFAULT_FORMAT . . . . . . .        Text   AUDIO_S16LSB
MIX_DEFAULT_FREQUENCY  . . . . .        Number          5622h 
MIX_EFFECTSMAXSPEED  . . . . . .        Text   "MIX_EFFECTSMAXSPEED"
MIX_FADING_IN  . . . . . . . . .        Number             2h 
MIX_FADING_OUT . . . . . . . . .        Number             1h 
MIX_INIT_FLAC  . . . . . . . . .        Number             1h 
MIX_INIT_MID . . . . . . . . . .        Number            20h 
MIX_INIT_MOD . . . . . . . . . .        Number             2h 
MIX_INIT_MP3 . . . . . . . . . .        Number             8h 
MIX_INIT_OGG . . . . . . . . . .        Number            10h 
MIX_INIT_OPUS  . . . . . . . . .        Number            40h 
MIX_MAJOR_VERSION  . . . . . . .        Text   SDL_MIXER_MAJOR_VERSION
MIX_MAX_VOLUME . . . . . . . . .        Text   SDL_MIX_MAXVOLUME
MIX_MINOR_VERSION  . . . . . . .        Text   SDL_MIXER_MINOR_VERSION
MIX_NO_FADING  . . . . . . . . .        Number             0h 
MIX_PATCHLEVEL . . . . . . . . .        Text   SDL_MIXER_PATCHLEVEL
MUSIC_BEAT . . . . . . . . . . .        Byte[13]          1Eh CONST FASTCALL
MUSIC_HIGH . . . . . . . . . . .        Byte[13]          3Bh CONST FASTCALL
MUSIC_LOW  . . . . . . . . . . .        Byte[12]          57h CONST FASTCALL
MUSIC_MEDIUM . . . . . . . . . .        Byte[15]          48h CONST FASTCALL
MUSIC_SCRATCH  . . . . . . . . .        Byte[16]          2Bh CONST FASTCALL
MUS_CMD  . . . . . . . . . . . .        Number             1h 
MUS_FLAC . . . . . . . . . . . .        Number             8h 
MUS_MID  . . . . . . . . . . . .        Number             4h 
MUS_MOD  . . . . . . . . . . . .        Number             3h 
MUS_MODPLUG_UNUSED . . . . . . .        Number             9h 
MUS_MP3  . . . . . . . . . . . .        Number             6h 
MUS_MP3_MAD_UNUSED . . . . . . .        Number             7h 
MUS_NONE . . . . . . . . . . . .        Number             0h 
MUS_OGG  . . . . . . . . . . . .        Number             5h 
MUS_OPUS . . . . . . . . . . . .        Number             Ah 
MUS_WAV  . . . . . . . . . . . .        Number             2h 
Mix_ClearError . . . . . . . . .        Text   SDL_ClearError
Mix_GetError . . . . . . . . . .        Text   SDL_GetError
Mix_SetError . . . . . . . . . .        Text   SDL_SetError
RW_SEEK_CUR  . . . . . . . . . .        Number             1h 
RW_SEEK_END  . . . . . . . . . .        Number             2h 
RW_SEEK_SET  . . . . . . . . . .        Number             0h 
SCREEN_HEIGHT  . . . . . . . . .        Number           1E0h 
SCREEN_WIDTH . . . . . . . . . .        Number           280h 
SDLK_0 . . . . . . . . . . . . .        Number            30h 
SDLK_1 . . . . . . . . . . . . .        Number            31h 
SDLK_2 . . . . . . . . . . . . .        Number            32h 
SDLK_3 . . . . . . . . . . . . .        Number            33h 
SDLK_4 . . . . . . . . . . . . .        Number            34h 
SDLK_5 . . . . . . . . . . . . .        Number            35h 
SDLK_6 . . . . . . . . . . . . .        Number            36h 
SDLK_7 . . . . . . . . . . . . .        Number            37h 
SDLK_8 . . . . . . . . . . . . .        Number            38h 
SDLK_9 . . . . . . . . . . . . .        Number            39h 
SDLK_AC_BACK . . . . . . . . . .        Number      4000010Eh 
SDLK_AC_BOOKMARKS  . . . . . . .        Number      40000112h 
SDLK_AC_FORWARD  . . . . . . . .        Number      4000010Fh 
SDLK_AC_HOME . . . . . . . . . .        Number      4000010Dh 
SDLK_AC_REFRESH  . . . . . . . .        Number      40000111h 
SDLK_AC_SEARCH . . . . . . . . .        Number      4000010Ch 
SDLK_AC_STOP . . . . . . . . . .        Number      40000110h 
SDLK_AGAIN . . . . . . . . . . .        Number      40000079h 
SDLK_ALTERASE  . . . . . . . . .        Number      40000099h 
SDLK_AMPERSAND . . . . . . . . .        Number            26h 
SDLK_APP1  . . . . . . . . . . .        Number      4000011Bh 
SDLK_APP2  . . . . . . . . . . .        Number      4000011Ch 
SDLK_APPLICATION . . . . . . . .        Number      40000065h 
SDLK_ASTERISK  . . . . . . . . .        Number            2Ah 
SDLK_AT  . . . . . . . . . . . .        Number            40h 
SDLK_AUDIOFASTFORWARD  . . . . .        Number      4000011Eh 
SDLK_AUDIOMUTE . . . . . . . . .        Number      40000106h 
SDLK_AUDIONEXT . . . . . . . . .        Number      40000102h 
SDLK_AUDIOPLAY . . . . . . . . .        Number      40000105h 
SDLK_AUDIOPREV . . . . . . . . .        Number      40000103h 
SDLK_AUDIOREWIND . . . . . . . .        Number      4000011Dh 
SDLK_AUDIOSTOP . . . . . . . . .        Number      40000104h 
SDLK_BACKQUOTE . . . . . . . . .        Number            60h 
SDLK_BACKSPACE . . . . . . . . .        Number          5C62h 
SDLK_BRIGHTNESSDOWN  . . . . . .        Number      40000113h 
SDLK_BRIGHTNESSUP  . . . . . . .        Number      40000114h 
SDLK_CALCULATOR  . . . . . . . .        Number      4000010Ah 
SDLK_CANCEL  . . . . . . . . . .        Number      4000009Bh 
SDLK_CAPSLOCK  . . . . . . . . .        Number      40000039h 
SDLK_CARET . . . . . . . . . . .        Number            5Eh 
SDLK_CLEAR . . . . . . . . . . .        Number      4000009Ch 
SDLK_CLEARAGAIN  . . . . . . . .        Number      400000A2h 
SDLK_COLON . . . . . . . . . . .        Number            3Ah 
SDLK_COMMA . . . . . . . . . . .        Number            2Ch 
SDLK_COMPUTER  . . . . . . . . .        Number      4000010Bh 
SDLK_COPY  . . . . . . . . . . .        Number      4000007Ch 
SDLK_CRSEL . . . . . . . . . . .        Number      400000A3h 
SDLK_CURRENCYSUBUNIT . . . . . .        Number      400000B5h 
SDLK_CURRENCYUNIT  . . . . . . .        Number      400000B4h 
SDLK_CUT . . . . . . . . . . . .        Number      4000007Bh 
SDLK_DECIMALSEPARATOR  . . . . .        Number      400000B3h 
SDLK_DELETE  . . . . . . . . . .        Number      5C313737h 
SDLK_DISPLAYSWITCH . . . . . . .        Number      40000115h 
SDLK_DOLLAR  . . . . . . . . . .        Number            24h 
SDLK_DOWN  . . . . . . . . . . .        Number      40000051h 
SDLK_EJECT . . . . . . . . . . .        Number      40000119h 
SDLK_END . . . . . . . . . . . .        Number      4000004Dh 
SDLK_EQUALS  . . . . . . . . . .        Number            3Dh 
SDLK_ESCAPE  . . . . . . . . . .        Number      5C303333h 
SDLK_EXCLAIM . . . . . . . . . .        Number            21h 
SDLK_EXECUTE . . . . . . . . . .        Number      40000074h 
SDLK_EXSEL . . . . . . . . . . .        Number      400000A4h 
SDLK_F1  . . . . . . . . . . . .        Number      4000003Ah 
SDLK_F10 . . . . . . . . . . . .        Number      40000043h 
SDLK_F11 . . . . . . . . . . . .        Number      40000044h 
SDLK_F12 . . . . . . . . . . . .        Number      40000045h 
SDLK_F13 . . . . . . . . . . . .        Number      40000068h 
SDLK_F14 . . . . . . . . . . . .        Number      40000069h 
SDLK_F15 . . . . . . . . . . . .        Number      4000006Ah 
SDLK_F16 . . . . . . . . . . . .        Number      4000006Bh 
SDLK_F17 . . . . . . . . . . . .        Number      4000006Ch 
SDLK_F18 . . . . . . . . . . . .        Number      4000006Dh 
SDLK_F19 . . . . . . . . . . . .        Number      4000006Eh 
SDLK_F2  . . . . . . . . . . . .        Number      4000003Bh 
SDLK_F20 . . . . . . . . . . . .        Number      4000006Fh 
SDLK_F21 . . . . . . . . . . . .        Number      40000070h 
SDLK_F22 . . . . . . . . . . . .        Number      40000071h 
SDLK_F23 . . . . . . . . . . . .        Number      40000072h 
SDLK_F24 . . . . . . . . . . . .        Number      40000073h 
SDLK_F3  . . . . . . . . . . . .        Number      4000003Ch 
SDLK_F4  . . . . . . . . . . . .        Number      4000003Dh 
SDLK_F5  . . . . . . . . . . . .        Number      4000003Eh 
SDLK_F6  . . . . . . . . . . . .        Number      4000003Fh 
SDLK_F7  . . . . . . . . . . . .        Number      40000040h 
SDLK_F8  . . . . . . . . . . . .        Number      40000041h 
SDLK_F9  . . . . . . . . . . . .        Number      40000042h 
SDLK_FIND  . . . . . . . . . . .        Number      4000007Eh 
SDLK_GREATER . . . . . . . . . .        Number            3Eh 
SDLK_HASH  . . . . . . . . . . .        Number            23h 
SDLK_HELP  . . . . . . . . . . .        Number      40000075h 
SDLK_HOME  . . . . . . . . . . .        Number      4000004Ah 
SDLK_INSERT  . . . . . . . . . .        Number      40000049h 
SDLK_KBDILLUMDOWN  . . . . . . .        Number      40000117h 
SDLK_KBDILLUMTOGGLE  . . . . . .        Number      40000116h 
SDLK_KBDILLUMUP  . . . . . . . .        Number      40000118h 
SDLK_KP_0  . . . . . . . . . . .        Number      40000062h 
SDLK_KP_00 . . . . . . . . . . .        Number      400000B0h 
SDLK_KP_000  . . . . . . . . . .        Number      400000B1h 
SDLK_KP_1  . . . . . . . . . . .        Number      40000059h 
SDLK_KP_2  . . . . . . . . . . .        Number      4000005Ah 
SDLK_KP_3  . . . . . . . . . . .        Number      4000005Bh 
SDLK_KP_4  . . . . . . . . . . .        Number      4000005Ch 
SDLK_KP_5  . . . . . . . . . . .        Number      4000005Dh 
SDLK_KP_6  . . . . . . . . . . .        Number      4000005Eh 
SDLK_KP_7  . . . . . . . . . . .        Number      4000005Fh 
SDLK_KP_8  . . . . . . . . . . .        Number      40000060h 
SDLK_KP_9  . . . . . . . . . . .        Number      40000061h 
SDLK_KP_A  . . . . . . . . . . .        Number      400000BCh 
SDLK_KP_AMPERSAND  . . . . . . .        Number      400000C7h 
SDLK_KP_AT . . . . . . . . . . .        Number      400000CEh 
SDLK_KP_B  . . . . . . . . . . .        Number      400000BDh 
SDLK_KP_BACKSPACE  . . . . . . .        Number      400000BBh 
SDLK_KP_BINARY . . . . . . . . .        Number      400000DAh 
SDLK_KP_C  . . . . . . . . . . .        Number      400000BEh 
SDLK_KP_CLEAR  . . . . . . . . .        Number      400000D8h 
SDLK_KP_CLEARENTRY . . . . . . .        Number      400000D9h 
SDLK_KP_COLON  . . . . . . . . .        Number      400000CBh 
SDLK_KP_COMMA  . . . . . . . . .        Number      40000085h 
SDLK_KP_D  . . . . . . . . . . .        Number      400000BFh 
SDLK_KP_DBLAMPERSAND . . . . . .        Number      400000C8h 
SDLK_KP_DBLVERTICALBAR . . . . .        Number      400000CAh 
SDLK_KP_DECIMAL  . . . . . . . .        Number      400000DCh 
SDLK_KP_DIVIDE . . . . . . . . .        Number      40000054h 
SDLK_KP_E  . . . . . . . . . . .        Number      400000C0h 
SDLK_KP_ENTER  . . . . . . . . .        Number      40000058h 
SDLK_KP_EQUALS . . . . . . . . .        Number      40000067h 
SDLK_KP_EQUALSAS400  . . . . . .        Number      40000086h 
SDLK_KP_EXCLAM . . . . . . . . .        Number      400000CFh 
SDLK_KP_F  . . . . . . . . . . .        Number      400000C1h 
SDLK_KP_GREATER  . . . . . . . .        Number      400000C6h 
SDLK_KP_HASH . . . . . . . . . .        Number      400000CCh 
SDLK_KP_HEXADECIMAL  . . . . . .        Number      400000DDh 
SDLK_KP_LEFTBRACE  . . . . . . .        Number      400000B8h 
SDLK_KP_LEFTPAREN  . . . . . . .        Number      400000B6h 
SDLK_KP_LESS . . . . . . . . . .        Number      400000C5h 
SDLK_KP_MEMADD . . . . . . . . .        Number      400000D3h 
SDLK_KP_MEMCLEAR . . . . . . . .        Number      400000D2h 
SDLK_KP_MEMDIVIDE  . . . . . . .        Number      400000D6h 
SDLK_KP_MEMMULTIPLY  . . . . . .        Number      400000D5h 
SDLK_KP_MEMRECALL  . . . . . . .        Number      400000D1h 
SDLK_KP_MEMSTORE . . . . . . . .        Number      400000D0h 
SDLK_KP_MEMSUBTRACT  . . . . . .        Number      400000D4h 
SDLK_KP_MINUS  . . . . . . . . .        Number      40000056h 
SDLK_KP_MULTIPLY . . . . . . . .        Number      40000055h 
SDLK_KP_OCTAL  . . . . . . . . .        Number      400000DBh 
SDLK_KP_PERCENT  . . . . . . . .        Number      400000C4h 
SDLK_KP_PERIOD . . . . . . . . .        Number      40000063h 
SDLK_KP_PLUS . . . . . . . . . .        Number      40000057h 
SDLK_KP_PLUSMINUS  . . . . . . .        Number      400000D7h 
SDLK_KP_POWER  . . . . . . . . .        Number      400000C3h 
SDLK_KP_RIGHTBRACE . . . . . . .        Number      400000B9h 
SDLK_KP_RIGHTPAREN . . . . . . .        Number      400000B7h 
SDLK_KP_SPACE  . . . . . . . . .        Number      400000CDh 
SDLK_KP_TAB  . . . . . . . . . .        Number      400000BAh 
SDLK_KP_VERTICALBAR  . . . . . .        Number      400000C9h 
SDLK_KP_XOR  . . . . . . . . . .        Number      400000C2h 
SDLK_LALT  . . . . . . . . . . .        Number      400000E2h 
SDLK_LCTRL . . . . . . . . . . .        Number      400000E0h 
SDLK_LEFT  . . . . . . . . . . .        Number      40000050h 
SDLK_LEFTBRACKET . . . . . . . .        Number            20h 
SDLK_LEFTPAREN . . . . . . . . .        Number            28h 
SDLK_LESS  . . . . . . . . . . .        Number            3Ch 
SDLK_LGUI  . . . . . . . . . . .        Number      400000E3h 
SDLK_LSHIFT  . . . . . . . . . .        Number      400000E1h 
SDLK_MAIL  . . . . . . . . . . .        Number      40000109h 
SDLK_MEDIASELECT . . . . . . . .        Number      40000107h 
SDLK_MENU  . . . . . . . . . . .        Number      40000076h 
SDLK_MINUS . . . . . . . . . . .        Number            2Dh 
SDLK_MODE  . . . . . . . . . . .        Number      40000101h 
SDLK_MUTE  . . . . . . . . . . .        Number      4000007Fh 
SDLK_NUMLOCKCLEAR  . . . . . . .        Number      40000053h 
SDLK_OPER  . . . . . . . . . . .        Number      400000A1h 
SDLK_OUT . . . . . . . . . . . .        Number      400000A0h 
SDLK_PAGEDOWN  . . . . . . . . .        Number      4000004Eh 
SDLK_PAGEUP  . . . . . . . . . .        Number      4000004Bh 
SDLK_PASTE . . . . . . . . . . .        Number      4000007Dh 
SDLK_PAUSE . . . . . . . . . . .        Number      40000048h 
SDLK_PERCENT . . . . . . . . . .        Number            25h 
SDLK_PERIOD  . . . . . . . . . .        Number            2Eh 
SDLK_PLUS  . . . . . . . . . . .        Number            2Bh 
SDLK_POWER . . . . . . . . . . .        Number      40000066h 
SDLK_PRINTSCREEN . . . . . . . .        Number      40000046h 
SDLK_PRIOR . . . . . . . . . . .        Number      4000009Dh 
SDLK_QUESTION  . . . . . . . . .        Number            3Fh 
SDLK_QUOTEDBL  . . . . . . . . .        Number            22h 
SDLK_RALT  . . . . . . . . . . .        Number      400000E6h 
SDLK_RCTRL . . . . . . . . . . .        Number      400000E4h 
SDLK_RETURN  . . . . . . . . . .        Number          5C72h 
SDLK_RETURN2 . . . . . . . . . .        Number      4000009Eh 
SDLK_RGUI  . . . . . . . . . . .        Number      400000E7h 
SDLK_RIGHT . . . . . . . . . . .        Number      4000004Fh 
SDLK_RIGHTPAREN  . . . . . . . .        Number            29h 
SDLK_RSHIFT  . . . . . . . . . .        Number      400000E5h 
SDLK_SCANCODE_MASK . . . . . . .        Number      40000000h 
SDLK_SCROLLLOCK  . . . . . . . .        Number      40000047h 
SDLK_SELECT  . . . . . . . . . .        Number      40000077h 
SDLK_SEMICOLON . . . . . . . . .        Number            3Bh 
SDLK_SEPARATOR . . . . . . . . .        Number      4000009Fh 
SDLK_SLASH . . . . . . . . . . .        Number            2Fh 
SDLK_SLEEP . . . . . . . . . . .        Number      4000011Ah 
SDLK_SPACE . . . . . . . . . . .        Number            20h 
SDLK_STOP  . . . . . . . . . . .        Number      40000078h 
SDLK_SYSREQ  . . . . . . . . . .        Number      4000009Ah 
SDLK_TAB . . . . . . . . . . . .        Number          5C74h 
SDLK_THOUSANDSSEPARATOR  . . . .        Number      400000B2h 
SDLK_UNDERSCORE  . . . . . . . .        Number            5Fh 
SDLK_UNDO  . . . . . . . . . . .        Number      4000007Ah 
SDLK_UNKNOWN . . . . . . . . . .        Number             0h 
SDLK_UP  . . . . . . . . . . . .        Number      40000052h 
SDLK_VOLUMEDOWN  . . . . . . . .        Number      40000081h 
SDLK_VOLUMEUP  . . . . . . . . .        Number      40000080h 
SDLK_WWW . . . . . . . . . . . .        Number      40000108h 
SDLK_a . . . . . . . . . . . . .        Number            61h 
SDLK_b . . . . . . . . . . . . .        Number            62h 
SDLK_c . . . . . . . . . . . . .        Number            63h 
SDLK_d . . . . . . . . . . . . .        Number            64h 
SDLK_e . . . . . . . . . . . . .        Number            65h 
SDLK_f . . . . . . . . . . . . .        Number            66h 
SDLK_g . . . . . . . . . . . . .        Number            67h 
SDLK_h . . . . . . . . . . . . .        Number            68h 
SDLK_i . . . . . . . . . . . . .        Number            69h 
SDLK_j . . . . . . . . . . . . .        Number            6Ah 
SDLK_k . . . . . . . . . . . . .        Number            6Bh 
SDLK_l . . . . . . . . . . . . .        Number            6Ch 
SDLK_m . . . . . . . . . . . . .        Number            6Dh 
SDLK_n . . . . . . . . . . . . .        Number            6Eh 
SDLK_o . . . . . . . . . . . . .        Number            6Fh 
SDLK_p . . . . . . . . . . . . .        Number            70h 
SDLK_q . . . . . . . . . . . . .        Number            71h 
SDLK_r . . . . . . . . . . . . .        Number            72h 
SDLK_s . . . . . . . . . . . . .        Number            73h 
SDLK_t . . . . . . . . . . . . .        Number            74h 
SDLK_u . . . . . . . . . . . . .        Number            75h 
SDLK_v . . . . . . . . . . . . .        Number            76h 
SDLK_w . . . . . . . . . . . . .        Number            77h 
SDLK_x . . . . . . . . . . . . .        Number            78h 
SDLK_y . . . . . . . . . . . . .        Number            79h 
SDLK_z . . . . . . . . . . . . .        Number            7Ah 
SDL_ADDEVENT . . . . . . . . . .        Number             0h 
SDL_ALPHA_OPAQUE . . . . . . . .        Number            FFh 
SDL_ALPHA_TRANSPARENT  . . . . .        Number             0h 
SDL_APP_DIDENTERBACKGROUND . . .        Number           104h 
SDL_APP_DIDENTERFOREGROUND . . .        Number           106h 
SDL_APP_LOWMEMORY  . . . . . . .        Number           102h 
SDL_APP_TERMINATING  . . . . . .        Number           101h 
SDL_APP_WILLENTERBACKGROUND  . .        Number           103h 
SDL_APP_WILLENTERFOREGROUND  . .        Number           105h 
SDL_ARRAYORDER_ABGR  . . . . . .        Number             6h 
SDL_ARRAYORDER_ARGB  . . . . . .        Number             3h 
SDL_ARRAYORDER_BGR . . . . . . .        Number             4h 
SDL_ARRAYORDER_BGRA  . . . . . .        Number             5h 
SDL_ARRAYORDER_NONE  . . . . . .        Number             0h 
SDL_ARRAYORDER_RGB . . . . . . .        Number             1h 
SDL_ARRAYORDER_RGBA  . . . . . .        Number             2h 
SDL_AUDIOCVT_MAX_FILTERS . . . .        Number             9h 
SDL_AUDIODEVICEADDED . . . . . .        Number          1100h 
SDL_AUDIODEVICEREMOVED . . . . .        Number          1101h 
SDL_AUDIO_ALLOW_ANY_CHANGE . . .        Number             Fh 
SDL_AUDIO_ALLOW_CHANNELS_CHANGE         Number             4h 
SDL_AUDIO_ALLOW_FORMAT_CHANGE  .        Number             2h 
SDL_AUDIO_ALLOW_FREQUENCY_CHANGE         Number             1h 
SDL_AUDIO_ALLOW_SAMPLES_CHANGE .        Number             8h 
SDL_AUDIO_MASK_BITSIZE . . . . .        Number            FFh 
SDL_AUDIO_MASK_DATATYPE  . . . .        Number           100h 
SDL_AUDIO_MASK_ENDIAN  . . . . .        Number          1000h 
SDL_AUDIO_MASK_SIGNED  . . . . .        Number          8000h 
SDL_AUDIO_PAUSED . . . . . . . .        Number             2h 
SDL_AUDIO_PLAYING  . . . . . . .        Number             1h 
SDL_AUDIO_STOPPED  . . . . . . .        Number             0h 
SDL_BITMAPORDER_1234 . . . . . .        Number             2h 
SDL_BITMAPORDER_4321 . . . . . .        Number             1h 
SDL_BITMAPORDER_NONE . . . . . .        Number             0h 
SDL_BLENDFACTOR_DST_ALPHA  . . .        Number             9h 
SDL_BLENDFACTOR_DST_COLOR  . . .        Number             7h 
SDL_BLENDFACTOR_ONE  . . . . . .        Number             2h 
SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA         Number             Ah 
SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR         Number             8h 
SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA         Number             6h 
SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR         Number             4h 
SDL_BLENDFACTOR_SRC_ALPHA  . . .        Number             5h 
SDL_BLENDFACTOR_SRC_COLOR  . . .        Number             3h 
SDL_BLENDFACTOR_ZERO . . . . . .        Number             1h 
SDL_BLENDMODE_ADD  . . . . . . .        Number             2h 
SDL_BLENDMODE_BLEND  . . . . . .        Number             1h 
SDL_BLENDMODE_INVALID  . . . . .        Number      7FFFFFFFh 
SDL_BLENDMODE_MOD  . . . . . . .        Number             4h 
SDL_BLENDMODE_MUL  . . . . . . .        Number             8h 
SDL_BLENDMODE_NONE . . . . . . .        Number             0h 
SDL_BLENDOPERATION_ADD . . . . .        Number             1h 
SDL_BLENDOPERATION_MAXIMUM . . .        Number             5h 
SDL_BLENDOPERATION_MINIMUM . . .        Number             4h 
SDL_BLENDOPERATION_REV_SUBTRACT         Number             3h 
SDL_BLENDOPERATION_SUBTRACT  . .        Number             2h 
SDL_BUTTON_LEFT  . . . . . . . .        Number             1h 
SDL_BUTTON_LMASK . . . . . . . .        Text   SDL_BUTTON ( SDL_BUTTON_LEFT )
SDL_BUTTON_MIDDLE  . . . . . . .        Number             2h 
SDL_BUTTON_MMASK . . . . . . . .        Text   SDL_BUTTON ( SDL_BUTTON_MIDDLE )
SDL_BUTTON_RIGHT . . . . . . . .        Number             3h 
SDL_BUTTON_RMASK . . . . . . . .        Text   SDL_BUTTON ( SDL_BUTTON_RIGHT )
SDL_BUTTON_X1  . . . . . . . . .        Number             4h 
SDL_BUTTON_X1MASK  . . . . . . .        Text   SDL_BUTTON ( SDL_BUTTON_X1 )
SDL_BUTTON_X2  . . . . . . . . .        Number             5h 
SDL_BUTTON_X2MASK  . . . . . . .        Text   SDL_BUTTON ( SDL_BUTTON_X2 )
SDL_BlitScaled . . . . . . . . .        Text   SDL_UpperBlitScaled
SDL_BlitSurface  . . . . . . . .        Text   SDL_UpperBlit
SDL_CLIPBOARDUPDATE  . . . . . .        Number           900h 
SDL_CONTROLLERAXISMOTION . . . .        Number           650h 
SDL_CONTROLLERBUTTONDOWN . . . .        Number           651h 
SDL_CONTROLLERBUTTONUP . . . . .        Number           652h 
SDL_CONTROLLERDEVICEADDED  . . .        Number           653h 
SDL_CONTROLLERDEVICEREMAPPED . .        Number           655h 
SDL_CONTROLLERDEVICEREMOVED  . .        Number           654h 
SDL_Colour . . . . . . . . . . .        Text   SDL_Color
SDL_DEPRECATED . . . . . . . . .        Text   
SDL_DISABLE  . . . . . . . . . .        Number             0h 
SDL_DISPLAYEVENT . . . . . . . .        Number           150h 
SDL_DISPLAYEVENT_NONE  . . . . .        Number             0h 
SDL_DISPLAYEVENT_ORIENTATION . .        Number             1h 
SDL_DOLLARGESTURE  . . . . . . .        Number           800h 
SDL_DOLLARRECORD . . . . . . . .        Number           801h 
SDL_DONTFREE . . . . . . . . . .        Number             4h 
SDL_DROPBEGIN  . . . . . . . . .        Number          1002h 
SDL_DROPCOMPLETE . . . . . . . .        Number          1003h 
SDL_DROPFILE . . . . . . . . . .        Number          1000h 
SDL_DROPTEXT . . . . . . . . . .        Number          1001h 
SDL_EFREAD . . . . . . . . . . .        Number             1h 
SDL_EFSEEK . . . . . . . . . . .        Number             3h 
SDL_EFWRITE  . . . . . . . . . .        Number             2h 
SDL_ENABLE . . . . . . . . . . .        Number             1h 
SDL_ENOMEM . . . . . . . . . . .        Number             0h 
SDL_EVENTQUIT  . . . . . . . . .        Number           100h 
SDL_FINGERDOWN . . . . . . . . .        Number           700h 
SDL_FINGERMOTION . . . . . . . .        Number           702h 
SDL_FINGERUP . . . . . . . . . .        Number           701h 
SDL_FIRSTEVENT . . . . . . . . .        Number             0h 
SDL_FLIP_HORIZONTAL  . . . . . .        Number             1h 
SDL_FLIP_NONE  . . . . . . . . .        Number             0h 
SDL_FLIP_VERTICAL  . . . . . . .        Number             2h 
SDL_GETEVENT . . . . . . . . . .        Number             2h 
SDL_GL_ACCELERATED_VISUAL  . . .        Number             Fh 
SDL_GL_ACCUM_ALPHA_SIZE  . . . .        Number             Bh 
SDL_GL_ACCUM_BLUE_SIZE . . . . .        Number             Ah 
SDL_GL_ACCUM_GREEN_SIZE  . . . .        Number             9h 
SDL_GL_ACCUM_RED_SIZE  . . . . .        Number             8h 
SDL_GL_ALPHA_SIZE  . . . . . . .        Number             3h 
SDL_GL_BLUE_SIZE . . . . . . . .        Number             2h 
SDL_GL_BUFFER_SIZE . . . . . . .        Number             4h 
SDL_GL_CONTEXT_DEBUG_FLAG  . . .        Number             1h 
SDL_GL_CONTEXT_EGL . . . . . . .        Number            13h 
SDL_GL_CONTEXT_FLAGS . . . . . .        Number            14h 
SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG         Number             2h 
SDL_GL_CONTEXT_MAJOR_VERSION . .        Number            11h 
SDL_GL_CONTEXT_MINOR_VERSION . .        Number            12h 
SDL_GL_CONTEXT_NO_ERROR  . . . .        Number            1Ah 
SDL_GL_CONTEXT_PROFILE_COMPATIBILITY         Number             2h 
SDL_GL_CONTEXT_PROFILE_CORE  . .        Number             1h 
SDL_GL_CONTEXT_PROFILE_ES  . . .        Number             4h 
SDL_GL_CONTEXT_PROFILE_MASK  . .        Number            15h 
SDL_GL_CONTEXT_RELEASE_BEHAVIOR         Number            18h 
SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH         Number             1h 
SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE         Number             0h 
SDL_GL_CONTEXT_RESET_ISOLATION_FLAG         Number             8h 
SDL_GL_CONTEXT_RESET_LOSE_CONTEXT         Number             1h 
SDL_GL_CONTEXT_RESET_NOTIFICATION         Number            19h 
SDL_GL_CONTEXT_RESET_NO_NOTIFICATION         Number             0h 
SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG         Number             4h 
SDL_GL_DEPTH_SIZE  . . . . . . .        Number             6h 
SDL_GL_DOUBLEBUFFER  . . . . . .        Number             5h 
SDL_GL_FRAMEBUFFER_SRGB_CAPABLE         Number            17h 
SDL_GL_GREEN_SIZE  . . . . . . .        Number             1h 
SDL_GL_MULTISAMPLEBUFFERS  . . .        Number             Dh 
SDL_GL_MULTISAMPLESAMPLES  . . .        Number             Eh 
SDL_GL_RED_SIZE  . . . . . . . .        Number             0h 
SDL_GL_RETAINED_BACKING  . . . .        Number            10h 
SDL_GL_SHARE_WITH_CURRENT_CONTEXT         Number            16h 
SDL_GL_STENCIL_SIZE  . . . . . .        Number             7h 
SDL_GL_STEREO  . . . . . . . . .        Number             Ch 
SDL_HITTEST_DRAGGABLE  . . . . .        Number             1h 
SDL_HITTEST_NORMAL . . . . . . .        Number             0h 
SDL_HITTEST_RESIZE_BOTTOM  . . .        Number             7h 
SDL_HITTEST_RESIZE_BOTTOMLEFT  .        Number             8h 
SDL_HITTEST_RESIZE_BOTTOMRIGHT .        Number             6h 
SDL_HITTEST_RESIZE_LEFT  . . . .        Number             9h 
SDL_HITTEST_RESIZE_RIGHT . . . .        Number             5h 
SDL_HITTEST_RESIZE_TOP . . . . .        Number             3h 
SDL_HITTEST_RESIZE_TOPLEFT . . .        Number             2h 
SDL_HITTEST_RESIZE_TOPRIGHT  . .        Number             4h 
SDL_IGNORE . . . . . . . . . . .        Number             0h 
SDL_IMAGE_COMPILEDVERSION  . . .        Text   SDL_VERSIONNUM ( SDL_IMAGE_MAJOR_VERSION , SDL_IMAGE_MINOR_VERSION , SDL_IMAGE_PATCHLEVEL )
SDL_IMAGE_H_ . . . . . . . . . .        Text   
SDL_IMAGE_MAJOR_VERSION  . . . .        Number             2h 
SDL_IMAGE_MINOR_VERSION  . . . .        Number             0h 
SDL_IMAGE_PATCHLEVEL . . . . . .        Number             5h 
SDL_INIT_AUDIO . . . . . . . . .        Number            10h 
SDL_INIT_EVENTS  . . . . . . . .        Number          4000h 
SDL_INIT_EVERYTHING  . . . . . .        Number          F231h 
SDL_INIT_GAMECONTROLLER  . . . .        Number          2000h 
SDL_INIT_HAPTIC  . . . . . . . .        Number          1000h 
SDL_INIT_JOYSTICK  . . . . . . .        Number           200h 
SDL_INIT_NOPARACHUTE . . . . . .        Number        100000h 
SDL_INIT_SENSOR  . . . . . . . .        Number          8000h 
SDL_INIT_TIMER . . . . . . . . .        Number             1h 
SDL_INIT_VIDEO . . . . . . . . .        Number            20h 
SDL_INIT_VIDEO OR SDL_INIT_AUDIO          Number             0h Undefined 
SDL_JOYAXISMOTION  . . . . . . .        Number           600h 
SDL_JOYBALLMOTION  . . . . . . .        Number           601h 
SDL_JOYBUTTONDOWN  . . . . . . .        Number           603h 
SDL_JOYBUTTONUP  . . . . . . . .        Number           604h 
SDL_JOYDEVICEADDED . . . . . . .        Number           605h 
SDL_JOYDEVICEREMOVED . . . . . .        Number           606h 
SDL_JOYHATMOTION . . . . . . . .        Number           602h 
SDL_KEYDOWN  . . . . . . . . . .        Number           300h 
SDL_KEYMAPCHANGED  . . . . . . .        Number           304h 
SDL_KEYUP  . . . . . . . . . . .        Number           301h 
SDL_LASTERROR  . . . . . . . . .        Number             5h 
SDL_LASTEVENT  . . . . . . . . .        Number          FFFFh 
SDL_MIXER_COMPILEDVERSION  . . .        Text   SDL_VERSIONNUM ( SDL_MIXER_MAJOR_VERSION , SDL_MIXER_MINOR_VERSION , SDL_MIXER_PATCHLEVEL )
SDL_MIXER_H_ . . . . . . . . . .        Text   
SDL_MIXER_MAJOR_VERSION  . . . .        Number             2h 
SDL_MIXER_MINOR_VERSION  . . . .        Number             0h 
SDL_MIXER_PATCHLEVEL . . . . . .        Number             4h 
SDL_MIX_MAXVOLUME  . . . . . . .        Number            80h 
SDL_MOUSEBUTTONDOWN  . . . . . .        Number           401h 
SDL_MOUSEBUTTONUP  . . . . . . .        Number           402h 
SDL_MOUSEMOTION  . . . . . . . .        Number           400h 
SDL_MOUSEWHEEL . . . . . . . . .        Number           403h 
SDL_MOUSEWHEEL_FLIPPED . . . . .        Number             1h 
SDL_MOUSEWHEEL_NORMAL  . . . . .        Number             0h 
SDL_MULTIGESTURE . . . . . . . .        Number           802h 
SDL_NUM_SCANCODES  . . . . . . .        Number           200h 
SDL_NUM_SYSTEM_CURSORS . . . . .        Number             Ch 
SDL_ORIENTATION_LANDSCAPE  . . .        Number             1h 
SDL_ORIENTATION_LANDSCAPE_FLIPPED         Number             2h 
SDL_ORIENTATION_PORTRAIT . . . .        Number             3h 
SDL_ORIENTATION_PORTRAIT_FLIPPED         Number             4h 
SDL_ORIENTATION_UNKNOWN  . . . .        Number             0h 
SDL_PACKEDLAYOUT_1010102 . . . .        Number             8h 
SDL_PACKEDLAYOUT_1555  . . . . .        Number             3h 
SDL_PACKEDLAYOUT_2101010 . . . .        Number             7h 
SDL_PACKEDLAYOUT_332 . . . . . .        Number             1h 
SDL_PACKEDLAYOUT_4444  . . . . .        Number             2h 
SDL_PACKEDLAYOUT_5551  . . . . .        Number             4h 
SDL_PACKEDLAYOUT_565 . . . . . .        Number             5h 
SDL_PACKEDLAYOUT_8888  . . . . .        Number             6h 
SDL_PACKEDLAYOUT_NONE  . . . . .        Number             0h 
SDL_PACKEDORDER_ABGR . . . . . .        Number             7h 
SDL_PACKEDORDER_ARGB . . . . . .        Number             3h 
SDL_PACKEDORDER_BGRA . . . . . .        Number             8h 
SDL_PACKEDORDER_BGRX . . . . . .        Number             6h 
SDL_PACKEDORDER_NONE . . . . . .        Number             0h 
SDL_PACKEDORDER_RGBA . . . . . .        Number             4h 
SDL_PACKEDORDER_RGBX . . . . . .        Number             2h 
SDL_PACKEDORDER_XBGR . . . . . .        Number             5h 
SDL_PACKEDORDER_XRGB . . . . . .        Number             1h 
SDL_PEEKEVENT  . . . . . . . . .        Number             1h 
SDL_PIXELFORMAT_ABGR1555 . . . .        Number      15731002h 
SDL_PIXELFORMAT_ABGR32 . . . . .        Number      16462004h 
SDL_PIXELFORMAT_ABGR4444 . . . .        Number      15721002h 
SDL_PIXELFORMAT_ABGR8888 . . . .        Number      16762004h 
SDL_PIXELFORMAT_ARGB1555 . . . .        Number      15331002h 
SDL_PIXELFORMAT_ARGB2101010  . .        Number      16372004h 
SDL_PIXELFORMAT_ARGB32 . . . . .        Number      16862004h 
SDL_PIXELFORMAT_ARGB4444 . . . .        Number      15321002h 
SDL_PIXELFORMAT_ARGB8888 . . . .        Number      16362004h 
SDL_PIXELFORMAT_BGR24  . . . . .        Number      17401803h 
SDL_PIXELFORMAT_BGR444 . . . . .        Number      15520C02h 
SDL_PIXELFORMAT_BGR555 . . . . .        Number      15530F02h 
SDL_PIXELFORMAT_BGR565 . . . . .        Number      15551002h 
SDL_PIXELFORMAT_BGR888 . . . . .        Number      16561804h 
SDL_PIXELFORMAT_BGRA32 . . . . .        Number      16362004h 
SDL_PIXELFORMAT_BGRA4444 . . . .        Number      15821002h 
SDL_PIXELFORMAT_BGRA5551 . . . .        Number      15841002h 
SDL_PIXELFORMAT_BGRA8888 . . . .        Number      16862004h 
SDL_PIXELFORMAT_BGRX8888 . . . .        Number      16661804h 
SDL_PIXELFORMAT_INDEX1LSB  . . .        Number      11100100h 
SDL_PIXELFORMAT_INDEX1MSB  . . .        Number      11200100h 
SDL_PIXELFORMAT_INDEX4LSB  . . .        Number      12100400h 
SDL_PIXELFORMAT_INDEX4MSB  . . .        Number      12200400h 
SDL_PIXELFORMAT_INDEX8 . . . . .        Number      13000801h 
SDL_PIXELFORMAT_RGB24  . . . . .        Number      17101803h 
SDL_PIXELFORMAT_RGB332 . . . . .        Number      14110801h 
SDL_PIXELFORMAT_RGB444 . . . . .        Number      15120C02h 
SDL_PIXELFORMAT_RGB555 . . . . .        Number      15130F02h 
SDL_PIXELFORMAT_RGB565 . . . . .        Number      15151002h 
SDL_PIXELFORMAT_RGB888 . . . . .        Number      16161804h 
SDL_PIXELFORMAT_RGBA32 . . . . .        Number      16762004h 
SDL_PIXELFORMAT_RGBA4444 . . . .        Number      15421002h 
SDL_PIXELFORMAT_RGBA5551 . . . .        Number      15441002h 
SDL_PIXELFORMAT_RGBA8888 . . . .        Number      16462004h 
SDL_PIXELFORMAT_RGBX8888 . . . .        Number      16261804h 
SDL_PIXELFORMAT_UNKNOWN  . . . .        Number             0h 
SDL_PIXELTYPE_ARRAYF16 . . . . .        Number             Ah 
SDL_PIXELTYPE_ARRAYF32 . . . . .        Number             Bh 
SDL_PIXELTYPE_ARRAYU16 . . . . .        Number             8h 
SDL_PIXELTYPE_ARRAYU32 . . . . .        Number             9h 
SDL_PIXELTYPE_ARRAYU8  . . . . .        Number             7h 
SDL_PIXELTYPE_INDEX1 . . . . . .        Number             1h 
SDL_PIXELTYPE_INDEX4 . . . . . .        Number             2h 
SDL_PIXELTYPE_INDEX8 . . . . . .        Number             3h 
SDL_PIXELTYPE_PACKED16 . . . . .        Number             5h 
SDL_PIXELTYPE_PACKED32 . . . . .        Number             6h 
SDL_PIXELTYPE_PACKED8  . . . . .        Number             4h 
SDL_PIXELTYPE_UNKNOWN  . . . . .        Number             0h 
SDL_PREALLOC . . . . . . . . . .        Number             1h 
SDL_PRESSED  . . . . . . . . . .        Number             1h 
SDL_QUERY  . . . . . . . . . . .        Number     -00000001h 
SDL_RELEASED . . . . . . . . . .        Number             0h 
SDL_RENDERER_ACCELERATED . . . .        Number             2h 
SDL_RENDERER_ACCELERATED OR SDL_RENDERER_PRESENTVSYNC         Number             0h Undefined 
SDL_RENDERER_PRESENTVSYNC  . . .        Number             4h 
SDL_RENDERER_SOFTWARE  . . . . .        Number             1h 
SDL_RENDERER_TARGETTEXTURE . . .        Number             8h 
SDL_RENDER_DEVICE_RESET  . . . .        Number          2001h 
SDL_RENDER_TARGETS_RESET . . . .        Number          2000h 
SDL_RLEACCEL . . . . . . . . . .        Number             2h 
SDL_RWOPS_JNIFILE  . . . . . . .        Number             3h 
SDL_RWOPS_MEMORY . . . . . . . .        Number             4h 
SDL_RWOPS_MEMORY_RO  . . . . . .        Number             5h 
SDL_RWOPS_STDFILE  . . . . . . .        Number             2h 
SDL_RWOPS_UNKNOWN  . . . . . . .        Number             0h 
SDL_RWOPS_WINFILE  . . . . . . .        Number             1h 
SDL_SCANCODE_0 . . . . . . . . .        Number            27h 
SDL_SCANCODE_1 . . . . . . . . .        Number            1Eh 
SDL_SCANCODE_2 . . . . . . . . .        Number            1Fh 
SDL_SCANCODE_3 . . . . . . . . .        Number            20h 
SDL_SCANCODE_4 . . . . . . . . .        Number            21h 
SDL_SCANCODE_5 . . . . . . . . .        Number            22h 
SDL_SCANCODE_6 . . . . . . . . .        Number            23h 
SDL_SCANCODE_7 . . . . . . . . .        Number            24h 
SDL_SCANCODE_8 . . . . . . . . .        Number            25h 
SDL_SCANCODE_9 . . . . . . . . .        Number            26h 
SDL_SCANCODE_A . . . . . . . . .        Number             4h 
SDL_SCANCODE_AC_BACK . . . . . .        Number           10Eh 
SDL_SCANCODE_AC_BOOKMARKS  . . .        Number           112h 
SDL_SCANCODE_AC_FORWARD  . . . .        Number           10Fh 
SDL_SCANCODE_AC_HOME . . . . . .        Number           10Dh 
SDL_SCANCODE_AC_REFRESH  . . . .        Number           111h 
SDL_SCANCODE_AC_SEARCH . . . . .        Number           10Ch 
SDL_SCANCODE_AC_STOP . . . . . .        Number           110h 
SDL_SCANCODE_AGAIN . . . . . . .        Number            79h 
SDL_SCANCODE_ALTERASE  . . . . .        Number            99h 
SDL_SCANCODE_APOSTROPHE  . . . .        Number            34h 
SDL_SCANCODE_APP1  . . . . . . .        Number           11Bh 
SDL_SCANCODE_APP2  . . . . . . .        Number           11Ch 
SDL_SCANCODE_APPLICATION . . . .        Number            65h 
SDL_SCANCODE_AUDIOFASTFORWARD  .        Number           11Eh 
SDL_SCANCODE_AUDIOMUTE . . . . .        Number           106h 
SDL_SCANCODE_AUDIONEXT . . . . .        Number           102h 
SDL_SCANCODE_AUDIOPLAY . . . . .        Number           105h 
SDL_SCANCODE_AUDIOPREV . . . . .        Number           103h 
SDL_SCANCODE_AUDIOREWIND . . . .        Number           11Dh 
SDL_SCANCODE_AUDIOSTOP . . . . .        Number           104h 
SDL_SCANCODE_B . . . . . . . . .        Number             5h 
SDL_SCANCODE_BACKSLASH . . . . .        Number            31h 
SDL_SCANCODE_BACKSPACE . . . . .        Number            2Ah 
SDL_SCANCODE_BRIGHTNESSDOWN  . .        Number           113h 
SDL_SCANCODE_BRIGHTNESSUP  . . .        Number           114h 
SDL_SCANCODE_C . . . . . . . . .        Number             6h 
SDL_SCANCODE_CALCULATOR  . . . .        Number           10Ah 
SDL_SCANCODE_CANCEL  . . . . . .        Number            9Bh 
SDL_SCANCODE_CAPSLOCK  . . . . .        Number            39h 
SDL_SCANCODE_CLEAR . . . . . . .        Number            9Ch 
SDL_SCANCODE_CLEARAGAIN  . . . .        Number            A2h 
SDL_SCANCODE_COMMA . . . . . . .        Number            36h 
SDL_SCANCODE_COMPUTER  . . . . .        Number           10Bh 
SDL_SCANCODE_COPY  . . . . . . .        Number            7Ch 
SDL_SCANCODE_CRSEL . . . . . . .        Number            A3h 
SDL_SCANCODE_CURRENCYSUBUNIT . .        Number            B5h 
SDL_SCANCODE_CURRENCYUNIT  . . .        Number            B4h 
SDL_SCANCODE_CUT . . . . . . . .        Number            7Bh 
SDL_SCANCODE_D . . . . . . . . .        Number             7h 
SDL_SCANCODE_DECIMALSEPARATOR  .        Number            B3h 
SDL_SCANCODE_DELETE  . . . . . .        Number            4Ch 
SDL_SCANCODE_DISPLAYSWITCH . . .        Number           115h 
SDL_SCANCODE_DOWN  . . . . . . .        Number            51h 
SDL_SCANCODE_E . . . . . . . . .        Number             8h 
SDL_SCANCODE_EJECT . . . . . . .        Number           119h 
SDL_SCANCODE_END . . . . . . . .        Number            4Dh 
SDL_SCANCODE_EQUALS  . . . . . .        Number            2Eh 
SDL_SCANCODE_ESCAPE  . . . . . .        Number            29h 
SDL_SCANCODE_EXECUTE . . . . . .        Number            74h 
SDL_SCANCODE_EXSEL . . . . . . .        Number            A4h 
SDL_SCANCODE_F . . . . . . . . .        Number             9h 
SDL_SCANCODE_F1  . . . . . . . .        Number            3Ah 
SDL_SCANCODE_F10 . . . . . . . .        Number            43h 
SDL_SCANCODE_F11 . . . . . . . .        Number            44h 
SDL_SCANCODE_F12 . . . . . . . .        Number            45h 
SDL_SCANCODE_F13 . . . . . . . .        Number            68h 
SDL_SCANCODE_F14 . . . . . . . .        Number            69h 
SDL_SCANCODE_F15 . . . . . . . .        Number            6Ah 
SDL_SCANCODE_F16 . . . . . . . .        Number            6Bh 
SDL_SCANCODE_F17 . . . . . . . .        Number            6Ch 
SDL_SCANCODE_F18 . . . . . . . .        Number            6Dh 
SDL_SCANCODE_F19 . . . . . . . .        Number            6Eh 
SDL_SCANCODE_F2  . . . . . . . .        Number            3Bh 
SDL_SCANCODE_F20 . . . . . . . .        Number            6Fh 
SDL_SCANCODE_F21 . . . . . . . .        Number            70h 
SDL_SCANCODE_F22 . . . . . . . .        Number            71h 
SDL_SCANCODE_F23 . . . . . . . .        Number            72h 
SDL_SCANCODE_F24 . . . . . . . .        Number            73h 
SDL_SCANCODE_F3  . . . . . . . .        Number            3Ch 
SDL_SCANCODE_F4  . . . . . . . .        Number            3Dh 
SDL_SCANCODE_F5  . . . . . . . .        Number            3Eh 
SDL_SCANCODE_F6  . . . . . . . .        Number            3Fh 
SDL_SCANCODE_F7  . . . . . . . .        Number            40h 
SDL_SCANCODE_F8  . . . . . . . .        Number            41h 
SDL_SCANCODE_F9  . . . . . . . .        Number            42h 
SDL_SCANCODE_FIND  . . . . . . .        Number            7Eh 
SDL_SCANCODE_G . . . . . . . . .        Number             Ah 
SDL_SCANCODE_GRAVE . . . . . . .        Number            35h 
SDL_SCANCODE_H . . . . . . . . .        Number             Bh 
SDL_SCANCODE_HELP  . . . . . . .        Number            75h 
SDL_SCANCODE_HOME  . . . . . . .        Number            4Ah 
SDL_SCANCODE_I . . . . . . . . .        Number             Ch 
SDL_SCANCODE_INSERT  . . . . . .        Number            49h 
SDL_SCANCODE_INTERNATIONAL1  . .        Number            87h 
SDL_SCANCODE_INTERNATIONAL2  . .        Number            88h 
SDL_SCANCODE_INTERNATIONAL3  . .        Number            89h 
SDL_SCANCODE_INTERNATIONAL4  . .        Number            8Ah 
SDL_SCANCODE_INTERNATIONAL5  . .        Number            8Bh 
SDL_SCANCODE_INTERNATIONAL6  . .        Number            8Ch 
SDL_SCANCODE_INTERNATIONAL7  . .        Number            8Dh 
SDL_SCANCODE_INTERNATIONAL8  . .        Number            8Eh 
SDL_SCANCODE_INTERNATIONAL9  . .        Number            8Fh 
SDL_SCANCODE_J . . . . . . . . .        Number             Dh 
SDL_SCANCODE_K . . . . . . . . .        Number             Eh 
SDL_SCANCODE_KBDILLUMDOWN  . . .        Number           117h 
SDL_SCANCODE_KBDILLUMTOGGLE  . .        Number           116h 
SDL_SCANCODE_KBDILLUMUP  . . . .        Number           118h 
SDL_SCANCODE_KP_0  . . . . . . .        Number            62h 
SDL_SCANCODE_KP_00 . . . . . . .        Number            B0h 
SDL_SCANCODE_KP_000  . . . . . .        Number            B1h 
SDL_SCANCODE_KP_1  . . . . . . .        Number            59h 
SDL_SCANCODE_KP_2  . . . . . . .        Number            5Ah 
SDL_SCANCODE_KP_3  . . . . . . .        Number            5Bh 
SDL_SCANCODE_KP_4  . . . . . . .        Number            5Ch 
SDL_SCANCODE_KP_5  . . . . . . .        Number            5Dh 
SDL_SCANCODE_KP_6  . . . . . . .        Number            5Eh 
SDL_SCANCODE_KP_7  . . . . . . .        Number            5Fh 
SDL_SCANCODE_KP_8  . . . . . . .        Number            60h 
SDL_SCANCODE_KP_9  . . . . . . .        Number            61h 
SDL_SCANCODE_KP_A  . . . . . . .        Number            BCh 
SDL_SCANCODE_KP_AMPERSAND  . . .        Number            C7h 
SDL_SCANCODE_KP_AT . . . . . . .        Number            CEh 
SDL_SCANCODE_KP_B  . . . . . . .        Number            BDh 
SDL_SCANCODE_KP_BACKSPACE  . . .        Number            BBh 
SDL_SCANCODE_KP_BINARY . . . . .        Number            DAh 
SDL_SCANCODE_KP_C  . . . . . . .        Number            BEh 
SDL_SCANCODE_KP_CLEAR  . . . . .        Number            D8h 
SDL_SCANCODE_KP_CLEARENTRY . . .        Number            D9h 
SDL_SCANCODE_KP_COLON  . . . . .        Number            CBh 
SDL_SCANCODE_KP_COMMA  . . . . .        Number            85h 
SDL_SCANCODE_KP_D  . . . . . . .        Number            BFh 
SDL_SCANCODE_KP_DBLAMPERSAND . .        Number            C8h 
SDL_SCANCODE_KP_DBLVERTICALBAR .        Number            CAh 
SDL_SCANCODE_KP_DECIMAL  . . . .        Number            DCh 
SDL_SCANCODE_KP_DIVIDE . . . . .        Number            54h 
SDL_SCANCODE_KP_E  . . . . . . .        Number            C0h 
SDL_SCANCODE_KP_ENTER  . . . . .        Number            58h 
SDL_SCANCODE_KP_EQUALS . . . . .        Number            67h 
SDL_SCANCODE_KP_EQUALSAS400  . .        Number            86h 
SDL_SCANCODE_KP_EXCLAM . . . . .        Number            CFh 
SDL_SCANCODE_KP_F  . . . . . . .        Number            C1h 
SDL_SCANCODE_KP_GREATER  . . . .        Number            C6h 
SDL_SCANCODE_KP_HASH . . . . . .        Number            CCh 
SDL_SCANCODE_KP_HEXADECIMAL  . .        Number            DDh 
SDL_SCANCODE_KP_LEFTBRACE  . . .        Number            B8h 
SDL_SCANCODE_KP_LEFTPAREN  . . .        Number            B6h 
SDL_SCANCODE_KP_LESS . . . . . .        Number            C5h 
SDL_SCANCODE_KP_MEMADD . . . . .        Number            D3h 
SDL_SCANCODE_KP_MEMCLEAR . . . .        Number            D2h 
SDL_SCANCODE_KP_MEMDIVIDE  . . .        Number            D6h 
SDL_SCANCODE_KP_MEMMULTIPLY  . .        Number            D5h 
SDL_SCANCODE_KP_MEMRECALL  . . .        Number            D1h 
SDL_SCANCODE_KP_MEMSTORE . . . .        Number            D0h 
SDL_SCANCODE_KP_MEMSUBTRACT  . .        Number            D4h 
SDL_SCANCODE_KP_MINUS  . . . . .        Number            56h 
SDL_SCANCODE_KP_MULTIPLY . . . .        Number            55h 
SDL_SCANCODE_KP_OCTAL  . . . . .        Number            DBh 
SDL_SCANCODE_KP_PERCENT  . . . .        Number            C4h 
SDL_SCANCODE_KP_PERIOD . . . . .        Number            63h 
SDL_SCANCODE_KP_PLUS . . . . . .        Number            57h 
SDL_SCANCODE_KP_PLUSMINUS  . . .        Number            D7h 
SDL_SCANCODE_KP_POWER  . . . . .        Number            C3h 
SDL_SCANCODE_KP_RIGHTBRACE . . .        Number            B9h 
SDL_SCANCODE_KP_RIGHTPAREN . . .        Number            B7h 
SDL_SCANCODE_KP_SPACE  . . . . .        Number            CDh 
SDL_SCANCODE_KP_TAB  . . . . . .        Number            BAh 
SDL_SCANCODE_KP_VERTICALBAR  . .        Number            C9h 
SDL_SCANCODE_KP_XOR  . . . . . .        Number            C2h 
SDL_SCANCODE_L . . . . . . . . .        Number             Fh 
SDL_SCANCODE_LALT  . . . . . . .        Number            E2h 
SDL_SCANCODE_LANG1 . . . . . . .        Number            90h 
SDL_SCANCODE_LANG2 . . . . . . .        Number            91h 
SDL_SCANCODE_LANG3 . . . . . . .        Number            92h 
SDL_SCANCODE_LANG4 . . . . . . .        Number            93h 
SDL_SCANCODE_LANG5 . . . . . . .        Number            94h 
SDL_SCANCODE_LANG6 . . . . . . .        Number            95h 
SDL_SCANCODE_LANG7 . . . . . . .        Number            96h 
SDL_SCANCODE_LANG8 . . . . . . .        Number            97h 
SDL_SCANCODE_LANG9 . . . . . . .        Number            98h 
SDL_SCANCODE_LCTRL . . . . . . .        Number            E0h 
SDL_SCANCODE_LEFT  . . . . . . .        Number            50h 
SDL_SCANCODE_LEFTBRACKET . . . .        Number            2Fh 
SDL_SCANCODE_LGUI  . . . . . . .        Number            E3h 
SDL_SCANCODE_LSHIFT  . . . . . .        Number            E1h 
SDL_SCANCODE_M . . . . . . . . .        Number            10h 
SDL_SCANCODE_MAIL  . . . . . . .        Number           109h 
SDL_SCANCODE_MEDIASELECT . . . .        Number           107h 
SDL_SCANCODE_MENU  . . . . . . .        Number            76h 
SDL_SCANCODE_MINUS . . . . . . .        Number            2Dh 
SDL_SCANCODE_MODE  . . . . . . .        Number           101h 
SDL_SCANCODE_MUTE  . . . . . . .        Number            7Fh 
SDL_SCANCODE_N . . . . . . . . .        Number            11h 
SDL_SCANCODE_NONUSBACKSLASH  . .        Number            64h 
SDL_SCANCODE_NONUSHASH . . . . .        Number            32h 
SDL_SCANCODE_NUMLOCKCLEAR  . . .        Number            53h 
SDL_SCANCODE_O . . . . . . . . .        Number            12h 
SDL_SCANCODE_OPER  . . . . . . .        Number            A1h 
SDL_SCANCODE_OUT . . . . . . . .        Number            A0h 
SDL_SCANCODE_P . . . . . . . . .        Number            13h 
SDL_SCANCODE_PAGEDOWN  . . . . .        Number            4Eh 
SDL_SCANCODE_PAGEUP  . . . . . .        Number            4Bh 
SDL_SCANCODE_PASTE . . . . . . .        Number            7Dh 
SDL_SCANCODE_PAUSE . . . . . . .        Number            48h 
SDL_SCANCODE_PERIOD  . . . . . .        Number            37h 
SDL_SCANCODE_POWER . . . . . . .        Number            66h 
SDL_SCANCODE_PRINTSCREEN . . . .        Number            46h 
SDL_SCANCODE_PRIOR . . . . . . .        Number            9Dh 
SDL_SCANCODE_Q . . . . . . . . .        Number            14h 
SDL_SCANCODE_R . . . . . . . . .        Number            15h 
SDL_SCANCODE_RALT  . . . . . . .        Number            E6h 
SDL_SCANCODE_RCTRL . . . . . . .        Number            E4h 
SDL_SCANCODE_RETURN  . . . . . .        Number            28h 
SDL_SCANCODE_RETURN2 . . . . . .        Number            9Eh 
SDL_SCANCODE_RGUI  . . . . . . .        Number            E7h 
SDL_SCANCODE_RIGHT . . . . . . .        Number            4Fh 
SDL_SCANCODE_RIGHTBRACKET  . . .        Number            30h 
SDL_SCANCODE_RSHIFT  . . . . . .        Number            E5h 
SDL_SCANCODE_S . . . . . . . . .        Number            16h 
SDL_SCANCODE_SCROLLLOCK  . . . .        Number            47h 
SDL_SCANCODE_SELECT  . . . . . .        Number            77h 
SDL_SCANCODE_SEMICOLON . . . . .        Number            33h 
SDL_SCANCODE_SEPARATOR . . . . .        Number            9Fh 
SDL_SCANCODE_SLASH . . . . . . .        Number            38h 
SDL_SCANCODE_SLEEP . . . . . . .        Number           11Ah 
SDL_SCANCODE_SPACE . . . . . . .        Number            2Ch 
SDL_SCANCODE_STOP  . . . . . . .        Number            78h 
SDL_SCANCODE_SYSREQ  . . . . . .        Number            9Ah 
SDL_SCANCODE_T . . . . . . . . .        Number            17h 
SDL_SCANCODE_TAB . . . . . . . .        Number            2Bh 
SDL_SCANCODE_THOUSANDSSEPARATOR         Number            B2h 
SDL_SCANCODE_U . . . . . . . . .        Number            18h 
SDL_SCANCODE_UNDO  . . . . . . .        Number            7Ah 
SDL_SCANCODE_UNKNOWN . . . . . .        Number             0h 
SDL_SCANCODE_UP  . . . . . . . .        Number            52h 
SDL_SCANCODE_V . . . . . . . . .        Number            19h 
SDL_SCANCODE_VOLUMEDOWN  . . . .        Number            81h 
SDL_SCANCODE_VOLUMEUP  . . . . .        Number            80h 
SDL_SCANCODE_W . . . . . . . . .        Number            1Ah 
SDL_SCANCODE_WWW . . . . . . . .        Number           108h 
SDL_SCANCODE_X . . . . . . . . .        Number            1Bh 
SDL_SCANCODE_Y . . . . . . . . .        Number            1Ch 
SDL_SCANCODE_Z . . . . . . . . .        Number            1Dh 
SDL_SENSORUPDATE . . . . . . . .        Number          1200h 
SDL_SIMD_ALIGNED . . . . . . . .        Number             8h 
SDL_SWSURFACE  . . . . . . . . .        Number             0h 
SDL_SYSTEM_CURSOR_ARROW  . . . .        Number             0h 
SDL_SYSTEM_CURSOR_CROSSHAIR  . .        Number             3h 
SDL_SYSTEM_CURSOR_HAND . . . . .        Number             Bh 
SDL_SYSTEM_CURSOR_IBEAM  . . . .        Number             1h 
SDL_SYSTEM_CURSOR_NO . . . . . .        Number             Ah 
SDL_SYSTEM_CURSOR_SIZEALL  . . .        Number             9h 
SDL_SYSTEM_CURSOR_SIZENESW . . .        Number             6h 
SDL_SYSTEM_CURSOR_SIZENS . . . .        Number             8h 
SDL_SYSTEM_CURSOR_SIZENWSE . . .        Number             5h 
SDL_SYSTEM_CURSOR_SIZEWE . . . .        Number             7h 
SDL_SYSTEM_CURSOR_WAIT . . . . .        Number             2h 
SDL_SYSTEM_CURSOR_WAITARROW  . .        Number             4h 
SDL_SYSWMEVENT . . . . . . . . .        Number           201h 
SDL_ScaleModeBest  . . . . . . .        Number             2h 
SDL_ScaleModeLinear  . . . . . .        Number             1h 
SDL_ScaleModeNearest . . . . . .        Number             0h 
SDL_TEXTEDITING  . . . . . . . .        Number           302h 
SDL_TEXTEDITINGEVENT_TEXT_SIZE .        Number            20h 
SDL_TEXTINPUT  . . . . . . . . .        Number           303h 
SDL_TEXTINPUTEVENT_TEXT_SIZE . .        Number            20h 
SDL_TEXTUREACCESS_STATIC . . . .        Number             0h 
SDL_TEXTUREACCESS_STREAMING  . .        Number             1h 
SDL_TEXTUREACCESS_TARGET . . . .        Number             2h 
SDL_TEXTUREMODULATE_ALPHA  . . .        Number             2h 
SDL_TEXTUREMODULATE_COLOR  . . .        Number             1h 
SDL_TEXTUREMODULATE_NONE . . . .        Number             0h 
SDL_TTF_COMPILEDVERSION  . . . .        Text   SDL_VERSIONNUM ( SDL_TTF_MAJOR_VERSION , SDL_TTF_MINOR_VERSION , SDL_TTF_PATCHLEVEL )
SDL_TTF_H_ . . . . . . . . . . .        Text   
SDL_TTF_MAJOR_VERSION  . . . . .        Number             2h 
SDL_TTF_MINOR_VERSION  . . . . .        Number             0h 
SDL_TTF_PATCHLEVEL . . . . . . .        Number             Fh 
SDL_UNSUPPORTED  . . . . . . . .        Number             4h 
SDL_USEREVENT  . . . . . . . . .        Number          8000h 
SDL_WINDOWEVENT  . . . . . . . .        Number           200h 
SDL_WINDOWEVENT_CLOSE  . . . . .        Number             Eh 
SDL_WINDOWEVENT_ENTER  . . . . .        Number             Ah 
SDL_WINDOWEVENT_EXPOSED  . . . .        Number             3h 
SDL_WINDOWEVENT_FOCUS_GAINED . .        Number             Ch 
SDL_WINDOWEVENT_FOCUS_LOST . . .        Number             Dh 
SDL_WINDOWEVENT_HIDDEN . . . . .        Number             2h 
SDL_WINDOWEVENT_HIT_TEST . . . .        Number            10h 
SDL_WINDOWEVENT_LEAVE  . . . . .        Number             Bh 
SDL_WINDOWEVENT_MAXIMIZED  . . .        Number             8h 
SDL_WINDOWEVENT_MINIMIZED  . . .        Number             7h 
SDL_WINDOWEVENT_MOVED  . . . . .        Number             4h 
SDL_WINDOWEVENT_NONE . . . . . .        Number             0h 
SDL_WINDOWEVENT_RESIZED  . . . .        Number             5h 
SDL_WINDOWEVENT_RESTORED . . . .        Number             9h 
SDL_WINDOWEVENT_SHOWN  . . . . .        Number             1h 
SDL_WINDOWEVENT_SIZE_CHANGED . .        Number             6h 
SDL_WINDOWEVENT_TAKE_FOCUS . . .        Number             Fh 
SDL_WINDOWPOS_CENTERED . . . . .        Text   SDL_WINDOWPOS_CENTERED_DISPLAY ( 0 )
SDL_WINDOWPOS_CENTERED_MASK  . .        Number      2FFF0000h 
SDL_WINDOWPOS_UNDEFINED  . . . .        Text   SDL_WINDOWPOS_UNDEFINED_DISPLAY ( 0 )
SDL_WINDOWPOS_UNDEFINED_MASK . .        Number      1FFF0000h 
SDL_WINDOW_ALLOW_HIGHDPI . . . .        Number          2000h 
SDL_WINDOW_ALWAYS_ON_TOP . . . .        Number          8000h 
SDL_WINDOW_BORDERLESS  . . . . .        Number            10h 
SDL_WINDOW_FOREIGN . . . . . . .        Number           800h 
SDL_WINDOW_FULLSCREEN  . . . . .        Number             1h 
SDL_WINDOW_FULLSCREEN_DESKTOP  .        Number          1001h 
SDL_WINDOW_HIDDEN  . . . . . . .        Number             8h 
SDL_WINDOW_INPUT_FOCUS . . . . .        Number           200h 
SDL_WINDOW_INPUT_GRABBED . . . .        Number           100h 
SDL_WINDOW_MAXIMIZED . . . . . .        Number            80h 
SDL_WINDOW_MINIMIZED . . . . . .        Number            40h 
SDL_WINDOW_MOUSE_CAPTURE . . . .        Number          4000h 
SDL_WINDOW_MOUSE_FOCUS . . . . .        Number           400h 
SDL_WINDOW_OPENGL  . . . . . . .        Number             2h 
SDL_WINDOW_POPUP_MENU  . . . . .        Number         80000h 
SDL_WINDOW_RESIZABLE . . . . . .        Number            20h 
SDL_WINDOW_SHOWN . . . . . . . .        Number             4h 
SDL_WINDOW_SKIP_TASKBAR  . . . .        Number         10000h 
SDL_WINDOW_TOOLTIP . . . . . . .        Number         40000h 
SDL_WINDOW_UTILITY . . . . . . .        Number         20000h 
SDL_WINDOW_VULKAN  . . . . . . .        Number      10000000h 
SDL_YUV_CONVERSION_AUTOMATIC . .        Number             3h 
SDL_YUV_CONVERSION_BT601 . . . .        Number             1h 
SDL_YUV_CONVERSION_BT709 . . . .        Number             2h 
SDL_YUV_CONVERSION_JPEG  . . . .        Number             0h 
SDL_audio_h_ . . . . . . . . . .        Text   
SDL_blendmode_h_ . . . . . . . .        Text   
SDL_error_h_ . . . . . . . . . .        Text   
SDL_events_h_  . . . . . . . . .        Text   
SDL_h_ . . . . . . . . . . . . .        Text   
SDL_keyboard_h_  . . . . . . . .        Text   
SDL_keycode_h_ . . . . . . . . .        Text   
SDL_mouse_h_ . . . . . . . . . .        Text   
SDL_pixels_h_  . . . . . . . . .        Text   
SDL_rect_h_  . . . . . . . . . .        Text   
SDL_render_h_  . . . . . . . . .        Text   
SDL_rwops_h_ . . . . . . . . . .        Text   
SDL_scancode_h_  . . . . . . . .        Text   
SDL_surface_h_ . . . . . . . . .        Text   
SDL_timer_h_ . . . . . . . . . .        Text   
SDL_video_h_ . . . . . . . . . .        Text   
STD_ERROR_HANDLE . . . . . . . .        Number     -0000000Ch 
STD_INPUT_HANDLE . . . . . . . .        Number     -0000000Ah 
STD_OUTPUT_HANDLE  . . . . . . .        Number     -0000000Bh 
TOTAL_BUTTONS  . . . . . . . . .        Number             4h 
TTF_GetError . . . . . . . . . .        Text   SDL_GetError
TTF_HINTING_LIGHT  . . . . . . .        Number             1h 
TTF_HINTING_MONO . . . . . . . .        Number             2h 
TTF_HINTING_NONE . . . . . . . .        Number             3h 
TTF_HINTING_NORMAL . . . . . . .        Number             0h 
TTF_MAJOR_VERSION  . . . . . . .        Text   SDL_TTF_MAJOR_VERSION
TTF_MINOR_VERSION  . . . . . . .        Text   SDL_TTF_MINOR_VERSION
TTF_PATCHLEVEL . . . . . . . . .        Text   SDL_TTF_PATCHLEVEL
TTF_STYLE_BOLD . . . . . . . . .        Number             1h 
TTF_STYLE_ITALIC . . . . . . . .        Number             2h 
TTF_STYLE_NORMAL . . . . . . . .        Number             0h 
TTF_STYLE_STRIKETHROUGH  . . . .        Number             8h 
TTF_STYLE_UNDERLINE  . . . . . .        Number             4h 
TTF_SetError . . . . . . . . . .        Text   SDL_SetError
UNICODE_BOM_NATIVE . . . . . . .        Number          FEFFh 
UNICODE_BOM_SWAPPED  . . . . . .        Number          FFFEh 
WINDOW_TITLE . . . . . . . . . .        Byte[13]           0h CONST FASTCALL
WriteConsole . . . . . . . . . .        Text   WriteConsoleA
currentTexture . . . . . . . . .        QWord             48h _BSS FASTCALL
eax  . . . . . . . . . . . . . .        Number             0h Undefined 
eventHandler . . . . . . . . . .        SDL_Event          8h _BSS FASTCALL
gHigh  . . . . . . . . . . . . .        QWord             70h _BSS FASTCALL
gLow . . . . . . . . . . . . . .        QWord             80h _BSS FASTCALL
gMedium  . . . . . . . . . . . .        QWord             78h _BSS FASTCALL
gMusic . . . . . . . . . . . . .        QWord             60h _BSS FASTCALL
gPromptTexture . . . . . . . . .        LTexture          50h _BSS FASTCALL
gRenderer  . . . . . . . . . . .        QWord             40h _BSS Public FASTCALL
gRenderer  . . . . . . . . . . .        Number             0h Undefined 
gScratch . . . . . . . . . . . .        QWord             68h _BSS FASTCALL
pWindow  . . . . . . . . . . . .        QWord              0h _BSS FASTCALL
quit . . . . . . . . . . . . . .        Byte               0h _DATA FASTCALL
rax  . . . . . . . . . . . . . .        Number             0h Undefined 
rbx  . . . . . . . . . . . . . .        Number             0h Undefined 

main.asm: 278 lines, 5 passes, 40 ms, 0 warnings, 0 errors
